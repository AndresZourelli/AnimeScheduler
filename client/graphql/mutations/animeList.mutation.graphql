mutation AddAnimeToUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  createUserAnimeList(
    input: { userAnimeList: { animeListId: $animeListId, animeId: $animeId } }
  ) {
    animeList {
      id
    }
  }
}

mutation DeleteAnimeFromList($animeListId: UUID!, $animeId: UUID!) {
  deleteUserAnimeListByAnimeListIdAndAnimeId(
    input: { animeListId: $animeListId, animeId: $animeId }
  ) {
    animeList {
      id
    }
  }
}

mutation AddAnimeToList($animeListId: UUID!, $animeId: UUID!) {
  upsertUserAnimeList(
    input: { userAnimeList: { animeListId: $animeListId, animeId: $animeId } }
    where: { animeId: $animeId, animeListId: $animeListId }
  ) {
    userAnimeList {
      animeList {
        title
        id
      }
    }
  }
}

mutation CreateNewList($userId: String!, $title: String!) {
  createAnimeList(input: { animeList: { userId: $userId, title: $title } }) {
    animeList {
      id
      title
    }
  }
}

mutation updateUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  updateUserAnimeListByAnimeListIdAndAnimeId(
    input: {
      patch: { animeListId: $animeListId }
      animeListId: $animeListId
      animeId: $animeId
      clientMutationId: "UpdateAnimeList"
    }
  ) {
    clientMutationId
  }
}

mutation updateUserAnimeWatchStatus(
  $userId: String!
  $animeId: UUID!
  $watchStatus: WatchingStatusEnum!
) {
  updateUserWatchStatus(
    input: {
      patch: { watchStatus: $watchStatus }
      userId: $userId
      animeId: $animeId
      clientMutationId: "ChangeAnimeWatchStatus"
    }
  ) {
    clientMutationId
  }
}

mutation upsertUserWatchStatus($userId: String!, $animeId: UUID!) {
  upsertUserWatchStatus(
    input: {
      userWatchStatus: { userId: $userId, animeId: $animeId }
      clientMutationId: "UpsertedAnimeWatchStatus"
    }
  ) {
    clientMutationId
  }
}
