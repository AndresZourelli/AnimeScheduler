mutation AddAnimeToUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  createUserAnimeList(
    input: { userAnimeList: { animeListId: $animeListId, animeId: $animeId } }
  ) {
    animeList {
      ...AnimeListFragment
    }
  }
}

mutation DeleteAnimeFromList($animeId: UUID!, $animeListId: UUID!) {
  deleteUserAnimeListByAnimeListIdAndAnimeId(
    input: {
      animeListId: $animeListId
      animeId: $animeId
      clientMutationId: "SuccessfulDelete"
    }
  ) {
    clientMutationId
    deletedUserAnimeListNodeId
    query {
      allAnimesTiles(condition: { id: $animeId }) {
        nodes {
          ...AllAnimesTileFragment
        }
      }
    }
  }
}

mutation AddAnimeToList(
  $inputAnimeId: UUID!
  $inputAnimeListId: UUID!
  $inputAnimeIndex: String!
) {
  insertAnimeToUserList(
    input: {
      clientMutationId: "AnimeAddedToList"
      inputAnimeId: $inputAnimeId
      inputAnimeListId: $inputAnimeListId
      inputAnimeIndex: $inputAnimeIndex
    }
  ) {
    clientMutationId
    query {
      allAnimesTiles(condition: { id: $inputAnimeId }) {
        nodes {
          ...AllAnimesTileFragment
        }
      }
    }
  }
}

mutation CreateNewList($userId: String!, $title: String!) {
  createAnimeList(input: { animeList: { userId: $userId, title: $title } }) {
    animeList {
      ...AnimeListFragment
    }
  }
}

mutation updateUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  updateUserAnimeListByAnimeListIdAndAnimeId(
    input: {
      patch: { animeListId: $animeListId }
      animeListId: $animeListId
      animeId: $animeId
      clientMutationId: "UpdateAnimeList"
    }
  ) {
    clientMutationId
  }
}

mutation updateUserAnimeWatchStatus(
  $userId: String!
  $animeId: UUID!
  $watchStatus: WatchingStatusEnum!
) {
  updateUserWatchStatus(
    input: {
      patch: { watchStatus: $watchStatus }
      userId: $userId
      animeId: $animeId
      clientMutationId: "ChangeAnimeWatchStatus"
    }
  ) {
    clientMutationId
  }
}

mutation UpsertUserWatchStatus(
  $watchStatus: WatchingStatusEnum!
  $userId: String!
  $animeId: UUID!
) {
  upsertUserWatchStatus(
    input: {
      userWatchStatus: {
        userId: $userId
        animeId: $animeId
        watchStatus: $watchStatus
      }
      clientMutationId: "upsertUserWatchStatus"
    }
  ) {
    clientMutationId
    query {
      allAnimesTiles(filter: { id: { equalTo: $animeId } }) {
        nodes {
          ...AllAnimesTileFragment
        }
      }
    }
  }
}

mutation CreateNewListAddAnime($animeidinput: UUID!) {
  createNewListAddAnime(
    input: {
      animeidinput: $animeidinput
      clientMutationId: "NewListCreatedAndAnimeAdded"
    }
  ) {
    user {
      animeLists {
        nodes {
          ...AnimeListFragment
        }
      }
    }
    clientMutationId
  }
}
