import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A floating point number that requires more precision than IEEE 754 binary 64 */
  BigFloat: any;
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any;
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
   */
  Datetime: any;
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: any;
};

/** All input for the `addAnimeToList` mutation. */
export type AddAnimeToListInput = {
  animeId?: Maybe<Scalars['UUID']>;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  privacy?: Maybe<AnimeListPrivacy>;
  title?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  watchStatus?: Maybe<WatchingStatusEnum>;
};

/** The output of our `addAnimeToList` mutation. */
export type AddAnimeToListPayload = {
  __typename?: 'AddAnimeToListPayload';
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our `addAnimeToList` mutation. */
export type AddAnimeToListPayloadAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};

export type AgeRatingType = Node & {
  __typename?: 'AgeRatingType';
  ageRatingType: Scalars['String'];
  /** Reads and enables pagination through a set of `Anime`. */
  animeByAgeRatingId: AnimeConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type AgeRatingTypeAnimeByAgeRatingIdArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCondition>;
  filter?: Maybe<AnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/**
 * A condition to be used against `AgeRatingType` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AgeRatingTypeCondition = {
  /** Checks for equality with the object’s `ageRatingType` field. */
  ageRatingType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AgeRatingType` object types. All fields are combined with a logical ‘and.’ */
export type AgeRatingTypeFilter = {
  /** Filter by the object’s `ageRatingType` field. */
  ageRatingType?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AgeRatingTypeFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AgeRatingTypeFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AgeRatingTypeFilter>>;
};

/** An input for mutations affecting `AgeRatingType` */
export type AgeRatingTypeInput = {
  ageRatingType: Scalars['String'];
  id?: Maybe<Scalars['UUID']>;
};

/** Represents an update to a `AgeRatingType`. Fields that are set will be updated. */
export type AgeRatingTypePatch = {
  ageRatingType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AgeRatingType` values. */
export type AgeRatingTypesConnection = {
  __typename?: 'AgeRatingTypesConnection';
  /** A list of edges which contains the `AgeRatingType` and cursor to aid in pagination. */
  edges: Array<AgeRatingTypesEdge>;
  /** A list of `AgeRatingType` objects. */
  nodes: Array<Maybe<AgeRatingType>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AgeRatingType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AgeRatingType` edge in the connection. */
export type AgeRatingTypesEdge = {
  __typename?: 'AgeRatingTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AgeRatingType` at the end of the edge. */
  node?: Maybe<AgeRatingType>;
};

/** Methods to use when ordering `AgeRatingType`. */
export enum AgeRatingTypesOrderBy {
  AgeRatingTypeAsc = 'AGE_RATING_TYPE_ASC',
  AgeRatingTypeDesc = 'AGE_RATING_TYPE_DESC',
  AnimeByAgeRatingIdCountAsc = 'ANIME_BY_AGE_RATING_ID__COUNT_ASC',
  AnimeByAgeRatingIdCountDesc = 'ANIME_BY_AGE_RATING_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AiringStatusType = Node & {
  __typename?: 'AiringStatusType';
  airingStatusType: Scalars['String'];
  /** Reads and enables pagination through a set of `Anime`. */
  animeByAiringStatusId: AnimeConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type AiringStatusTypeAnimeByAiringStatusIdArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCondition>;
  filter?: Maybe<AnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/**
 * A condition to be used against `AiringStatusType` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AiringStatusTypeCondition = {
  /** Checks for equality with the object’s `airingStatusType` field. */
  airingStatusType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AiringStatusType` object types. All fields are combined with a logical ‘and.’ */
export type AiringStatusTypeFilter = {
  /** Filter by the object’s `airingStatusType` field. */
  airingStatusType?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AiringStatusTypeFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AiringStatusTypeFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AiringStatusTypeFilter>>;
};

/** An input for mutations affecting `AiringStatusType` */
export type AiringStatusTypeInput = {
  airingStatusType: Scalars['String'];
  id?: Maybe<Scalars['UUID']>;
};

/** Represents an update to a `AiringStatusType`. Fields that are set will be updated. */
export type AiringStatusTypePatch = {
  airingStatusType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AiringStatusType` values. */
export type AiringStatusTypesConnection = {
  __typename?: 'AiringStatusTypesConnection';
  /** A list of edges which contains the `AiringStatusType` and cursor to aid in pagination. */
  edges: Array<AiringStatusTypesEdge>;
  /** A list of `AiringStatusType` objects. */
  nodes: Array<Maybe<AiringStatusType>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AiringStatusType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AiringStatusType` edge in the connection. */
export type AiringStatusTypesEdge = {
  __typename?: 'AiringStatusTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AiringStatusType` at the end of the edge. */
  node?: Maybe<AiringStatusType>;
};

/** Methods to use when ordering `AiringStatusType`. */
export enum AiringStatusTypesOrderBy {
  AiringStatusTypeAsc = 'AIRING_STATUS_TYPE_ASC',
  AiringStatusTypeDesc = 'AIRING_STATUS_TYPE_DESC',
  AnimeByAiringStatusIdCountAsc = 'ANIME_BY_AIRING_STATUS_ID__COUNT_ASC',
  AnimeByAiringStatusIdCountDesc = 'ANIME_BY_AIRING_STATUS_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AllAnimesTile = {
  __typename?: 'AllAnimesTile';
  airingStatusType?: Maybe<Scalars['String']>;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  description?: Maybe<Scalars['String']>;
  genres?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['UUID']>;
  likes?: Maybe<Scalars['Boolean']>;
  mediaType?: Maybe<Scalars['String']>;
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  season?: Maybe<Scalars['String']>;
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  studios?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  userEpisodeCount?: Maybe<Scalars['BigFloat']>;
  userLiked?: Maybe<Scalars['Boolean']>;
  userRating?: Maybe<Scalars['BigFloat']>;
  userWatchStatus?: Maybe<WatchingStatusEnum>;
};

/**
 * A condition to be used against `AllAnimesTile` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AllAnimesTileCondition = {
  /** Checks for equality with the object’s `airingStatusType` field. */
  airingStatusType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `averageWatcherRating` field. */
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `genres` field. */
  genres?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `likes` field. */
  likes?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `mediaType` field. */
  mediaType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `season` field. */
  season?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `studios` field. */
  studios?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `url` field. */
  url?: Maybe<Scalars['String']>;
};

/** A filter to be used against `AllAnimesTile` object types. All fields are combined with a logical ‘and.’ */
export type AllAnimesTileFilter = {
  /** Filter by the object’s `airingStatusType` field. */
  airingStatusType?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AllAnimesTileFilter>>;
  /** Filter by the object’s `averageWatcherRating` field. */
  averageWatcherRating?: Maybe<BigFloatFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `genres` field. */
  genres?: Maybe<StringListFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `likes` field. */
  likes?: Maybe<BooleanFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<AllAnimesTileFilter>;
  /** Filter by the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: Maybe<IntFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AllAnimesTileFilter>>;
  /** Filter by the object’s `season` field. */
  season?: Maybe<StringFilter>;
  /** Filter by the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `studios` field. */
  studios?: Maybe<StringListFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `url` field. */
  url?: Maybe<StringFilter>;
  /** Filter by the object’s `userEpisodeCount` field. */
  userEpisodeCount?: Maybe<BigFloatFilter>;
  /** Filter by the object’s `userLiked` field. */
  userLiked?: Maybe<BooleanFilter>;
  /** Filter by the object’s `userRating` field. */
  userRating?: Maybe<BigFloatFilter>;
  /** Filter by the object’s `userWatchStatus` field. */
  userWatchStatus?: Maybe<WatchingStatusEnumFilter>;
};

/** A connection to a list of `AllAnimesTile` values. */
export type AllAnimesTilesConnection = {
  __typename?: 'AllAnimesTilesConnection';
  /** A list of edges which contains the `AllAnimesTile` and cursor to aid in pagination. */
  edges: Array<AllAnimesTilesEdge>;
  /** A list of `AllAnimesTile` objects. */
  nodes: Array<Maybe<AllAnimesTile>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AllAnimesTile` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AllAnimesTile` edge in the connection. */
export type AllAnimesTilesEdge = {
  __typename?: 'AllAnimesTilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AllAnimesTile` at the end of the edge. */
  node?: Maybe<AllAnimesTile>;
};

/** Methods to use when ordering `AllAnimesTile`. */
export enum AllAnimesTilesOrderBy {
  AiringStatusTypeAsc = 'AIRING_STATUS_TYPE_ASC',
  AiringStatusTypeDesc = 'AIRING_STATUS_TYPE_DESC',
  AverageWatcherRatingAsc = 'AVERAGE_WATCHER_RATING_ASC',
  AverageWatcherRatingDesc = 'AVERAGE_WATCHER_RATING_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  GenresAsc = 'GENRES_ASC',
  GenresDesc = 'GENRES_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LikesAsc = 'LIKES_ASC',
  LikesDesc = 'LIKES_DESC',
  MediaTypeAsc = 'MEDIA_TYPE_ASC',
  MediaTypeDesc = 'MEDIA_TYPE_DESC',
  Natural = 'NATURAL',
  NumberOfEpisodesAsc = 'NUMBER_OF_EPISODES_ASC',
  NumberOfEpisodesDesc = 'NUMBER_OF_EPISODES_DESC',
  SeasonAsc = 'SEASON_ASC',
  SeasonDesc = 'SEASON_DESC',
  StartBroadcastDatetimeAsc = 'START_BROADCAST_DATETIME_ASC',
  StartBroadcastDatetimeDesc = 'START_BROADCAST_DATETIME_DESC',
  StudiosAsc = 'STUDIOS_ASC',
  StudiosDesc = 'STUDIOS_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

export type AllUserAnime = {
  __typename?: 'AllUserAnime';
  description?: Maybe<Scalars['String']>;
  genres?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['UUID']>;
  listId?: Maybe<Scalars['UUID']>;
  listName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `AllUserAnime` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AllUserAnimeCondition = {
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `genres` field. */
  genres?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `listId` field. */
  listId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `listName` field. */
  listName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `url` field. */
  url?: Maybe<Scalars['String']>;
};

/** A connection to a list of `AllUserAnime` values. */
export type AllUserAnimeConnection = {
  __typename?: 'AllUserAnimeConnection';
  /** A list of edges which contains the `AllUserAnime` and cursor to aid in pagination. */
  edges: Array<AllUserAnimeEdge>;
  /** A list of `AllUserAnime` objects. */
  nodes: Array<Maybe<AllUserAnime>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AllUserAnime` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AllUserAnime` edge in the connection. */
export type AllUserAnimeEdge = {
  __typename?: 'AllUserAnimeEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AllUserAnime` at the end of the edge. */
  node?: Maybe<AllUserAnime>;
};

/** A filter to be used against `AllUserAnime` object types. All fields are combined with a logical ‘and.’ */
export type AllUserAnimeFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AllUserAnimeFilter>>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `genres` field. */
  genres?: Maybe<StringListFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `listId` field. */
  listId?: Maybe<UuidFilter>;
  /** Filter by the object’s `listName` field. */
  listName?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<AllUserAnimeFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AllUserAnimeFilter>>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `url` field. */
  url?: Maybe<StringFilter>;
};

/** Methods to use when ordering `AllUserAnime`. */
export enum AllUserAnimeOrderBy {
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  GenresAsc = 'GENRES_ASC',
  GenresDesc = 'GENRES_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ListIdAsc = 'LIST_ID_ASC',
  ListIdDesc = 'LIST_ID_DESC',
  ListNameAsc = 'LIST_NAME_ASC',
  ListNameDesc = 'LIST_NAME_DESC',
  Natural = 'NATURAL',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

export type AlternateAnimeName = Node & {
  __typename?: 'AlternateAnimeName';
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  id: Scalars['UUID'];
  name: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AlternateAnimeName` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AlternateAnimeNameCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
};

/** A filter to be used against `AlternateAnimeName` object types. All fields are combined with a logical ‘and.’ */
export type AlternateAnimeNameFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AlternateAnimeNameFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<AlternateAnimeNameFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AlternateAnimeNameFilter>>;
};

/** An input for mutations affecting `AlternateAnimeName` */
export type AlternateAnimeNameInput = {
  animeId: Scalars['UUID'];
  id?: Maybe<Scalars['UUID']>;
  name: Scalars['String'];
};

/** Represents an update to a `AlternateAnimeName`. Fields that are set will be updated. */
export type AlternateAnimeNamePatch = {
  animeId?: Maybe<Scalars['UUID']>;
  id?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
};

/** A connection to a list of `AlternateAnimeName` values. */
export type AlternateAnimeNamesConnection = {
  __typename?: 'AlternateAnimeNamesConnection';
  /** A list of edges which contains the `AlternateAnimeName` and cursor to aid in pagination. */
  edges: Array<AlternateAnimeNamesEdge>;
  /** A list of `AlternateAnimeName` objects. */
  nodes: Array<Maybe<AlternateAnimeName>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AlternateAnimeName` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AlternateAnimeName` edge in the connection. */
export type AlternateAnimeNamesEdge = {
  __typename?: 'AlternateAnimeNamesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AlternateAnimeName` at the end of the edge. */
  node?: Maybe<AlternateAnimeName>;
};

/** Methods to use when ordering `AlternateAnimeName`. */
export enum AlternateAnimeNamesOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Anime = Node & {
  __typename?: 'Anime';
  /** Reads a single `AgeRatingType` that is related to this `Anime`. */
  ageRating?: Maybe<AgeRatingType>;
  /** Reads a single `AiringStatusType` that is related to this `Anime`. */
  airingStatus?: Maybe<AiringStatusType>;
  /** Reads and enables pagination through a set of `AlternateAnimeName`. */
  alternateAnimeNames: AlternateAnimeNamesConnection;
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  /** Reads and enables pagination through a set of `AnimeGenre`. */
  animeGenres: AnimeGenresConnection;
  /** Reads and enables pagination through a set of `AnimeImage`. */
  animeImages: AnimeImagesConnection;
  /** Reads and enables pagination through a set of `AnimeLicensor`. */
  animeLicensors: AnimeLicensorsConnection;
  /** Reads and enables pagination through a set of `AnimeProducer`. */
  animeProducers: AnimeProducersConnection;
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs: AnimeStaffConnection;
  /** Reads and enables pagination through a set of `AnimeStudio`. */
  animeStudios: AnimeStudiosConnection;
  /** Reads and enables pagination through a set of `AnimeUserScore`. */
  animeUserScores: AnimeUserScoresConnection;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  /** Reads and enables pagination through a set of `StaffResult`. */
  characterPreview: StaffResultsConnection;
  description?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  id: Scalars['UUID'];
  malId?: Maybe<Scalars['Int']>;
  /** Reads a single `MediaType` that is related to this `Anime`. */
  mediaType?: Maybe<MediaType>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  /** Reads a single `Image` that is related to this `Anime`. */
  profileImage?: Maybe<Image>;
  /** Reads a single `Season` that is related to this `Anime`. */
  season?: Maybe<Season>;
  /** Reads a single `SourceMaterialType` that is related to this `Anime`. */
  sourceMaterial?: Maybe<SourceMaterialType>;
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  title: Scalars['String'];
  /** Reads and enables pagination through a set of `UserAnimeList`. */
  userAnimeLists: UserAnimeListsConnection;
  /** Reads and enables pagination through a set of `UserAnime`. */
  userAnimes: UserAnimeConnection;
  userEpisodeCount?: Maybe<Scalars['BigFloat']>;
  userLiked?: Maybe<Scalars['Boolean']>;
  userRating?: Maybe<Scalars['BigFloat']>;
  userWatchStatus?: Maybe<WatchingStatusEnum>;
  /** Reads and enables pagination through a set of `UserWatchStatus`. */
  userWatchStatuses: UserWatchStatusesConnection;
};


export type AnimeAlternateAnimeNamesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AlternateAnimeNameCondition>;
  filter?: Maybe<AlternateAnimeNameFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AlternateAnimeNamesOrderBy>>;
};


export type AnimeAnimeCharactersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCharacterCondition>;
  filter?: Maybe<AnimeCharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};


export type AnimeAnimeGenresArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeGenreCondition>;
  filter?: Maybe<AnimeGenreFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeGenresOrderBy>>;
};


export type AnimeAnimeImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeImageCondition>;
  filter?: Maybe<AnimeImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeImagesOrderBy>>;
};


export type AnimeAnimeLicensorsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeLicensorCondition>;
  filter?: Maybe<AnimeLicensorFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeLicensorsOrderBy>>;
};


export type AnimeAnimeProducersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeProducerCondition>;
  filter?: Maybe<AnimeProducerFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeProducersOrderBy>>;
};


export type AnimeAnimeStaffsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeStaffCondition>;
  filter?: Maybe<AnimeStaffFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};


export type AnimeAnimeStudiosArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeStudioCondition>;
  filter?: Maybe<AnimeStudioFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeStudiosOrderBy>>;
};


export type AnimeAnimeUserScoresArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeUserScoreCondition>;
  filter?: Maybe<AnimeUserScoreFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};


export type AnimeCharacterPreviewArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<StaffResultFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type AnimeUserAnimeListsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserAnimeListCondition>;
  filter?: Maybe<UserAnimeListFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};


export type AnimeUserAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserAnimeCondition>;
  filter?: Maybe<UserAnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserAnimeOrderBy>>;
};


export type AnimeUserWatchStatusesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserWatchStatusCondition>;
  filter?: Maybe<UserWatchStatusFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserWatchStatusesOrderBy>>;
};

export type AnimeCharacter = {
  __typename?: 'AnimeCharacter';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /** Reads a single `Language` that is related to this `AnimeCharacter`. */
  language?: Maybe<Language>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
};

/**
 * A condition to be used against `AnimeCharacter` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeCharacterCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `characterId` field. */
  characterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `characterRoleId` field. */
  characterRoleId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `languageId` field. */
  languageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personId` field. */
  personId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeCharacter` object types. All fields are combined with a logical ‘and.’ */
export type AnimeCharacterFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeCharacterFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `characterId` field. */
  characterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `characterRoleId` field. */
  characterRoleId?: Maybe<UuidFilter>;
  /** Filter by the object’s `languageId` field. */
  languageId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeCharacterFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeCharacterFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeCharacter` */
export type AnimeCharacterInput = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  characterRoleId: Scalars['UUID'];
  languageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};

/** Represents an update to a `AnimeCharacter`. Fields that are set will be updated. */
export type AnimeCharacterPatch = {
  animeId?: Maybe<Scalars['UUID']>;
  characterId?: Maybe<Scalars['UUID']>;
  characterRoleId?: Maybe<Scalars['UUID']>;
  languageId?: Maybe<Scalars['UUID']>;
  personId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeCharacter` values. */
export type AnimeCharactersConnection = {
  __typename?: 'AnimeCharactersConnection';
  /** A list of edges which contains the `AnimeCharacter` and cursor to aid in pagination. */
  edges: Array<AnimeCharactersEdge>;
  /** A list of `AnimeCharacter` objects. */
  nodes: Array<Maybe<AnimeCharacter>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeCharacter` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeCharacter` edge in the connection. */
export type AnimeCharactersEdge = {
  __typename?: 'AnimeCharactersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeCharacter` at the end of the edge. */
  node?: Maybe<AnimeCharacter>;
};

/** Methods to use when ordering `AnimeCharacter`. */
export enum AnimeCharactersOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  CharacterByCharacterIdCharacterImageIdAsc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_ASC',
  CharacterByCharacterIdCharacterImageIdDesc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_DESC',
  CharacterByCharacterIdDescriptionAsc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_ASC',
  CharacterByCharacterIdDescriptionDesc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_DESC',
  CharacterByCharacterIdIdAsc = 'CHARACTER_BY_CHARACTER_ID__ID_ASC',
  CharacterByCharacterIdIdDesc = 'CHARACTER_BY_CHARACTER_ID__ID_DESC',
  CharacterByCharacterIdMalIdAsc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_ASC',
  CharacterByCharacterIdMalIdDesc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_DESC',
  CharacterByCharacterIdNameAsc = 'CHARACTER_BY_CHARACTER_ID__NAME_ASC',
  CharacterByCharacterIdNameDesc = 'CHARACTER_BY_CHARACTER_ID__NAME_DESC',
  CharacterIdAsc = 'CHARACTER_ID_ASC',
  CharacterIdDesc = 'CHARACTER_ID_DESC',
  CharacterRoleByCharacterRoleIdIdAsc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ID_ASC',
  CharacterRoleByCharacterRoleIdIdDesc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ID_DESC',
  CharacterRoleByCharacterRoleIdRoleAsc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ROLE_ASC',
  CharacterRoleByCharacterRoleIdRoleDesc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ROLE_DESC',
  CharacterRoleIdAsc = 'CHARACTER_ROLE_ID_ASC',
  CharacterRoleIdDesc = 'CHARACTER_ROLE_ID_DESC',
  LanguageByLanguageIdIdAsc = 'LANGUAGE_BY_LANGUAGE_ID__ID_ASC',
  LanguageByLanguageIdIdDesc = 'LANGUAGE_BY_LANGUAGE_ID__ID_DESC',
  LanguageByLanguageIdLanguageAsc = 'LANGUAGE_BY_LANGUAGE_ID__LANGUAGE_ASC',
  LanguageByLanguageIdLanguageDesc = 'LANGUAGE_BY_LANGUAGE_ID__LANGUAGE_DESC',
  LanguageIdAsc = 'LANGUAGE_ID_ASC',
  LanguageIdDesc = 'LANGUAGE_ID_DESC',
  Natural = 'NATURAL',
  PersonByPersonIdAlternateNamesAsc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_ASC',
  PersonByPersonIdAlternateNamesDesc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_DESC',
  PersonByPersonIdDescriptionAsc = 'PERSON_BY_PERSON_ID__DESCRIPTION_ASC',
  PersonByPersonIdDescriptionDesc = 'PERSON_BY_PERSON_ID__DESCRIPTION_DESC',
  PersonByPersonIdFirstNameAsc = 'PERSON_BY_PERSON_ID__FIRST_NAME_ASC',
  PersonByPersonIdFirstNameDesc = 'PERSON_BY_PERSON_ID__FIRST_NAME_DESC',
  PersonByPersonIdIdAsc = 'PERSON_BY_PERSON_ID__ID_ASC',
  PersonByPersonIdIdDesc = 'PERSON_BY_PERSON_ID__ID_DESC',
  PersonByPersonIdLastNameAsc = 'PERSON_BY_PERSON_ID__LAST_NAME_ASC',
  PersonByPersonIdLastNameDesc = 'PERSON_BY_PERSON_ID__LAST_NAME_DESC',
  PersonByPersonIdMalIdAsc = 'PERSON_BY_PERSON_ID__MAL_ID_ASC',
  PersonByPersonIdMalIdDesc = 'PERSON_BY_PERSON_ID__MAL_ID_DESC',
  PersonByPersonIdNativeNameAsc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_ASC',
  PersonByPersonIdNativeNameDesc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_DESC',
  PersonByPersonIdPersonImageIdAsc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_ASC',
  PersonByPersonIdPersonImageIdDesc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_DESC',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC'
}

/** A condition to be used against `Anime` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type AnimeCondition = {
  /** Checks for equality with the object’s `ageRatingId` field. */
  ageRatingId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `airingStatusId` field. */
  airingStatusId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `averageWatcherRating` field. */
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `duration` field. */
  duration?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `endBroadcastDatetime` field. */
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `malId` field. */
  malId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `mediaTypeId` field. */
  mediaTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `profileImageId` field. */
  profileImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `seasonId` field. */
  seasonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `sourceMaterialId` field. */
  sourceMaterialId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Anime` values. */
export type AnimeConnection = {
  __typename?: 'AnimeConnection';
  /** A list of edges which contains the `Anime` and cursor to aid in pagination. */
  edges: Array<AnimeEdge>;
  /** A list of `Anime` objects. */
  nodes: Array<Maybe<Anime>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Anime` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Anime` edge in the connection. */
export type AnimeEdge = {
  __typename?: 'AnimeEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Anime` at the end of the edge. */
  node?: Maybe<Anime>;
};

/** A filter to be used against `Anime` object types. All fields are combined with a logical ‘and.’ */
export type AnimeFilter = {
  /** Filter by the object’s `ageRatingId` field. */
  ageRatingId?: Maybe<UuidFilter>;
  /** Filter by the object’s `airingStatusId` field. */
  airingStatusId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeFilter>>;
  /** Filter by the object’s `averageWatcherRating` field. */
  averageWatcherRating?: Maybe<BigFloatFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `duration` field. */
  duration?: Maybe<IntFilter>;
  /** Filter by the object’s `endBroadcastDatetime` field. */
  endBroadcastDatetime?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: Maybe<IntFilter>;
  /** Filter by the object’s `mediaTypeId` field. */
  mediaTypeId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeFilter>;
  /** Filter by the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: Maybe<IntFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeFilter>>;
  /** Filter by the object’s `profileImageId` field. */
  profileImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `seasonId` field. */
  seasonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `sourceMaterialId` field. */
  sourceMaterialId?: Maybe<UuidFilter>;
  /** Filter by the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `userEpisodeCount` field. */
  userEpisodeCount?: Maybe<BigFloatFilter>;
  /** Filter by the object’s `userLiked` field. */
  userLiked?: Maybe<BooleanFilter>;
  /** Filter by the object’s `userRating` field. */
  userRating?: Maybe<BigFloatFilter>;
  /** Filter by the object’s `userWatchStatus` field. */
  userWatchStatus?: Maybe<WatchingStatusEnumFilter>;
};

export type AnimeGenre = Node & {
  __typename?: 'AnimeGenre';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  genreId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AnimeGenre` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeGenreCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `genreId` field. */
  genreId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeGenre` object types. All fields are combined with a logical ‘and.’ */
export type AnimeGenreFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeGenreFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `genreId` field. */
  genreId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeGenreFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeGenreFilter>>;
};

/** An input for mutations affecting `AnimeGenre` */
export type AnimeGenreInput = {
  animeId: Scalars['UUID'];
  genreId: Scalars['UUID'];
};

/** Represents an update to a `AnimeGenre`. Fields that are set will be updated. */
export type AnimeGenrePatch = {
  animeId?: Maybe<Scalars['UUID']>;
  genreId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeGenre` values. */
export type AnimeGenresConnection = {
  __typename?: 'AnimeGenresConnection';
  /** A list of edges which contains the `AnimeGenre` and cursor to aid in pagination. */
  edges: Array<AnimeGenresEdge>;
  /** A list of `AnimeGenre` objects. */
  nodes: Array<Maybe<AnimeGenre>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeGenre` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeGenre` edge in the connection. */
export type AnimeGenresEdge = {
  __typename?: 'AnimeGenresEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeGenre` at the end of the edge. */
  node?: Maybe<AnimeGenre>;
};

/** Methods to use when ordering `AnimeGenre`. */
export enum AnimeGenresOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  GenreByGenreIdGenreAsc = 'GENRE_BY_GENRE_ID__GENRE_ASC',
  GenreByGenreIdGenreDesc = 'GENRE_BY_GENRE_ID__GENRE_DESC',
  GenreByGenreIdIdAsc = 'GENRE_BY_GENRE_ID__ID_ASC',
  GenreByGenreIdIdDesc = 'GENRE_BY_GENRE_ID__ID_DESC',
  GenreIdAsc = 'GENRE_ID_ASC',
  GenreIdDesc = 'GENRE_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AnimeImage = Node & {
  __typename?: 'AnimeImage';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  imageId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AnimeImage` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeImageCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `imageId` field. */
  imageId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeImage` object types. All fields are combined with a logical ‘and.’ */
export type AnimeImageFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeImageFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `imageId` field. */
  imageId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeImageFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeImageFilter>>;
};

/** An input for mutations affecting `AnimeImage` */
export type AnimeImageInput = {
  animeId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};

/** Represents an update to a `AnimeImage`. Fields that are set will be updated. */
export type AnimeImagePatch = {
  animeId?: Maybe<Scalars['UUID']>;
  imageId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeImage` values. */
export type AnimeImagesConnection = {
  __typename?: 'AnimeImagesConnection';
  /** A list of edges which contains the `AnimeImage` and cursor to aid in pagination. */
  edges: Array<AnimeImagesEdge>;
  /** A list of `AnimeImage` objects. */
  nodes: Array<Maybe<AnimeImage>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeImage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeImage` edge in the connection. */
export type AnimeImagesEdge = {
  __typename?: 'AnimeImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeImage` at the end of the edge. */
  node?: Maybe<AnimeImage>;
};

/** Methods to use when ordering `AnimeImage`. */
export enum AnimeImagesOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  ImageByImageIdIdAsc = 'IMAGE_BY_IMAGE_ID__ID_ASC',
  ImageByImageIdIdDesc = 'IMAGE_BY_IMAGE_ID__ID_DESC',
  ImageByImageIdTitleAsc = 'IMAGE_BY_IMAGE_ID__TITLE_ASC',
  ImageByImageIdTitleDesc = 'IMAGE_BY_IMAGE_ID__TITLE_DESC',
  ImageByImageIdUrlAsc = 'IMAGE_BY_IMAGE_ID__URL_ASC',
  ImageByImageIdUrlDesc = 'IMAGE_BY_IMAGE_ID__URL_DESC',
  ImageIdAsc = 'IMAGE_ID_ASC',
  ImageIdDesc = 'IMAGE_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AnimeInfo = {
  __typename?: 'AnimeInfo';
  ageRating?: Maybe<Scalars['String']>;
  airingStatus?: Maybe<Scalars['String']>;
  animeProfileImage?: Maybe<Scalars['String']>;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  description?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['Int']>;
  mediaType?: Maybe<Scalars['String']>;
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  season?: Maybe<Scalars['String']>;
  sourceMaterialType?: Maybe<Scalars['String']>;
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  title?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `AnimeInfo` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeInfoCondition = {
  /** Checks for equality with the object’s `ageRating` field. */
  ageRating?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `airingStatus` field. */
  airingStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `animeProfileImage` field. */
  animeProfileImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `averageWatcherRating` field. */
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `duration` field. */
  duration?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `endBroadcastDatetime` field. */
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `malId` field. */
  malId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `mediaType` field. */
  mediaType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `season` field. */
  season?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceMaterialType` field. */
  sourceMaterialType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
};

/** A filter to be used against `AnimeInfo` object types. All fields are combined with a logical ‘and.’ */
export type AnimeInfoFilter = {
  /** Filter by the object’s `ageRating` field. */
  ageRating?: Maybe<StringFilter>;
  /** Filter by the object’s `airingStatus` field. */
  airingStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeInfoFilter>>;
  /** Filter by the object’s `animeProfileImage` field. */
  animeProfileImage?: Maybe<StringFilter>;
  /** Filter by the object’s `averageWatcherRating` field. */
  averageWatcherRating?: Maybe<BigFloatFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `duration` field. */
  duration?: Maybe<IntFilter>;
  /** Filter by the object’s `endBroadcastDatetime` field. */
  endBroadcastDatetime?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: Maybe<IntFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeInfoFilter>;
  /** Filter by the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: Maybe<IntFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeInfoFilter>>;
  /** Filter by the object’s `season` field. */
  season?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceMaterialType` field. */
  sourceMaterialType?: Maybe<StringFilter>;
  /** Filter by the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
};

/** A connection to a list of `AnimeInfo` values. */
export type AnimeInfosConnection = {
  __typename?: 'AnimeInfosConnection';
  /** A list of edges which contains the `AnimeInfo` and cursor to aid in pagination. */
  edges: Array<AnimeInfosEdge>;
  /** A list of `AnimeInfo` objects. */
  nodes: Array<Maybe<AnimeInfo>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeInfo` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeInfo` edge in the connection. */
export type AnimeInfosEdge = {
  __typename?: 'AnimeInfosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeInfo` at the end of the edge. */
  node?: Maybe<AnimeInfo>;
};

/** Methods to use when ordering `AnimeInfo`. */
export enum AnimeInfosOrderBy {
  AgeRatingAsc = 'AGE_RATING_ASC',
  AgeRatingDesc = 'AGE_RATING_DESC',
  AiringStatusAsc = 'AIRING_STATUS_ASC',
  AiringStatusDesc = 'AIRING_STATUS_DESC',
  AnimeProfileImageAsc = 'ANIME_PROFILE_IMAGE_ASC',
  AnimeProfileImageDesc = 'ANIME_PROFILE_IMAGE_DESC',
  AverageWatcherRatingAsc = 'AVERAGE_WATCHER_RATING_ASC',
  AverageWatcherRatingDesc = 'AVERAGE_WATCHER_RATING_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EndBroadcastDatetimeAsc = 'END_BROADCAST_DATETIME_ASC',
  EndBroadcastDatetimeDesc = 'END_BROADCAST_DATETIME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  MalIdAsc = 'MAL_ID_ASC',
  MalIdDesc = 'MAL_ID_DESC',
  MediaTypeAsc = 'MEDIA_TYPE_ASC',
  MediaTypeDesc = 'MEDIA_TYPE_DESC',
  Natural = 'NATURAL',
  NumberOfEpisodesAsc = 'NUMBER_OF_EPISODES_ASC',
  NumberOfEpisodesDesc = 'NUMBER_OF_EPISODES_DESC',
  SeasonAsc = 'SEASON_ASC',
  SeasonDesc = 'SEASON_DESC',
  SourceMaterialTypeAsc = 'SOURCE_MATERIAL_TYPE_ASC',
  SourceMaterialTypeDesc = 'SOURCE_MATERIAL_TYPE_DESC',
  StartBroadcastDatetimeAsc = 'START_BROADCAST_DATETIME_ASC',
  StartBroadcastDatetimeDesc = 'START_BROADCAST_DATETIME_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC'
}

/** An input for mutations affecting `Anime` */
export type AnimeInput = {
  ageRatingId: Scalars['UUID'];
  airingStatusId: Scalars['UUID'];
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  description?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['Int']>;
  mediaTypeId: Scalars['UUID'];
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  profileImageId: Scalars['UUID'];
  seasonId: Scalars['UUID'];
  sourceMaterialId: Scalars['UUID'];
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  title: Scalars['String'];
};

export type AnimeLicensor = Node & {
  __typename?: 'AnimeLicensor';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  licensorId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AnimeLicensor` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeLicensorCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `licensorId` field. */
  licensorId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeLicensor` object types. All fields are combined with a logical ‘and.’ */
export type AnimeLicensorFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeLicensorFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `licensorId` field. */
  licensorId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeLicensorFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeLicensorFilter>>;
};

/** An input for mutations affecting `AnimeLicensor` */
export type AnimeLicensorInput = {
  animeId: Scalars['UUID'];
  licensorId: Scalars['UUID'];
};

/** Represents an update to a `AnimeLicensor`. Fields that are set will be updated. */
export type AnimeLicensorPatch = {
  animeId?: Maybe<Scalars['UUID']>;
  licensorId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeLicensor` values. */
export type AnimeLicensorsConnection = {
  __typename?: 'AnimeLicensorsConnection';
  /** A list of edges which contains the `AnimeLicensor` and cursor to aid in pagination. */
  edges: Array<AnimeLicensorsEdge>;
  /** A list of `AnimeLicensor` objects. */
  nodes: Array<Maybe<AnimeLicensor>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeLicensor` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeLicensor` edge in the connection. */
export type AnimeLicensorsEdge = {
  __typename?: 'AnimeLicensorsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeLicensor` at the end of the edge. */
  node?: Maybe<AnimeLicensor>;
};

/** Methods to use when ordering `AnimeLicensor`. */
export enum AnimeLicensorsOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  LicensorByLicensorIdIdAsc = 'LICENSOR_BY_LICENSOR_ID__ID_ASC',
  LicensorByLicensorIdIdDesc = 'LICENSOR_BY_LICENSOR_ID__ID_DESC',
  LicensorByLicensorIdLicensorAsc = 'LICENSOR_BY_LICENSOR_ID__LICENSOR_ASC',
  LicensorByLicensorIdLicensorDesc = 'LICENSOR_BY_LICENSOR_ID__LICENSOR_DESC',
  LicensorIdAsc = 'LICENSOR_ID_ASC',
  LicensorIdDesc = 'LICENSOR_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AnimeList = Node & {
  __typename?: 'AnimeList';
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  privacy: AnimeListPrivacy;
  title: Scalars['String'];
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
  /** Reads and enables pagination through a set of `UserAnimeList`. */
  userAnimeLists: UserAnimeListsConnection;
};


export type AnimeListUserAnimeListsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserAnimeListCondition>;
  filter?: Maybe<UserAnimeListFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};

/**
 * A condition to be used against `AnimeList` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `privacy` field. */
  privacy?: Maybe<AnimeListPrivacy>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['String']>;
};

/** A filter to be used against `AnimeList` object types. All fields are combined with a logical ‘and.’ */
export type AnimeListFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeListFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeListFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeListFilter>>;
  /** Filter by the object’s `privacy` field. */
  privacy?: Maybe<AnimeListPrivacyFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<StringFilter>;
};

/** An input for mutations affecting `AnimeList` */
export type AnimeListInput = {
  id?: Maybe<Scalars['UUID']>;
  privacy?: Maybe<AnimeListPrivacy>;
  title?: Maybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** Represents an update to a `AnimeList`. Fields that are set will be updated. */
export type AnimeListPatch = {
  id?: Maybe<Scalars['UUID']>;
  privacy?: Maybe<AnimeListPrivacy>;
  title?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export enum AnimeListPrivacy {
  FriendsOnly = 'FRIENDS_ONLY',
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

/** A filter to be used against AnimeListPrivacy fields. All fields are combined with a logical ‘and.’ */
export type AnimeListPrivacyFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<AnimeListPrivacy>;
  /** Equal to the specified value. */
  equalTo?: Maybe<AnimeListPrivacy>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<AnimeListPrivacy>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<AnimeListPrivacy>;
  /** Included in the specified list. */
  in?: Maybe<Array<AnimeListPrivacy>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<AnimeListPrivacy>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<AnimeListPrivacy>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<AnimeListPrivacy>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<AnimeListPrivacy>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<AnimeListPrivacy>>;
};

/** A connection to a list of `AnimeList` values. */
export type AnimeListsConnection = {
  __typename?: 'AnimeListsConnection';
  /** A list of edges which contains the `AnimeList` and cursor to aid in pagination. */
  edges: Array<AnimeListsEdge>;
  /** A list of `AnimeList` objects. */
  nodes: Array<Maybe<AnimeList>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeList` edge in the connection. */
export type AnimeListsEdge = {
  __typename?: 'AnimeListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeList` at the end of the edge. */
  node?: Maybe<AnimeList>;
};

/** Methods to use when ordering `AnimeList`. */
export enum AnimeListsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  PrivacyAsc = 'PRIVACY_ASC',
  PrivacyDesc = 'PRIVACY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UserAnimeListsByAnimeListIdCountAsc = 'USER_ANIME_LISTS_BY_ANIME_LIST_ID__COUNT_ASC',
  UserAnimeListsByAnimeListIdCountDesc = 'USER_ANIME_LISTS_BY_ANIME_LIST_ID__COUNT_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** Methods to use when ordering `Anime`. */
export enum AnimeOrderBy {
  AgeRatingIdAsc = 'AGE_RATING_ID_ASC',
  AgeRatingIdDesc = 'AGE_RATING_ID_DESC',
  AgeRatingTypeByAgeRatingIdAgeRatingTypeAsc = 'AGE_RATING_TYPE_BY_AGE_RATING_ID__AGE_RATING_TYPE_ASC',
  AgeRatingTypeByAgeRatingIdAgeRatingTypeDesc = 'AGE_RATING_TYPE_BY_AGE_RATING_ID__AGE_RATING_TYPE_DESC',
  AgeRatingTypeByAgeRatingIdIdAsc = 'AGE_RATING_TYPE_BY_AGE_RATING_ID__ID_ASC',
  AgeRatingTypeByAgeRatingIdIdDesc = 'AGE_RATING_TYPE_BY_AGE_RATING_ID__ID_DESC',
  AiringStatusIdAsc = 'AIRING_STATUS_ID_ASC',
  AiringStatusIdDesc = 'AIRING_STATUS_ID_DESC',
  AiringStatusTypeByAiringStatusIdAiringStatusTypeAsc = 'AIRING_STATUS_TYPE_BY_AIRING_STATUS_ID__AIRING_STATUS_TYPE_ASC',
  AiringStatusTypeByAiringStatusIdAiringStatusTypeDesc = 'AIRING_STATUS_TYPE_BY_AIRING_STATUS_ID__AIRING_STATUS_TYPE_DESC',
  AiringStatusTypeByAiringStatusIdIdAsc = 'AIRING_STATUS_TYPE_BY_AIRING_STATUS_ID__ID_ASC',
  AiringStatusTypeByAiringStatusIdIdDesc = 'AIRING_STATUS_TYPE_BY_AIRING_STATUS_ID__ID_DESC',
  AlternateAnimeNamesByAnimeIdCountAsc = 'ALTERNATE_ANIME_NAMES_BY_ANIME_ID__COUNT_ASC',
  AlternateAnimeNamesByAnimeIdCountDesc = 'ALTERNATE_ANIME_NAMES_BY_ANIME_ID__COUNT_DESC',
  AnimeCharactersByAnimeIdCountAsc = 'ANIME_CHARACTERS_BY_ANIME_ID__COUNT_ASC',
  AnimeCharactersByAnimeIdCountDesc = 'ANIME_CHARACTERS_BY_ANIME_ID__COUNT_DESC',
  AnimeGenresByAnimeIdCountAsc = 'ANIME_GENRES_BY_ANIME_ID__COUNT_ASC',
  AnimeGenresByAnimeIdCountDesc = 'ANIME_GENRES_BY_ANIME_ID__COUNT_DESC',
  AnimeImagesByAnimeIdCountAsc = 'ANIME_IMAGES_BY_ANIME_ID__COUNT_ASC',
  AnimeImagesByAnimeIdCountDesc = 'ANIME_IMAGES_BY_ANIME_ID__COUNT_DESC',
  AnimeLicensorsByAnimeIdCountAsc = 'ANIME_LICENSORS_BY_ANIME_ID__COUNT_ASC',
  AnimeLicensorsByAnimeIdCountDesc = 'ANIME_LICENSORS_BY_ANIME_ID__COUNT_DESC',
  AnimeProducersByAnimeIdCountAsc = 'ANIME_PRODUCERS_BY_ANIME_ID__COUNT_ASC',
  AnimeProducersByAnimeIdCountDesc = 'ANIME_PRODUCERS_BY_ANIME_ID__COUNT_DESC',
  AnimeStaffByAnimeIdCountAsc = 'ANIME_STAFF_BY_ANIME_ID__COUNT_ASC',
  AnimeStaffByAnimeIdCountDesc = 'ANIME_STAFF_BY_ANIME_ID__COUNT_DESC',
  AnimeStudiosByAnimeIdCountAsc = 'ANIME_STUDIOS_BY_ANIME_ID__COUNT_ASC',
  AnimeStudiosByAnimeIdCountDesc = 'ANIME_STUDIOS_BY_ANIME_ID__COUNT_DESC',
  AnimeUserScoresByAnimeIdCountAsc = 'ANIME_USER_SCORES_BY_ANIME_ID__COUNT_ASC',
  AnimeUserScoresByAnimeIdCountDesc = 'ANIME_USER_SCORES_BY_ANIME_ID__COUNT_DESC',
  AverageWatcherRatingAsc = 'AVERAGE_WATCHER_RATING_ASC',
  AverageWatcherRatingDesc = 'AVERAGE_WATCHER_RATING_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EndBroadcastDatetimeAsc = 'END_BROADCAST_DATETIME_ASC',
  EndBroadcastDatetimeDesc = 'END_BROADCAST_DATETIME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ImageByProfileImageIdIdAsc = 'IMAGE_BY_PROFILE_IMAGE_ID__ID_ASC',
  ImageByProfileImageIdIdDesc = 'IMAGE_BY_PROFILE_IMAGE_ID__ID_DESC',
  ImageByProfileImageIdTitleAsc = 'IMAGE_BY_PROFILE_IMAGE_ID__TITLE_ASC',
  ImageByProfileImageIdTitleDesc = 'IMAGE_BY_PROFILE_IMAGE_ID__TITLE_DESC',
  ImageByProfileImageIdUrlAsc = 'IMAGE_BY_PROFILE_IMAGE_ID__URL_ASC',
  ImageByProfileImageIdUrlDesc = 'IMAGE_BY_PROFILE_IMAGE_ID__URL_DESC',
  MalIdAsc = 'MAL_ID_ASC',
  MalIdDesc = 'MAL_ID_DESC',
  MediaTypeByMediaTypeIdIdAsc = 'MEDIA_TYPE_BY_MEDIA_TYPE_ID__ID_ASC',
  MediaTypeByMediaTypeIdIdDesc = 'MEDIA_TYPE_BY_MEDIA_TYPE_ID__ID_DESC',
  MediaTypeByMediaTypeIdMediaTypeAsc = 'MEDIA_TYPE_BY_MEDIA_TYPE_ID__MEDIA_TYPE_ASC',
  MediaTypeByMediaTypeIdMediaTypeDesc = 'MEDIA_TYPE_BY_MEDIA_TYPE_ID__MEDIA_TYPE_DESC',
  MediaTypeIdAsc = 'MEDIA_TYPE_ID_ASC',
  MediaTypeIdDesc = 'MEDIA_TYPE_ID_DESC',
  Natural = 'NATURAL',
  NumberOfEpisodesAsc = 'NUMBER_OF_EPISODES_ASC',
  NumberOfEpisodesDesc = 'NUMBER_OF_EPISODES_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProfileImageIdAsc = 'PROFILE_IMAGE_ID_ASC',
  ProfileImageIdDesc = 'PROFILE_IMAGE_ID_DESC',
  SeasonBySeasonIdIdAsc = 'SEASON_BY_SEASON_ID__ID_ASC',
  SeasonBySeasonIdIdDesc = 'SEASON_BY_SEASON_ID__ID_DESC',
  SeasonBySeasonIdSeasonAsc = 'SEASON_BY_SEASON_ID__SEASON_ASC',
  SeasonBySeasonIdSeasonDesc = 'SEASON_BY_SEASON_ID__SEASON_DESC',
  SeasonIdAsc = 'SEASON_ID_ASC',
  SeasonIdDesc = 'SEASON_ID_DESC',
  SourceMaterialIdAsc = 'SOURCE_MATERIAL_ID_ASC',
  SourceMaterialIdDesc = 'SOURCE_MATERIAL_ID_DESC',
  SourceMaterialTypeBySourceMaterialIdIdAsc = 'SOURCE_MATERIAL_TYPE_BY_SOURCE_MATERIAL_ID__ID_ASC',
  SourceMaterialTypeBySourceMaterialIdIdDesc = 'SOURCE_MATERIAL_TYPE_BY_SOURCE_MATERIAL_ID__ID_DESC',
  SourceMaterialTypeBySourceMaterialIdSourceMaterialTypeAsc = 'SOURCE_MATERIAL_TYPE_BY_SOURCE_MATERIAL_ID__SOURCE_MATERIAL_TYPE_ASC',
  SourceMaterialTypeBySourceMaterialIdSourceMaterialTypeDesc = 'SOURCE_MATERIAL_TYPE_BY_SOURCE_MATERIAL_ID__SOURCE_MATERIAL_TYPE_DESC',
  StartBroadcastDatetimeAsc = 'START_BROADCAST_DATETIME_ASC',
  StartBroadcastDatetimeDesc = 'START_BROADCAST_DATETIME_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UserAnimeByAnimeIdCountAsc = 'USER_ANIME_BY_ANIME_ID__COUNT_ASC',
  UserAnimeByAnimeIdCountDesc = 'USER_ANIME_BY_ANIME_ID__COUNT_DESC',
  UserAnimeListsByAnimeIdCountAsc = 'USER_ANIME_LISTS_BY_ANIME_ID__COUNT_ASC',
  UserAnimeListsByAnimeIdCountDesc = 'USER_ANIME_LISTS_BY_ANIME_ID__COUNT_DESC',
  UserWatchStatusesByAnimeIdCountAsc = 'USER_WATCH_STATUSES_BY_ANIME_ID__COUNT_ASC',
  UserWatchStatusesByAnimeIdCountDesc = 'USER_WATCH_STATUSES_BY_ANIME_ID__COUNT_DESC'
}

/** Represents an update to a `Anime`. Fields that are set will be updated. */
export type AnimePatch = {
  ageRatingId?: Maybe<Scalars['UUID']>;
  airingStatusId?: Maybe<Scalars['UUID']>;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  description?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['Int']>;
  mediaTypeId?: Maybe<Scalars['UUID']>;
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  profileImageId?: Maybe<Scalars['UUID']>;
  seasonId?: Maybe<Scalars['UUID']>;
  sourceMaterialId?: Maybe<Scalars['UUID']>;
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  title?: Maybe<Scalars['String']>;
};

export type AnimeProducer = Node & {
  __typename?: 'AnimeProducer';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  producerId: Scalars['UUID'];
};

/**
 * A condition to be used against `AnimeProducer` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeProducerCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `producerId` field. */
  producerId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeProducer` object types. All fields are combined with a logical ‘and.’ */
export type AnimeProducerFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeProducerFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeProducerFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeProducerFilter>>;
  /** Filter by the object’s `producerId` field. */
  producerId?: Maybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeProducer` */
export type AnimeProducerInput = {
  animeId: Scalars['UUID'];
  producerId: Scalars['UUID'];
};

/** Represents an update to a `AnimeProducer`. Fields that are set will be updated. */
export type AnimeProducerPatch = {
  animeId?: Maybe<Scalars['UUID']>;
  producerId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeProducer` values. */
export type AnimeProducersConnection = {
  __typename?: 'AnimeProducersConnection';
  /** A list of edges which contains the `AnimeProducer` and cursor to aid in pagination. */
  edges: Array<AnimeProducersEdge>;
  /** A list of `AnimeProducer` objects. */
  nodes: Array<Maybe<AnimeProducer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeProducer` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeProducer` edge in the connection. */
export type AnimeProducersEdge = {
  __typename?: 'AnimeProducersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeProducer` at the end of the edge. */
  node?: Maybe<AnimeProducer>;
};

/** Methods to use when ordering `AnimeProducer`. */
export enum AnimeProducersOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProducerByProducerIdIdAsc = 'PRODUCER_BY_PRODUCER_ID__ID_ASC',
  ProducerByProducerIdIdDesc = 'PRODUCER_BY_PRODUCER_ID__ID_DESC',
  ProducerByProducerIdProducerAsc = 'PRODUCER_BY_PRODUCER_ID__PRODUCER_ASC',
  ProducerByProducerIdProducerDesc = 'PRODUCER_BY_PRODUCER_ID__PRODUCER_DESC',
  ProducerIdAsc = 'PRODUCER_ID_ASC',
  ProducerIdDesc = 'PRODUCER_ID_DESC'
}

export type AnimeStaff = Node & {
  __typename?: 'AnimeStaff';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  personId: Scalars['UUID'];
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
  staffRoleId: Scalars['UUID'];
};

/**
 * A condition to be used against `AnimeStaff` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeStaffCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personId` field. */
  personId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `staffRoleId` field. */
  staffRoleId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeStaff` values. */
export type AnimeStaffConnection = {
  __typename?: 'AnimeStaffConnection';
  /** A list of edges which contains the `AnimeStaff` and cursor to aid in pagination. */
  edges: Array<AnimeStaffEdge>;
  /** A list of `AnimeStaff` objects. */
  nodes: Array<Maybe<AnimeStaff>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeStaff` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeStaff` edge in the connection. */
export type AnimeStaffEdge = {
  __typename?: 'AnimeStaffEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeStaff` at the end of the edge. */
  node?: Maybe<AnimeStaff>;
};

/** A filter to be used against `AnimeStaff` object types. All fields are combined with a logical ‘and.’ */
export type AnimeStaffFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeStaffFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeStaffFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeStaffFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<UuidFilter>;
  /** Filter by the object’s `staffRoleId` field. */
  staffRoleId?: Maybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeStaff` */
export type AnimeStaffInput = {
  animeId: Scalars['UUID'];
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};

/** Methods to use when ordering `AnimeStaff`. */
export enum AnimeStaffOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PersonByPersonIdAlternateNamesAsc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_ASC',
  PersonByPersonIdAlternateNamesDesc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_DESC',
  PersonByPersonIdDescriptionAsc = 'PERSON_BY_PERSON_ID__DESCRIPTION_ASC',
  PersonByPersonIdDescriptionDesc = 'PERSON_BY_PERSON_ID__DESCRIPTION_DESC',
  PersonByPersonIdFirstNameAsc = 'PERSON_BY_PERSON_ID__FIRST_NAME_ASC',
  PersonByPersonIdFirstNameDesc = 'PERSON_BY_PERSON_ID__FIRST_NAME_DESC',
  PersonByPersonIdIdAsc = 'PERSON_BY_PERSON_ID__ID_ASC',
  PersonByPersonIdIdDesc = 'PERSON_BY_PERSON_ID__ID_DESC',
  PersonByPersonIdLastNameAsc = 'PERSON_BY_PERSON_ID__LAST_NAME_ASC',
  PersonByPersonIdLastNameDesc = 'PERSON_BY_PERSON_ID__LAST_NAME_DESC',
  PersonByPersonIdMalIdAsc = 'PERSON_BY_PERSON_ID__MAL_ID_ASC',
  PersonByPersonIdMalIdDesc = 'PERSON_BY_PERSON_ID__MAL_ID_DESC',
  PersonByPersonIdNativeNameAsc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_ASC',
  PersonByPersonIdNativeNameDesc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_DESC',
  PersonByPersonIdPersonImageIdAsc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_ASC',
  PersonByPersonIdPersonImageIdDesc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_DESC',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StaffRoleByStaffRoleIdIdAsc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ID_ASC',
  StaffRoleByStaffRoleIdIdDesc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ID_DESC',
  StaffRoleByStaffRoleIdRoleAsc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ROLE_ASC',
  StaffRoleByStaffRoleIdRoleDesc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ROLE_DESC',
  StaffRoleIdAsc = 'STAFF_ROLE_ID_ASC',
  StaffRoleIdDesc = 'STAFF_ROLE_ID_DESC'
}

/** Represents an update to a `AnimeStaff`. Fields that are set will be updated. */
export type AnimeStaffPatch = {
  animeId?: Maybe<Scalars['UUID']>;
  personId?: Maybe<Scalars['UUID']>;
  staffRoleId?: Maybe<Scalars['UUID']>;
};

export type AnimeStudio = Node & {
  __typename?: 'AnimeStudio';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
  studioId: Scalars['UUID'];
};

/**
 * A condition to be used against `AnimeStudio` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeStudioCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `studioId` field. */
  studioId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeStudio` object types. All fields are combined with a logical ‘and.’ */
export type AnimeStudioFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeStudioFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeStudioFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeStudioFilter>>;
  /** Filter by the object’s `studioId` field. */
  studioId?: Maybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeStudio` */
export type AnimeStudioInput = {
  animeId: Scalars['UUID'];
  studioId: Scalars['UUID'];
};

/** Represents an update to a `AnimeStudio`. Fields that are set will be updated. */
export type AnimeStudioPatch = {
  animeId?: Maybe<Scalars['UUID']>;
  studioId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeStudio` values. */
export type AnimeStudiosConnection = {
  __typename?: 'AnimeStudiosConnection';
  /** A list of edges which contains the `AnimeStudio` and cursor to aid in pagination. */
  edges: Array<AnimeStudiosEdge>;
  /** A list of `AnimeStudio` objects. */
  nodes: Array<Maybe<AnimeStudio>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeStudio` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeStudio` edge in the connection. */
export type AnimeStudiosEdge = {
  __typename?: 'AnimeStudiosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeStudio` at the end of the edge. */
  node?: Maybe<AnimeStudio>;
};

/** Methods to use when ordering `AnimeStudio`. */
export enum AnimeStudiosOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StudioByStudioIdIdAsc = 'STUDIO_BY_STUDIO_ID__ID_ASC',
  StudioByStudioIdIdDesc = 'STUDIO_BY_STUDIO_ID__ID_DESC',
  StudioByStudioIdStudioAsc = 'STUDIO_BY_STUDIO_ID__STUDIO_ASC',
  StudioByStudioIdStudioDesc = 'STUDIO_BY_STUDIO_ID__STUDIO_DESC',
  StudioIdAsc = 'STUDIO_ID_ASC',
  StudioIdDesc = 'STUDIO_ID_DESC'
}

export type AnimeUserScore = Node & {
  __typename?: 'AnimeUserScore';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
  userId: Scalars['String'];
  userScore: Scalars['BigFloat'];
};

/**
 * A condition to be used against `AnimeUserScore` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeUserScoreCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userScore` field. */
  userScore?: Maybe<Scalars['BigFloat']>;
};

/** A filter to be used against `AnimeUserScore` object types. All fields are combined with a logical ‘and.’ */
export type AnimeUserScoreFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AnimeUserScoreFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<AnimeUserScoreFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AnimeUserScoreFilter>>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<StringFilter>;
  /** Filter by the object’s `userScore` field. */
  userScore?: Maybe<BigFloatFilter>;
};

/** An input for mutations affecting `AnimeUserScore` */
export type AnimeUserScoreInput = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
  userScore: Scalars['BigFloat'];
};

/** Represents an update to a `AnimeUserScore`. Fields that are set will be updated. */
export type AnimeUserScorePatch = {
  animeId?: Maybe<Scalars['UUID']>;
  userId?: Maybe<Scalars['String']>;
  userScore?: Maybe<Scalars['BigFloat']>;
};

/** A connection to a list of `AnimeUserScore` values. */
export type AnimeUserScoresConnection = {
  __typename?: 'AnimeUserScoresConnection';
  /** A list of edges which contains the `AnimeUserScore` and cursor to aid in pagination. */
  edges: Array<AnimeUserScoresEdge>;
  /** A list of `AnimeUserScore` objects. */
  nodes: Array<Maybe<AnimeUserScore>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeUserScore` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeUserScore` edge in the connection. */
export type AnimeUserScoresEdge = {
  __typename?: 'AnimeUserScoresEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeUserScore` at the end of the edge. */
  node?: Maybe<AnimeUserScore>;
};

/** Methods to use when ordering `AnimeUserScore`. */
export enum AnimeUserScoresOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  UserScoreAsc = 'USER_SCORE_ASC',
  UserScoreDesc = 'USER_SCORE_DESC'
}

/** A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’ */
export type BigFloatFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['BigFloat']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['BigFloat']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['BigFloat']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['BigFloat']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['BigFloat']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['BigFloat']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['BigFloat']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['BigFloat']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['BigFloat']>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['BigFloat']>>;
};

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Boolean']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Boolean']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Boolean']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Boolean']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Boolean']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Boolean']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Boolean']>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Boolean']>>;
};

export type Character = Node & {
  __typename?: 'Character';
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  /** Reads and enables pagination through a set of `CharacterAnimePreview`. */
  characterAnimePreviews: CharacterAnimePreviewsConnection;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /** Reads and enables pagination through a set of `CharacterImage`. */
  characterImages: CharacterImagesConnection;
  description?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  malId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads and enables pagination through a set of `VoiceActor`. */
  voiceActors: VoiceActorsConnection;
};


export type CharacterAnimeCharactersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCharacterCondition>;
  filter?: Maybe<AnimeCharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};


export type CharacterCharacterAnimePreviewsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterAnimePreviewCondition>;
  filter?: Maybe<CharacterAnimePreviewFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharacterAnimePreviewsOrderBy>>;
};


export type CharacterCharacterImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterImageCondition>;
  filter?: Maybe<CharacterImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharacterImagesOrderBy>>;
};


export type CharacterVoiceActorsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<VoiceActorCondition>;
  filter?: Maybe<VoiceActorFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<VoiceActorsOrderBy>>;
};

export type CharacterAnimePreview = {
  __typename?: 'CharacterAnimePreview';
  animeId?: Maybe<Scalars['UUID']>;
  animeImageUrl?: Maybe<Scalars['String']>;
  /** Reads a single `Character` that is related to this `CharacterAnimePreview`. */
  character?: Maybe<Character>;
  characterImageUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `CharacterAnimePreview` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type CharacterAnimePreviewCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `animeImageUrl` field. */
  animeImageUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `characterId` field. */
  characterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `characterImageUrl` field. */
  characterImageUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
};

/** A filter to be used against `CharacterAnimePreview` object types. All fields are combined with a logical ‘and.’ */
export type CharacterAnimePreviewFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CharacterAnimePreviewFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `animeImageUrl` field. */
  animeImageUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `characterId` field. */
  characterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `characterImageUrl` field. */
  characterImageUrl?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<CharacterAnimePreviewFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CharacterAnimePreviewFilter>>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
};

/** A connection to a list of `CharacterAnimePreview` values. */
export type CharacterAnimePreviewsConnection = {
  __typename?: 'CharacterAnimePreviewsConnection';
  /** A list of edges which contains the `CharacterAnimePreview` and cursor to aid in pagination. */
  edges: Array<CharacterAnimePreviewsEdge>;
  /** A list of `CharacterAnimePreview` objects. */
  nodes: Array<Maybe<CharacterAnimePreview>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CharacterAnimePreview` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CharacterAnimePreview` edge in the connection. */
export type CharacterAnimePreviewsEdge = {
  __typename?: 'CharacterAnimePreviewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CharacterAnimePreview` at the end of the edge. */
  node?: Maybe<CharacterAnimePreview>;
};

/** Methods to use when ordering `CharacterAnimePreview`. */
export enum CharacterAnimePreviewsOrderBy {
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  AnimeImageUrlAsc = 'ANIME_IMAGE_URL_ASC',
  AnimeImageUrlDesc = 'ANIME_IMAGE_URL_DESC',
  CharacterByCharacterIdCharacterImageIdAsc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_ASC',
  CharacterByCharacterIdCharacterImageIdDesc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_DESC',
  CharacterByCharacterIdDescriptionAsc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_ASC',
  CharacterByCharacterIdDescriptionDesc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_DESC',
  CharacterByCharacterIdIdAsc = 'CHARACTER_BY_CHARACTER_ID__ID_ASC',
  CharacterByCharacterIdIdDesc = 'CHARACTER_BY_CHARACTER_ID__ID_DESC',
  CharacterByCharacterIdMalIdAsc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_ASC',
  CharacterByCharacterIdMalIdDesc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_DESC',
  CharacterByCharacterIdNameAsc = 'CHARACTER_BY_CHARACTER_ID__NAME_ASC',
  CharacterByCharacterIdNameDesc = 'CHARACTER_BY_CHARACTER_ID__NAME_DESC',
  CharacterIdAsc = 'CHARACTER_ID_ASC',
  CharacterIdDesc = 'CHARACTER_ID_DESC',
  CharacterImageUrlAsc = 'CHARACTER_IMAGE_URL_ASC',
  CharacterImageUrlDesc = 'CHARACTER_IMAGE_URL_DESC',
  Natural = 'NATURAL',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC'
}

export type CharacterByAnime = {
  __typename?: 'CharacterByAnime';
  actorFirstName?: Maybe<Scalars['String']>;
  actorId?: Maybe<Scalars['UUID']>;
  actorImage?: Maybe<Scalars['String']>;
  actorLastName?: Maybe<Scalars['String']>;
  animeId?: Maybe<Scalars['UUID']>;
  characterId?: Maybe<Scalars['UUID']>;
  characterImage?: Maybe<Scalars['String']>;
  characterName?: Maybe<Scalars['String']>;
  language?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `CharacterByAnime` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type CharacterByAnimeCondition = {
  /** Checks for equality with the object’s `actorFirstName` field. */
  actorFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `actorId` field. */
  actorId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `actorImage` field. */
  actorImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `actorLastName` field. */
  actorLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `characterId` field. */
  characterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `characterImage` field. */
  characterImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `characterName` field. */
  characterName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `language` field. */
  language?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `role` field. */
  role?: Maybe<Scalars['String']>;
};

/** A connection to a list of `CharacterByAnime` values. */
export type CharacterByAnimeConnection = {
  __typename?: 'CharacterByAnimeConnection';
  /** A list of edges which contains the `CharacterByAnime` and cursor to aid in pagination. */
  edges: Array<CharacterByAnimeEdge>;
  /** A list of `CharacterByAnime` objects. */
  nodes: Array<Maybe<CharacterByAnime>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CharacterByAnime` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CharacterByAnime` edge in the connection. */
export type CharacterByAnimeEdge = {
  __typename?: 'CharacterByAnimeEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CharacterByAnime` at the end of the edge. */
  node?: Maybe<CharacterByAnime>;
};

/** A filter to be used against `CharacterByAnime` object types. All fields are combined with a logical ‘and.’ */
export type CharacterByAnimeFilter = {
  /** Filter by the object’s `actorFirstName` field. */
  actorFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `actorId` field. */
  actorId?: Maybe<UuidFilter>;
  /** Filter by the object’s `actorImage` field. */
  actorImage?: Maybe<StringFilter>;
  /** Filter by the object’s `actorLastName` field. */
  actorLastName?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CharacterByAnimeFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `characterId` field. */
  characterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `characterImage` field. */
  characterImage?: Maybe<StringFilter>;
  /** Filter by the object’s `characterName` field. */
  characterName?: Maybe<StringFilter>;
  /** Filter by the object’s `language` field. */
  language?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<CharacterByAnimeFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CharacterByAnimeFilter>>;
  /** Filter by the object’s `role` field. */
  role?: Maybe<StringFilter>;
};

/** Methods to use when ordering `CharacterByAnime`. */
export enum CharacterByAnimeOrderBy {
  ActorFirstNameAsc = 'ACTOR_FIRST_NAME_ASC',
  ActorFirstNameDesc = 'ACTOR_FIRST_NAME_DESC',
  ActorIdAsc = 'ACTOR_ID_ASC',
  ActorIdDesc = 'ACTOR_ID_DESC',
  ActorImageAsc = 'ACTOR_IMAGE_ASC',
  ActorImageDesc = 'ACTOR_IMAGE_DESC',
  ActorLastNameAsc = 'ACTOR_LAST_NAME_ASC',
  ActorLastNameDesc = 'ACTOR_LAST_NAME_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  CharacterIdAsc = 'CHARACTER_ID_ASC',
  CharacterIdDesc = 'CHARACTER_ID_DESC',
  CharacterImageAsc = 'CHARACTER_IMAGE_ASC',
  CharacterImageDesc = 'CHARACTER_IMAGE_DESC',
  CharacterNameAsc = 'CHARACTER_NAME_ASC',
  CharacterNameDesc = 'CHARACTER_NAME_DESC',
  LanguageAsc = 'LANGUAGE_ASC',
  LanguageDesc = 'LANGUAGE_DESC',
  Natural = 'NATURAL',
  RoleAsc = 'ROLE_ASC',
  RoleDesc = 'ROLE_DESC'
}

/**
 * A condition to be used against `Character` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type CharacterCondition = {
  /** Checks for equality with the object’s `characterImageId` field. */
  characterImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `malId` field. */
  malId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Character` object types. All fields are combined with a logical ‘and.’ */
export type CharacterFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CharacterFilter>>;
  /** Filter by the object’s `characterImageId` field. */
  characterImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<CharacterFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CharacterFilter>>;
};

export type CharacterImage = Node & {
  __typename?: 'CharacterImage';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  characterId: Scalars['UUID'];
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  imageId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `CharacterImage` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type CharacterImageCondition = {
  /** Checks for equality with the object’s `characterId` field. */
  characterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `imageId` field. */
  imageId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `CharacterImage` object types. All fields are combined with a logical ‘and.’ */
export type CharacterImageFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CharacterImageFilter>>;
  /** Filter by the object’s `characterId` field. */
  characterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `imageId` field. */
  imageId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<CharacterImageFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CharacterImageFilter>>;
};

/** An input for mutations affecting `CharacterImage` */
export type CharacterImageInput = {
  characterId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};

/** Represents an update to a `CharacterImage`. Fields that are set will be updated. */
export type CharacterImagePatch = {
  characterId?: Maybe<Scalars['UUID']>;
  imageId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `CharacterImage` values. */
export type CharacterImagesConnection = {
  __typename?: 'CharacterImagesConnection';
  /** A list of edges which contains the `CharacterImage` and cursor to aid in pagination. */
  edges: Array<CharacterImagesEdge>;
  /** A list of `CharacterImage` objects. */
  nodes: Array<Maybe<CharacterImage>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CharacterImage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CharacterImage` edge in the connection. */
export type CharacterImagesEdge = {
  __typename?: 'CharacterImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CharacterImage` at the end of the edge. */
  node?: Maybe<CharacterImage>;
};

/** Methods to use when ordering `CharacterImage`. */
export enum CharacterImagesOrderBy {
  CharacterByCharacterIdCharacterImageIdAsc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_ASC',
  CharacterByCharacterIdCharacterImageIdDesc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_DESC',
  CharacterByCharacterIdDescriptionAsc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_ASC',
  CharacterByCharacterIdDescriptionDesc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_DESC',
  CharacterByCharacterIdIdAsc = 'CHARACTER_BY_CHARACTER_ID__ID_ASC',
  CharacterByCharacterIdIdDesc = 'CHARACTER_BY_CHARACTER_ID__ID_DESC',
  CharacterByCharacterIdMalIdAsc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_ASC',
  CharacterByCharacterIdMalIdDesc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_DESC',
  CharacterByCharacterIdNameAsc = 'CHARACTER_BY_CHARACTER_ID__NAME_ASC',
  CharacterByCharacterIdNameDesc = 'CHARACTER_BY_CHARACTER_ID__NAME_DESC',
  CharacterIdAsc = 'CHARACTER_ID_ASC',
  CharacterIdDesc = 'CHARACTER_ID_DESC',
  ImageByImageIdIdAsc = 'IMAGE_BY_IMAGE_ID__ID_ASC',
  ImageByImageIdIdDesc = 'IMAGE_BY_IMAGE_ID__ID_DESC',
  ImageByImageIdTitleAsc = 'IMAGE_BY_IMAGE_ID__TITLE_ASC',
  ImageByImageIdTitleDesc = 'IMAGE_BY_IMAGE_ID__TITLE_DESC',
  ImageByImageIdUrlAsc = 'IMAGE_BY_IMAGE_ID__URL_ASC',
  ImageByImageIdUrlDesc = 'IMAGE_BY_IMAGE_ID__URL_DESC',
  ImageIdAsc = 'IMAGE_ID_ASC',
  ImageIdDesc = 'IMAGE_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** An input for mutations affecting `Character` */
export type CharacterInput = {
  characterImageId?: Maybe<Scalars['UUID']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Represents an update to a `Character`. Fields that are set will be updated. */
export type CharacterPatch = {
  characterImageId?: Maybe<Scalars['UUID']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type CharacterRole = Node & {
  __typename?: 'CharacterRole';
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  role: Scalars['String'];
};


export type CharacterRoleAnimeCharactersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCharacterCondition>;
  filter?: Maybe<AnimeCharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};

/**
 * A condition to be used against `CharacterRole` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type CharacterRoleCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `role` field. */
  role?: Maybe<Scalars['String']>;
};

/** A filter to be used against `CharacterRole` object types. All fields are combined with a logical ‘and.’ */
export type CharacterRoleFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CharacterRoleFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<CharacterRoleFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CharacterRoleFilter>>;
  /** Filter by the object’s `role` field. */
  role?: Maybe<StringFilter>;
};

/** An input for mutations affecting `CharacterRole` */
export type CharacterRoleInput = {
  id?: Maybe<Scalars['UUID']>;
  role: Scalars['String'];
};

/** Represents an update to a `CharacterRole`. Fields that are set will be updated. */
export type CharacterRolePatch = {
  id?: Maybe<Scalars['UUID']>;
  role?: Maybe<Scalars['String']>;
};

/** A connection to a list of `CharacterRole` values. */
export type CharacterRolesConnection = {
  __typename?: 'CharacterRolesConnection';
  /** A list of edges which contains the `CharacterRole` and cursor to aid in pagination. */
  edges: Array<CharacterRolesEdge>;
  /** A list of `CharacterRole` objects. */
  nodes: Array<Maybe<CharacterRole>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CharacterRole` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CharacterRole` edge in the connection. */
export type CharacterRolesEdge = {
  __typename?: 'CharacterRolesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CharacterRole` at the end of the edge. */
  node?: Maybe<CharacterRole>;
};

/** Methods to use when ordering `CharacterRole`. */
export enum CharacterRolesOrderBy {
  AnimeCharactersByCharacterRoleIdCountAsc = 'ANIME_CHARACTERS_BY_CHARACTER_ROLE_ID__COUNT_ASC',
  AnimeCharactersByCharacterRoleIdCountDesc = 'ANIME_CHARACTERS_BY_CHARACTER_ROLE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RoleAsc = 'ROLE_ASC',
  RoleDesc = 'ROLE_DESC'
}

/** A connection to a list of `Character` values. */
export type CharactersConnection = {
  __typename?: 'CharactersConnection';
  /** A list of edges which contains the `Character` and cursor to aid in pagination. */
  edges: Array<CharactersEdge>;
  /** A list of `Character` objects. */
  nodes: Array<Maybe<Character>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Character` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Character` edge in the connection. */
export type CharactersEdge = {
  __typename?: 'CharactersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Character` at the end of the edge. */
  node?: Maybe<Character>;
};

/** Methods to use when ordering `Character`. */
export enum CharactersOrderBy {
  AnimeCharactersByCharacterIdCountAsc = 'ANIME_CHARACTERS_BY_CHARACTER_ID__COUNT_ASC',
  AnimeCharactersByCharacterIdCountDesc = 'ANIME_CHARACTERS_BY_CHARACTER_ID__COUNT_DESC',
  CharacterAnimePreviewsByCharacterIdCountAsc = 'CHARACTER_ANIME_PREVIEWS_BY_CHARACTER_ID__COUNT_ASC',
  CharacterAnimePreviewsByCharacterIdCountDesc = 'CHARACTER_ANIME_PREVIEWS_BY_CHARACTER_ID__COUNT_DESC',
  CharacterImagesByCharacterIdCountAsc = 'CHARACTER_IMAGES_BY_CHARACTER_ID__COUNT_ASC',
  CharacterImagesByCharacterIdCountDesc = 'CHARACTER_IMAGES_BY_CHARACTER_ID__COUNT_DESC',
  CharacterImageIdAsc = 'CHARACTER_IMAGE_ID_ASC',
  CharacterImageIdDesc = 'CHARACTER_IMAGE_ID_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ImageByCharacterImageIdIdAsc = 'IMAGE_BY_CHARACTER_IMAGE_ID__ID_ASC',
  ImageByCharacterImageIdIdDesc = 'IMAGE_BY_CHARACTER_IMAGE_ID__ID_DESC',
  ImageByCharacterImageIdTitleAsc = 'IMAGE_BY_CHARACTER_IMAGE_ID__TITLE_ASC',
  ImageByCharacterImageIdTitleDesc = 'IMAGE_BY_CHARACTER_IMAGE_ID__TITLE_DESC',
  ImageByCharacterImageIdUrlAsc = 'IMAGE_BY_CHARACTER_IMAGE_ID__URL_ASC',
  ImageByCharacterImageIdUrlDesc = 'IMAGE_BY_CHARACTER_IMAGE_ID__URL_DESC',
  MalIdAsc = 'MAL_ID_ASC',
  MalIdDesc = 'MAL_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  VoiceActorsByCharacterIdCountAsc = 'VOICE_ACTORS_BY_CHARACTER_ID__COUNT_ASC',
  VoiceActorsByCharacterIdCountDesc = 'VOICE_ACTORS_BY_CHARACTER_ID__COUNT_DESC'
}

/** All input for the create `AgeRatingType` mutation. */
export type CreateAgeRatingTypeInput = {
  /** The `AgeRatingType` to be created by this mutation. */
  ageRatingType: AgeRatingTypeInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AgeRatingType` mutation. */
export type CreateAgeRatingTypePayload = {
  __typename?: 'CreateAgeRatingTypePayload';
  /** The `AgeRatingType` that was created by this mutation. */
  ageRatingType?: Maybe<AgeRatingType>;
  /** An edge for our `AgeRatingType`. May be used by Relay 1. */
  ageRatingTypeEdge?: Maybe<AgeRatingTypesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AgeRatingType` mutation. */
export type CreateAgeRatingTypePayloadAgeRatingTypeEdgeArgs = {
  orderBy?: Maybe<Array<AgeRatingTypesOrderBy>>;
};

/** All input for the create `AiringStatusType` mutation. */
export type CreateAiringStatusTypeInput = {
  /** The `AiringStatusType` to be created by this mutation. */
  airingStatusType: AiringStatusTypeInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AiringStatusType` mutation. */
export type CreateAiringStatusTypePayload = {
  __typename?: 'CreateAiringStatusTypePayload';
  /** The `AiringStatusType` that was created by this mutation. */
  airingStatusType?: Maybe<AiringStatusType>;
  /** An edge for our `AiringStatusType`. May be used by Relay 1. */
  airingStatusTypeEdge?: Maybe<AiringStatusTypesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AiringStatusType` mutation. */
export type CreateAiringStatusTypePayloadAiringStatusTypeEdgeArgs = {
  orderBy?: Maybe<Array<AiringStatusTypesOrderBy>>;
};

/** All input for the create `AlternateAnimeName` mutation. */
export type CreateAlternateAnimeNameInput = {
  /** The `AlternateAnimeName` to be created by this mutation. */
  alternateAnimeName: AlternateAnimeNameInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AlternateAnimeName` mutation. */
export type CreateAlternateAnimeNamePayload = {
  __typename?: 'CreateAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was created by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AlternateAnimeName` mutation. */
export type CreateAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: Maybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** All input for the create `AnimeCharacter` mutation. */
export type CreateAnimeCharacterInput = {
  /** The `AnimeCharacter` to be created by this mutation. */
  animeCharacter: AnimeCharacterInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeCharacter` mutation. */
export type CreateAnimeCharacterPayload = {
  __typename?: 'CreateAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was created by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Language` that is related to this `AnimeCharacter`. */
  language?: Maybe<Language>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeCharacter` mutation. */
export type CreateAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};

/** All input for the create `AnimeGenre` mutation. */
export type CreateAnimeGenreInput = {
  /** The `AnimeGenre` to be created by this mutation. */
  animeGenre: AnimeGenreInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeGenre` mutation. */
export type CreateAnimeGenrePayload = {
  __typename?: 'CreateAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was created by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeGenre` mutation. */
export type CreateAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeGenresOrderBy>>;
};

/** All input for the create `AnimeImage` mutation. */
export type CreateAnimeImageInput = {
  /** The `AnimeImage` to be created by this mutation. */
  animeImage: AnimeImageInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeImage` mutation. */
export type CreateAnimeImagePayload = {
  __typename?: 'CreateAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was created by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeImage` mutation. */
export type CreateAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: Maybe<Array<AnimeImagesOrderBy>>;
};

/** All input for the create `Anime` mutation. */
export type CreateAnimeInput = {
  /** The `Anime` to be created by this mutation. */
  anime: AnimeInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** All input for the create `AnimeLicensor` mutation. */
export type CreateAnimeLicensorInput = {
  /** The `AnimeLicensor` to be created by this mutation. */
  animeLicensor: AnimeLicensorInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeLicensor` mutation. */
export type CreateAnimeLicensorPayload = {
  __typename?: 'CreateAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was created by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeLicensor` mutation. */
export type CreateAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: Maybe<Array<AnimeLicensorsOrderBy>>;
};

/** All input for the create `AnimeList` mutation. */
export type CreateAnimeListInput = {
  /** The `AnimeList` to be created by this mutation. */
  animeList: AnimeListInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeList` mutation. */
export type CreateAnimeListPayload = {
  __typename?: 'CreateAnimeListPayload';
  /** The `AnimeList` that was created by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our create `AnimeList` mutation. */
export type CreateAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};

/** The output of our create `Anime` mutation. */
export type CreateAnimePayload = {
  __typename?: 'CreateAnimePayload';
  /** Reads a single `AgeRatingType` that is related to this `Anime`. */
  ageRating?: Maybe<AgeRatingType>;
  /** Reads a single `AiringStatusType` that is related to this `Anime`. */
  airingStatus?: Maybe<AiringStatusType>;
  /** The `Anime` that was created by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `MediaType` that is related to this `Anime`. */
  mediaType?: Maybe<MediaType>;
  /** Reads a single `Image` that is related to this `Anime`. */
  profileImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Season` that is related to this `Anime`. */
  season?: Maybe<Season>;
  /** Reads a single `SourceMaterialType` that is related to this `Anime`. */
  sourceMaterial?: Maybe<SourceMaterialType>;
};


/** The output of our create `Anime` mutation. */
export type CreateAnimePayloadAnimeEdgeArgs = {
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/** All input for the create `AnimeProducer` mutation. */
export type CreateAnimeProducerInput = {
  /** The `AnimeProducer` to be created by this mutation. */
  animeProducer: AnimeProducerInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeProducer` mutation. */
export type CreateAnimeProducerPayload = {
  __typename?: 'CreateAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was created by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeProducer` mutation. */
export type CreateAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: Maybe<Array<AnimeProducersOrderBy>>;
};

/** All input for the create `AnimeStaff` mutation. */
export type CreateAnimeStaffInput = {
  /** The `AnimeStaff` to be created by this mutation. */
  animeStaff: AnimeStaffInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeStaff` mutation. */
export type CreateAnimeStaffPayload = {
  __typename?: 'CreateAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was created by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our create `AnimeStaff` mutation. */
export type CreateAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};

/** All input for the create `AnimeStudio` mutation. */
export type CreateAnimeStudioInput = {
  /** The `AnimeStudio` to be created by this mutation. */
  animeStudio: AnimeStudioInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeStudio` mutation. */
export type CreateAnimeStudioPayload = {
  __typename?: 'CreateAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was created by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our create `AnimeStudio` mutation. */
export type CreateAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStudiosOrderBy>>;
};

/** All input for the create `AnimeUserScore` mutation. */
export type CreateAnimeUserScoreInput = {
  /** The `AnimeUserScore` to be created by this mutation. */
  animeUserScore: AnimeUserScoreInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `AnimeUserScore` mutation. */
export type CreateAnimeUserScorePayload = {
  __typename?: 'CreateAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was created by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our create `AnimeUserScore` mutation. */
export type CreateAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};

/** All input for the create `CharacterImage` mutation. */
export type CreateCharacterImageInput = {
  /** The `CharacterImage` to be created by this mutation. */
  characterImage: CharacterImageInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `CharacterImage` mutation. */
export type CreateCharacterImagePayload = {
  __typename?: 'CreateCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was created by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `CharacterImage` mutation. */
export type CreateCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: Maybe<Array<CharacterImagesOrderBy>>;
};

/** All input for the create `Character` mutation. */
export type CreateCharacterInput = {
  /** The `Character` to be created by this mutation. */
  character: CharacterInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `Character` mutation. */
export type CreateCharacterPayload = {
  __typename?: 'CreateCharacterPayload';
  /** The `Character` that was created by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Character` mutation. */
export type CreateCharacterPayloadCharacterEdgeArgs = {
  orderBy?: Maybe<Array<CharactersOrderBy>>;
};

/** All input for the create `CharacterRole` mutation. */
export type CreateCharacterRoleInput = {
  /** The `CharacterRole` to be created by this mutation. */
  characterRole: CharacterRoleInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our create `CharacterRole` mutation. */
export type CreateCharacterRolePayload = {
  __typename?: 'CreateCharacterRolePayload';
  /** The `CharacterRole` that was created by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `CharacterRole` mutation. */
export type CreateCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: Maybe<Array<CharacterRolesOrderBy>>;
};

/** All input for the create `Genre` mutation. */
export type CreateGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` to be created by this mutation. */
  genre: GenreInput;
};

/** The output of our create `Genre` mutation. */
export type CreateGenrePayload = {
  __typename?: 'CreateGenrePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` that was created by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Genre` mutation. */
export type CreateGenrePayloadGenreEdgeArgs = {
  orderBy?: Maybe<Array<GenresOrderBy>>;
};

/** All input for the create `Image` mutation. */
export type CreateImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` to be created by this mutation. */
  image: ImageInput;
};

/** The output of our create `Image` mutation. */
export type CreateImagePayload = {
  __typename?: 'CreateImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` that was created by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Image` mutation. */
export type CreateImagePayloadImageEdgeArgs = {
  orderBy?: Maybe<Array<ImagesOrderBy>>;
};

/** All input for the create `Language` mutation. */
export type CreateLanguageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Language` to be created by this mutation. */
  language: LanguageInput;
};

/** The output of our create `Language` mutation. */
export type CreateLanguagePayload = {
  __typename?: 'CreateLanguagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Language` that was created by this mutation. */
  language?: Maybe<Language>;
  /** An edge for our `Language`. May be used by Relay 1. */
  languageEdge?: Maybe<LanguagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Language` mutation. */
export type CreateLanguagePayloadLanguageEdgeArgs = {
  orderBy?: Maybe<Array<LanguagesOrderBy>>;
};

/** All input for the create `Licensor` mutation. */
export type CreateLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` to be created by this mutation. */
  licensor: LicensorInput;
};

/** The output of our create `Licensor` mutation. */
export type CreateLicensorPayload = {
  __typename?: 'CreateLicensorPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` that was created by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Licensor` mutation. */
export type CreateLicensorPayloadLicensorEdgeArgs = {
  orderBy?: Maybe<Array<LicensorsOrderBy>>;
};

/** All input for the create `MediaType` mutation. */
export type CreateMediaTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` to be created by this mutation. */
  mediaType: MediaTypeInput;
};

/** The output of our create `MediaType` mutation. */
export type CreateMediaTypePayload = {
  __typename?: 'CreateMediaTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` that was created by this mutation. */
  mediaType?: Maybe<MediaType>;
  /** An edge for our `MediaType`. May be used by Relay 1. */
  mediaTypeEdge?: Maybe<MediaTypesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `MediaType` mutation. */
export type CreateMediaTypePayloadMediaTypeEdgeArgs = {
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};

/** All input for the `createNewListAddAnime` mutation. */
export type CreateNewListAddAnimeInput = {
  animeidinput: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `createNewListAddAnime` mutation. */
export type CreateNewListAddAnimePayload = {
  __typename?: 'CreateNewListAddAnimePayload';
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our `createNewListAddAnime` mutation. */
export type CreateNewListAddAnimePayloadAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};

/** All input for the create `PersonImage` mutation. */
export type CreatePersonImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PersonImage` to be created by this mutation. */
  personImage: PersonImageInput;
};

/** The output of our create `PersonImage` mutation. */
export type CreatePersonImagePayload = {
  __typename?: 'CreatePersonImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was created by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `PersonImage` mutation. */
export type CreatePersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: Maybe<Array<PersonImagesOrderBy>>;
};

/** All input for the create `Person` mutation. */
export type CreatePersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` to be created by this mutation. */
  person: PersonInput;
};

/** The output of our create `Person` mutation. */
export type CreatePersonPayload = {
  __typename?: 'CreatePersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` that was created by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Person` mutation. */
export type CreatePersonPayloadPersonEdgeArgs = {
  orderBy?: Maybe<Array<PeopleOrderBy>>;
};

/** All input for the create `Producer` mutation. */
export type CreateProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` to be created by this mutation. */
  producer: ProducerInput;
};

/** The output of our create `Producer` mutation. */
export type CreateProducerPayload = {
  __typename?: 'CreateProducerPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` that was created by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Producer` mutation. */
export type CreateProducerPayloadProducerEdgeArgs = {
  orderBy?: Maybe<Array<ProducersOrderBy>>;
};

/** All input for the create `Season` mutation. */
export type CreateSeasonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Season` to be created by this mutation. */
  season: SeasonInput;
};

/** The output of our create `Season` mutation. */
export type CreateSeasonPayload = {
  __typename?: 'CreateSeasonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Season` that was created by this mutation. */
  season?: Maybe<Season>;
  /** An edge for our `Season`. May be used by Relay 1. */
  seasonEdge?: Maybe<SeasonsEdge>;
};


/** The output of our create `Season` mutation. */
export type CreateSeasonPayloadSeasonEdgeArgs = {
  orderBy?: Maybe<Array<SeasonsOrderBy>>;
};

/** All input for the create `SourceMaterialType` mutation. */
export type CreateSourceMaterialTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SourceMaterialType` to be created by this mutation. */
  sourceMaterialType: SourceMaterialTypeInput;
};

/** The output of our create `SourceMaterialType` mutation. */
export type CreateSourceMaterialTypePayload = {
  __typename?: 'CreateSourceMaterialTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `SourceMaterialType` that was created by this mutation. */
  sourceMaterialType?: Maybe<SourceMaterialType>;
  /** An edge for our `SourceMaterialType`. May be used by Relay 1. */
  sourceMaterialTypeEdge?: Maybe<SourceMaterialTypesEdge>;
};


/** The output of our create `SourceMaterialType` mutation. */
export type CreateSourceMaterialTypePayloadSourceMaterialTypeEdgeArgs = {
  orderBy?: Maybe<Array<SourceMaterialTypesOrderBy>>;
};

/** All input for the create `StaffRole` mutation. */
export type CreateStaffRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StaffRole` to be created by this mutation. */
  staffRole: StaffRoleInput;
};

/** The output of our create `StaffRole` mutation. */
export type CreateStaffRolePayload = {
  __typename?: 'CreateStaffRolePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was created by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our create `StaffRole` mutation. */
export type CreateStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: Maybe<Array<StaffRolesOrderBy>>;
};

/** All input for the create `Studio` mutation. */
export type CreateStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Studio` to be created by this mutation. */
  studio: StudioInput;
};

/** The output of our create `Studio` mutation. */
export type CreateStudioPayload = {
  __typename?: 'CreateStudioPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was created by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our create `Studio` mutation. */
export type CreateStudioPayloadStudioEdgeArgs = {
  orderBy?: Maybe<Array<StudiosOrderBy>>;
};

/** All input for the create `UserAnime` mutation. */
export type CreateUserAnimeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserAnime` to be created by this mutation. */
  userAnime: UserAnimeInput;
};

/** All input for the create `UserAnimeList` mutation. */
export type CreateUserAnimeListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserAnimeList` to be created by this mutation. */
  userAnimeList: UserAnimeListInput;
};

/** The output of our create `UserAnimeList` mutation. */
export type CreateUserAnimeListPayload = {
  __typename?: 'CreateUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was created by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our create `UserAnimeList` mutation. */
export type CreateUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};

/** The output of our create `UserAnime` mutation. */
export type CreateUserAnimePayload = {
  __typename?: 'CreateUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was created by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our create `UserAnime` mutation. */
export type CreateUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeOrderBy>>;
};

/** All input for the create `User` mutation. */
export type CreateUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `User` to be created by this mutation. */
  user: UserInput;
};

/** The output of our create `User` mutation. */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was created by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our create `User` mutation. */
export type CreateUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

/** All input for the create `UserWatchStatus` mutation. */
export type CreateUserWatchStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserWatchStatus` to be created by this mutation. */
  userWatchStatus: UserWatchStatusInput;
};

/** The output of our create `UserWatchStatus` mutation. */
export type CreateUserWatchStatusPayload = {
  __typename?: 'CreateUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was created by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our create `UserWatchStatus` mutation. */
export type CreateUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: Maybe<Array<UserWatchStatusesOrderBy>>;
};

/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Datetime']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Datetime']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Datetime']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Datetime']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Datetime']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Datetime']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Datetime']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Datetime']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Datetime']>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Datetime']>>;
};

/** All input for the `deleteAgeRatingTypeByAgeRatingType` mutation. */
export type DeleteAgeRatingTypeByAgeRatingTypeInput = {
  ageRatingType: Scalars['String'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** All input for the `deleteAgeRatingTypeByNodeId` mutation. */
export type DeleteAgeRatingTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AgeRatingType` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAgeRatingType` mutation. */
export type DeleteAgeRatingTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `AgeRatingType` mutation. */
export type DeleteAgeRatingTypePayload = {
  __typename?: 'DeleteAgeRatingTypePayload';
  /** The `AgeRatingType` that was deleted by this mutation. */
  ageRatingType?: Maybe<AgeRatingType>;
  /** An edge for our `AgeRatingType`. May be used by Relay 1. */
  ageRatingTypeEdge?: Maybe<AgeRatingTypesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAgeRatingTypeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AgeRatingType` mutation. */
export type DeleteAgeRatingTypePayloadAgeRatingTypeEdgeArgs = {
  orderBy?: Maybe<Array<AgeRatingTypesOrderBy>>;
};

/** All input for the `deleteAiringStatusTypeByAiringStatusType` mutation. */
export type DeleteAiringStatusTypeByAiringStatusTypeInput = {
  airingStatusType: Scalars['String'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** All input for the `deleteAiringStatusTypeByNodeId` mutation. */
export type DeleteAiringStatusTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AiringStatusType` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAiringStatusType` mutation. */
export type DeleteAiringStatusTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `AiringStatusType` mutation. */
export type DeleteAiringStatusTypePayload = {
  __typename?: 'DeleteAiringStatusTypePayload';
  /** The `AiringStatusType` that was deleted by this mutation. */
  airingStatusType?: Maybe<AiringStatusType>;
  /** An edge for our `AiringStatusType`. May be used by Relay 1. */
  airingStatusTypeEdge?: Maybe<AiringStatusTypesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAiringStatusTypeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AiringStatusType` mutation. */
export type DeleteAiringStatusTypePayloadAiringStatusTypeEdgeArgs = {
  orderBy?: Maybe<Array<AiringStatusTypesOrderBy>>;
};

/** All input for the `deleteAlternateAnimeNameByNodeId` mutation. */
export type DeleteAlternateAnimeNameByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AlternateAnimeName` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAlternateAnimeName` mutation. */
export type DeleteAlternateAnimeNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `AlternateAnimeName` mutation. */
export type DeleteAlternateAnimeNamePayload = {
  __typename?: 'DeleteAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was deleted by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAlternateAnimeNameNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AlternateAnimeName` mutation. */
export type DeleteAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: Maybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** All input for the `deleteAnimeByMalId` mutation. */
export type DeleteAnimeByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  malId: Scalars['Int'];
};

/** All input for the `deleteAnimeByNodeId` mutation. */
export type DeleteAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Anime` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId` mutation. */
export type DeleteAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonIdInput = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  languageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};

/** The output of our delete `AnimeCharacter` mutation. */
export type DeleteAnimeCharacterPayload = {
  __typename?: 'DeleteAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was deleted by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeCharacterNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Language` that is related to this `AnimeCharacter`. */
  language?: Maybe<Language>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeCharacter` mutation. */
export type DeleteAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};

/** All input for the `deleteAnimeGenreByNodeId` mutation. */
export type DeleteAnimeGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeGenre` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeGenre` mutation. */
export type DeleteAnimeGenreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genreId: Scalars['UUID'];
};

/** The output of our delete `AnimeGenre` mutation. */
export type DeleteAnimeGenrePayload = {
  __typename?: 'DeleteAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was deleted by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeGenreNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeGenre` mutation. */
export type DeleteAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeGenresOrderBy>>;
};

/** All input for the `deleteAnimeImageByNodeId` mutation. */
export type DeleteAnimeImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeImage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeImage` mutation. */
export type DeleteAnimeImageInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageId: Scalars['UUID'];
};

/** The output of our delete `AnimeImage` mutation. */
export type DeleteAnimeImagePayload = {
  __typename?: 'DeleteAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was deleted by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeImageNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeImage` mutation. */
export type DeleteAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: Maybe<Array<AnimeImagesOrderBy>>;
};

/** All input for the `deleteAnime` mutation. */
export type DeleteAnimeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** All input for the `deleteAnimeLicensorByNodeId` mutation. */
export type DeleteAnimeLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeLicensor` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeLicensor` mutation. */
export type DeleteAnimeLicensorInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  licensorId: Scalars['UUID'];
};

/** The output of our delete `AnimeLicensor` mutation. */
export type DeleteAnimeLicensorPayload = {
  __typename?: 'DeleteAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was deleted by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeLicensorNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeLicensor` mutation. */
export type DeleteAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: Maybe<Array<AnimeLicensorsOrderBy>>;
};

/** All input for the `deleteAnimeListByNodeId` mutation. */
export type DeleteAnimeListByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeList` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeListByUserIdAndTitle` mutation. */
export type DeleteAnimeListByUserIdAndTitleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  userId: Scalars['String'];
};

/** All input for the `deleteAnimeList` mutation. */
export type DeleteAnimeListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `AnimeList` mutation. */
export type DeleteAnimeListPayload = {
  __typename?: 'DeleteAnimeListPayload';
  /** The `AnimeList` that was deleted by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeListNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our delete `AnimeList` mutation. */
export type DeleteAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};

/** The output of our delete `Anime` mutation. */
export type DeleteAnimePayload = {
  __typename?: 'DeleteAnimePayload';
  /** Reads a single `AgeRatingType` that is related to this `Anime`. */
  ageRating?: Maybe<AgeRatingType>;
  /** Reads a single `AiringStatusType` that is related to this `Anime`. */
  airingStatus?: Maybe<AiringStatusType>;
  /** The `Anime` that was deleted by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `MediaType` that is related to this `Anime`. */
  mediaType?: Maybe<MediaType>;
  /** Reads a single `Image` that is related to this `Anime`. */
  profileImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Season` that is related to this `Anime`. */
  season?: Maybe<Season>;
  /** Reads a single `SourceMaterialType` that is related to this `Anime`. */
  sourceMaterial?: Maybe<SourceMaterialType>;
};


/** The output of our delete `Anime` mutation. */
export type DeleteAnimePayloadAnimeEdgeArgs = {
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/** All input for the `deleteAnimeProducerByNodeId` mutation. */
export type DeleteAnimeProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeProducer` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeProducer` mutation. */
export type DeleteAnimeProducerInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producerId: Scalars['UUID'];
};

/** The output of our delete `AnimeProducer` mutation. */
export type DeleteAnimeProducerPayload = {
  __typename?: 'DeleteAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was deleted by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeProducerNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeProducer` mutation. */
export type DeleteAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: Maybe<Array<AnimeProducersOrderBy>>;
};

/** All input for the `deleteAnimeStaffByNodeId` mutation. */
export type DeleteAnimeStaffByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStaff` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeStaff` mutation. */
export type DeleteAnimeStaffInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};

/** The output of our delete `AnimeStaff` mutation. */
export type DeleteAnimeStaffPayload = {
  __typename?: 'DeleteAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was deleted by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeStaffNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our delete `AnimeStaff` mutation. */
export type DeleteAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};

/** All input for the `deleteAnimeStudioByNodeId` mutation. */
export type DeleteAnimeStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStudio` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeStudio` mutation. */
export type DeleteAnimeStudioInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  studioId: Scalars['UUID'];
};

/** The output of our delete `AnimeStudio` mutation. */
export type DeleteAnimeStudioPayload = {
  __typename?: 'DeleteAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was deleted by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeStudioNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our delete `AnimeStudio` mutation. */
export type DeleteAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStudiosOrderBy>>;
};

/** All input for the `deleteAnimeUserScoreByNodeId` mutation. */
export type DeleteAnimeUserScoreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeUserScore` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeUserScore` mutation. */
export type DeleteAnimeUserScoreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** The output of our delete `AnimeUserScore` mutation. */
export type DeleteAnimeUserScorePayload = {
  __typename?: 'DeleteAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was deleted by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeUserScoreNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our delete `AnimeUserScore` mutation. */
export type DeleteAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};

/** All input for the `deleteCharacterByMalId` mutation. */
export type DeleteCharacterByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  malId: Scalars['String'];
};

/** All input for the `deleteCharacterByNodeId` mutation. */
export type DeleteCharacterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Character` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteCharacterImageByNodeId` mutation. */
export type DeleteCharacterImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterImage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteCharacterImage` mutation. */
export type DeleteCharacterImageInput = {
  characterId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageId: Scalars['UUID'];
};

/** The output of our delete `CharacterImage` mutation. */
export type DeleteCharacterImagePayload = {
  __typename?: 'DeleteCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was deleted by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedCharacterImageNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `CharacterImage` mutation. */
export type DeleteCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: Maybe<Array<CharacterImagesOrderBy>>;
};

/** All input for the `deleteCharacter` mutation. */
export type DeleteCharacterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Character` mutation. */
export type DeleteCharacterPayload = {
  __typename?: 'DeleteCharacterPayload';
  /** The `Character` that was deleted by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedCharacterNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Character` mutation. */
export type DeleteCharacterPayloadCharacterEdgeArgs = {
  orderBy?: Maybe<Array<CharactersOrderBy>>;
};

/** All input for the `deleteCharacterRoleByNodeId` mutation. */
export type DeleteCharacterRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterRole` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteCharacterRoleByRole` mutation. */
export type DeleteCharacterRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  role: Scalars['String'];
};

/** All input for the `deleteCharacterRole` mutation. */
export type DeleteCharacterRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `CharacterRole` mutation. */
export type DeleteCharacterRolePayload = {
  __typename?: 'DeleteCharacterRolePayload';
  /** The `CharacterRole` that was deleted by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedCharacterRoleNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `CharacterRole` mutation. */
export type DeleteCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: Maybe<Array<CharacterRolesOrderBy>>;
};

/** All input for the `deleteGenreByGenre` mutation. */
export type DeleteGenreByGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['String'];
};

/** All input for the `deleteGenreByNodeId` mutation. */
export type DeleteGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Genre` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteGenre` mutation. */
export type DeleteGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Genre` mutation. */
export type DeleteGenrePayload = {
  __typename?: 'DeleteGenrePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedGenreNodeId?: Maybe<Scalars['ID']>;
  /** The `Genre` that was deleted by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Genre` mutation. */
export type DeleteGenrePayloadGenreEdgeArgs = {
  orderBy?: Maybe<Array<GenresOrderBy>>;
};

/** All input for the `deleteImageByNodeId` mutation. */
export type DeleteImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Image` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteImage` mutation. */
export type DeleteImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Image` mutation. */
export type DeleteImagePayload = {
  __typename?: 'DeleteImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedImageNodeId?: Maybe<Scalars['ID']>;
  /** The `Image` that was deleted by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Image` mutation. */
export type DeleteImagePayloadImageEdgeArgs = {
  orderBy?: Maybe<Array<ImagesOrderBy>>;
};

/** All input for the `deleteLanguageByLanguage` mutation. */
export type DeleteLanguageByLanguageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  language: Scalars['String'];
};

/** All input for the `deleteLanguageByNodeId` mutation. */
export type DeleteLanguageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Language` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteLanguage` mutation. */
export type DeleteLanguageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Language` mutation. */
export type DeleteLanguagePayload = {
  __typename?: 'DeleteLanguagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedLanguageNodeId?: Maybe<Scalars['ID']>;
  /** The `Language` that was deleted by this mutation. */
  language?: Maybe<Language>;
  /** An edge for our `Language`. May be used by Relay 1. */
  languageEdge?: Maybe<LanguagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Language` mutation. */
export type DeleteLanguagePayloadLanguageEdgeArgs = {
  orderBy?: Maybe<Array<LanguagesOrderBy>>;
};

/** All input for the `deleteLicensorByLicensor` mutation. */
export type DeleteLicensorByLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  licensor: Scalars['String'];
};

/** All input for the `deleteLicensorByNodeId` mutation. */
export type DeleteLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Licensor` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteLicensor` mutation. */
export type DeleteLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Licensor` mutation. */
export type DeleteLicensorPayload = {
  __typename?: 'DeleteLicensorPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedLicensorNodeId?: Maybe<Scalars['ID']>;
  /** The `Licensor` that was deleted by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Licensor` mutation. */
export type DeleteLicensorPayloadLicensorEdgeArgs = {
  orderBy?: Maybe<Array<LicensorsOrderBy>>;
};

/** All input for the `deleteMediaTypeByMediaType` mutation. */
export type DeleteMediaTypeByMediaTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mediaType: Scalars['String'];
};

/** All input for the `deleteMediaTypeByNodeId` mutation. */
export type DeleteMediaTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `MediaType` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteMediaType` mutation. */
export type DeleteMediaTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `MediaType` mutation. */
export type DeleteMediaTypePayload = {
  __typename?: 'DeleteMediaTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedMediaTypeNodeId?: Maybe<Scalars['ID']>;
  /** The `MediaType` that was deleted by this mutation. */
  mediaType?: Maybe<MediaType>;
  /** An edge for our `MediaType`. May be used by Relay 1. */
  mediaTypeEdge?: Maybe<MediaTypesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `MediaType` mutation. */
export type DeleteMediaTypePayloadMediaTypeEdgeArgs = {
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};

/** All input for the `deletePersonByMalId` mutation. */
export type DeletePersonByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  malId: Scalars['String'];
};

/** All input for the `deletePersonByNodeId` mutation. */
export type DeletePersonByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Person` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deletePersonImageByNodeId` mutation. */
export type DeletePersonImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PersonImage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deletePersonImage` mutation. */
export type DeletePersonImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};

/** The output of our delete `PersonImage` mutation. */
export type DeletePersonImagePayload = {
  __typename?: 'DeletePersonImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedPersonImageNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was deleted by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `PersonImage` mutation. */
export type DeletePersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: Maybe<Array<PersonImagesOrderBy>>;
};

/** All input for the `deletePerson` mutation. */
export type DeletePersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Person` mutation. */
export type DeletePersonPayload = {
  __typename?: 'DeletePersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedPersonNodeId?: Maybe<Scalars['ID']>;
  /** The `Person` that was deleted by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Person` mutation. */
export type DeletePersonPayloadPersonEdgeArgs = {
  orderBy?: Maybe<Array<PeopleOrderBy>>;
};

/** All input for the `deleteProducerByNodeId` mutation. */
export type DeleteProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Producer` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteProducerByProducer` mutation. */
export type DeleteProducerByProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producer: Scalars['String'];
};

/** All input for the `deleteProducer` mutation. */
export type DeleteProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Producer` mutation. */
export type DeleteProducerPayload = {
  __typename?: 'DeleteProducerPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedProducerNodeId?: Maybe<Scalars['ID']>;
  /** The `Producer` that was deleted by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Producer` mutation. */
export type DeleteProducerPayloadProducerEdgeArgs = {
  orderBy?: Maybe<Array<ProducersOrderBy>>;
};

/** All input for the `deleteSeasonByNodeId` mutation. */
export type DeleteSeasonByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Season` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteSeasonBySeason` mutation. */
export type DeleteSeasonBySeasonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  season: Scalars['String'];
};

/** All input for the `deleteSeason` mutation. */
export type DeleteSeasonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Season` mutation. */
export type DeleteSeasonPayload = {
  __typename?: 'DeleteSeasonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedSeasonNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Season` that was deleted by this mutation. */
  season?: Maybe<Season>;
  /** An edge for our `Season`. May be used by Relay 1. */
  seasonEdge?: Maybe<SeasonsEdge>;
};


/** The output of our delete `Season` mutation. */
export type DeleteSeasonPayloadSeasonEdgeArgs = {
  orderBy?: Maybe<Array<SeasonsOrderBy>>;
};

/** All input for the `deleteSourceMaterialTypeByNodeId` mutation. */
export type DeleteSourceMaterialTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `SourceMaterialType` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteSourceMaterialTypeBySourceMaterialType` mutation. */
export type DeleteSourceMaterialTypeBySourceMaterialTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  sourceMaterialType: Scalars['String'];
};

/** All input for the `deleteSourceMaterialType` mutation. */
export type DeleteSourceMaterialTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `SourceMaterialType` mutation. */
export type DeleteSourceMaterialTypePayload = {
  __typename?: 'DeleteSourceMaterialTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedSourceMaterialTypeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `SourceMaterialType` that was deleted by this mutation. */
  sourceMaterialType?: Maybe<SourceMaterialType>;
  /** An edge for our `SourceMaterialType`. May be used by Relay 1. */
  sourceMaterialTypeEdge?: Maybe<SourceMaterialTypesEdge>;
};


/** The output of our delete `SourceMaterialType` mutation. */
export type DeleteSourceMaterialTypePayloadSourceMaterialTypeEdgeArgs = {
  orderBy?: Maybe<Array<SourceMaterialTypesOrderBy>>;
};

/** All input for the `deleteStaffRoleByNodeId` mutation. */
export type DeleteStaffRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `StaffRole` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteStaffRoleByRole` mutation. */
export type DeleteStaffRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  role: Scalars['String'];
};

/** All input for the `deleteStaffRole` mutation. */
export type DeleteStaffRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `StaffRole` mutation. */
export type DeleteStaffRolePayload = {
  __typename?: 'DeleteStaffRolePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedStaffRoleNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was deleted by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our delete `StaffRole` mutation. */
export type DeleteStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: Maybe<Array<StaffRolesOrderBy>>;
};

/** All input for the `deleteStudioByNodeId` mutation. */
export type DeleteStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Studio` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteStudioByStudio` mutation. */
export type DeleteStudioByStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  studio: Scalars['String'];
};

/** All input for the `deleteStudio` mutation. */
export type DeleteStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Studio` mutation. */
export type DeleteStudioPayload = {
  __typename?: 'DeleteStudioPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedStudioNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was deleted by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our delete `Studio` mutation. */
export type DeleteStudioPayloadStudioEdgeArgs = {
  orderBy?: Maybe<Array<StudiosOrderBy>>;
};

/** All input for the `deleteUserAnimeByNodeId` mutation. */
export type DeleteUserAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserAnime` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUserAnime` mutation. */
export type DeleteUserAnimeInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** All input for the `deleteUserAnimeListByAnimeListIdAndAnimeId` mutation. */
export type DeleteUserAnimeListByAnimeListIdAndAnimeIdInput = {
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our delete `UserAnimeList` mutation. */
export type DeleteUserAnimeListPayload = {
  __typename?: 'DeleteUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserAnimeListNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was deleted by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our delete `UserAnimeList` mutation. */
export type DeleteUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};

/** The output of our delete `UserAnime` mutation. */
export type DeleteUserAnimePayload = {
  __typename?: 'DeleteUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserAnimeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was deleted by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our delete `UserAnime` mutation. */
export type DeleteUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeOrderBy>>;
};

/** All input for the `deleteUserByNodeId` mutation. */
export type DeleteUserByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `User` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUser` mutation. */
export type DeleteUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

/** The output of our delete `User` mutation. */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was deleted by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our delete `User` mutation. */
export type DeleteUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

/** All input for the `deleteUserWatchStatusByNodeId` mutation. */
export type DeleteUserWatchStatusByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserWatchStatus` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUserWatchStatus` mutation. */
export type DeleteUserWatchStatusInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** The output of our delete `UserWatchStatus` mutation. */
export type DeleteUserWatchStatusPayload = {
  __typename?: 'DeleteUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserWatchStatusNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was deleted by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our delete `UserWatchStatus` mutation. */
export type DeleteUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: Maybe<Array<UserWatchStatusesOrderBy>>;
};

export type Genre = Node & {
  __typename?: 'Genre';
  /** Reads and enables pagination through a set of `AnimeGenre`. */
  animeGenres: AnimeGenresConnection;
  genre: Scalars['String'];
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type GenreAnimeGenresArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeGenreCondition>;
  filter?: Maybe<AnimeGenreFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeGenresOrderBy>>;
};

/** A condition to be used against `Genre` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type GenreCondition = {
  /** Checks for equality with the object’s `genre` field. */
  genre?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `Genre` object types. All fields are combined with a logical ‘and.’ */
export type GenreFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GenreFilter>>;
  /** Filter by the object’s `genre` field. */
  genre?: Maybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<GenreFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GenreFilter>>;
};

/** An input for mutations affecting `Genre` */
export type GenreInput = {
  genre: Scalars['String'];
  id?: Maybe<Scalars['UUID']>;
};

/** Represents an update to a `Genre`. Fields that are set will be updated. */
export type GenrePatch = {
  genre?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `Genre` values. */
export type GenresConnection = {
  __typename?: 'GenresConnection';
  /** A list of edges which contains the `Genre` and cursor to aid in pagination. */
  edges: Array<GenresEdge>;
  /** A list of `Genre` objects. */
  nodes: Array<Maybe<Genre>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Genre` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Genre` edge in the connection. */
export type GenresEdge = {
  __typename?: 'GenresEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Genre` at the end of the edge. */
  node?: Maybe<Genre>;
};

/** Methods to use when ordering `Genre`. */
export enum GenresOrderBy {
  AnimeGenresByGenreIdCountAsc = 'ANIME_GENRES_BY_GENRE_ID__COUNT_ASC',
  AnimeGenresByGenreIdCountDesc = 'ANIME_GENRES_BY_GENRE_ID__COUNT_DESC',
  GenreAsc = 'GENRE_ASC',
  GenreDesc = 'GENRE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Image = Node & {
  __typename?: 'Image';
  /** Reads and enables pagination through a set of `Anime`. */
  animeByProfileImageId: AnimeConnection;
  /** Reads and enables pagination through a set of `AnimeImage`. */
  animeImages: AnimeImagesConnection;
  /** Reads and enables pagination through a set of `CharacterImage`. */
  characterImages: CharacterImagesConnection;
  /** Reads and enables pagination through a set of `Character`. */
  charactersByCharacterImageId: CharactersConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads and enables pagination through a set of `Person`. */
  peopleByPersonImageId: PeopleConnection;
  /** Reads and enables pagination through a set of `PersonImage`. */
  personImages: PersonImagesConnection;
  title: Scalars['String'];
  url: Scalars['String'];
};


export type ImageAnimeByProfileImageIdArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCondition>;
  filter?: Maybe<AnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};


export type ImageAnimeImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeImageCondition>;
  filter?: Maybe<AnimeImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeImagesOrderBy>>;
};


export type ImageCharacterImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterImageCondition>;
  filter?: Maybe<CharacterImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharacterImagesOrderBy>>;
};


export type ImageCharactersByCharacterImageIdArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterCondition>;
  filter?: Maybe<CharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharactersOrderBy>>;
};


export type ImagePeopleByPersonImageIdArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<PersonCondition>;
  filter?: Maybe<PersonFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PeopleOrderBy>>;
};


export type ImagePersonImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<PersonImageCondition>;
  filter?: Maybe<PersonImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonImagesOrderBy>>;
};

/** A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ImageCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `url` field. */
  url?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Image` object types. All fields are combined with a logical ‘and.’ */
export type ImageFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ImageFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<ImageFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ImageFilter>>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `url` field. */
  url?: Maybe<StringFilter>;
};

/** An input for mutations affecting `Image` */
export type ImageInput = {
  id?: Maybe<Scalars['UUID']>;
  title: Scalars['String'];
  url: Scalars['String'];
};

/** Represents an update to a `Image`. Fields that are set will be updated. */
export type ImagePatch = {
  id?: Maybe<Scalars['UUID']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Image` values. */
export type ImagesConnection = {
  __typename?: 'ImagesConnection';
  /** A list of edges which contains the `Image` and cursor to aid in pagination. */
  edges: Array<ImagesEdge>;
  /** A list of `Image` objects. */
  nodes: Array<Maybe<Image>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Image` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Image` edge in the connection. */
export type ImagesEdge = {
  __typename?: 'ImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Image` at the end of the edge. */
  node?: Maybe<Image>;
};

/** Methods to use when ordering `Image`. */
export enum ImagesOrderBy {
  AnimeByProfileImageIdCountAsc = 'ANIME_BY_PROFILE_IMAGE_ID__COUNT_ASC',
  AnimeByProfileImageIdCountDesc = 'ANIME_BY_PROFILE_IMAGE_ID__COUNT_DESC',
  AnimeImagesByImageIdCountAsc = 'ANIME_IMAGES_BY_IMAGE_ID__COUNT_ASC',
  AnimeImagesByImageIdCountDesc = 'ANIME_IMAGES_BY_IMAGE_ID__COUNT_DESC',
  CharactersByCharacterImageIdCountAsc = 'CHARACTERS_BY_CHARACTER_IMAGE_ID__COUNT_ASC',
  CharactersByCharacterImageIdCountDesc = 'CHARACTERS_BY_CHARACTER_IMAGE_ID__COUNT_DESC',
  CharacterImagesByImageIdCountAsc = 'CHARACTER_IMAGES_BY_IMAGE_ID__COUNT_ASC',
  CharacterImagesByImageIdCountDesc = 'CHARACTER_IMAGES_BY_IMAGE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PeopleByPersonImageIdCountAsc = 'PEOPLE_BY_PERSON_IMAGE_ID__COUNT_ASC',
  PeopleByPersonImageIdCountDesc = 'PEOPLE_BY_PERSON_IMAGE_ID__COUNT_DESC',
  PersonImagesByImageIdCountAsc = 'PERSON_IMAGES_BY_IMAGE_ID__COUNT_ASC',
  PersonImagesByImageIdCountDesc = 'PERSON_IMAGES_BY_IMAGE_ID__COUNT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

/** All input for the `insertAnimeToUserList` mutation. */
export type InsertAnimeToUserListInput = {
  animeId?: Maybe<Scalars['UUID']>;
  animeListId?: Maybe<Scalars['UUID']>;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  watchStatus?: Maybe<WatchingStatusEnum>;
};

/** The output of our `insertAnimeToUserList` mutation. */
export type InsertAnimeToUserListPayload = {
  __typename?: 'InsertAnimeToUserListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our `insertAnimeToUserList` mutation. */
export type InsertAnimeToUserListPayloadUserAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};

/** All input for the `insertOrUpdateAnimeUserScore` mutation. */
export type InsertOrUpdateAnimeUserScoreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  inputAnimeId: Scalars['UUID'];
  inputUserScore: Scalars['Int'];
};

/** The output of our `insertOrUpdateAnimeUserScore` mutation. */
export type InsertOrUpdateAnimeUserScorePayload = {
  __typename?: 'InsertOrUpdateAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our `insertOrUpdateAnimeUserScore` mutation. */
export type InsertOrUpdateAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};

/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */
export type IntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Int']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Int']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Int']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Int']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Int']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Int']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Int']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Int']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Int']>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Int']>>;
};

export type Language = Node & {
  __typename?: 'Language';
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  id: Scalars['UUID'];
  language: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type LanguageAnimeCharactersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCharacterCondition>;
  filter?: Maybe<AnimeCharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};

/**
 * A condition to be used against `Language` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type LanguageCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `language` field. */
  language?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Language` object types. All fields are combined with a logical ‘and.’ */
export type LanguageFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<LanguageFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `language` field. */
  language?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<LanguageFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<LanguageFilter>>;
};

/** An input for mutations affecting `Language` */
export type LanguageInput = {
  id?: Maybe<Scalars['UUID']>;
  language: Scalars['String'];
};

/** Represents an update to a `Language`. Fields that are set will be updated. */
export type LanguagePatch = {
  id?: Maybe<Scalars['UUID']>;
  language?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Language` values. */
export type LanguagesConnection = {
  __typename?: 'LanguagesConnection';
  /** A list of edges which contains the `Language` and cursor to aid in pagination. */
  edges: Array<LanguagesEdge>;
  /** A list of `Language` objects. */
  nodes: Array<Maybe<Language>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Language` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Language` edge in the connection. */
export type LanguagesEdge = {
  __typename?: 'LanguagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Language` at the end of the edge. */
  node?: Maybe<Language>;
};

/** Methods to use when ordering `Language`. */
export enum LanguagesOrderBy {
  AnimeCharactersByLanguageIdCountAsc = 'ANIME_CHARACTERS_BY_LANGUAGE_ID__COUNT_ASC',
  AnimeCharactersByLanguageIdCountDesc = 'ANIME_CHARACTERS_BY_LANGUAGE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LanguageAsc = 'LANGUAGE_ASC',
  LanguageDesc = 'LANGUAGE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Licensor = Node & {
  __typename?: 'Licensor';
  /** Reads and enables pagination through a set of `AnimeLicensor`. */
  animeLicensors: AnimeLicensorsConnection;
  id: Scalars['UUID'];
  licensor: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type LicensorAnimeLicensorsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeLicensorCondition>;
  filter?: Maybe<AnimeLicensorFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeLicensorsOrderBy>>;
};

/**
 * A condition to be used against `Licensor` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type LicensorCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `licensor` field. */
  licensor?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Licensor` object types. All fields are combined with a logical ‘and.’ */
export type LicensorFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<LicensorFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `licensor` field. */
  licensor?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<LicensorFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<LicensorFilter>>;
};

/** An input for mutations affecting `Licensor` */
export type LicensorInput = {
  id?: Maybe<Scalars['UUID']>;
  licensor: Scalars['String'];
};

/** Represents an update to a `Licensor`. Fields that are set will be updated. */
export type LicensorPatch = {
  id?: Maybe<Scalars['UUID']>;
  licensor?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Licensor` values. */
export type LicensorsConnection = {
  __typename?: 'LicensorsConnection';
  /** A list of edges which contains the `Licensor` and cursor to aid in pagination. */
  edges: Array<LicensorsEdge>;
  /** A list of `Licensor` objects. */
  nodes: Array<Maybe<Licensor>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Licensor` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Licensor` edge in the connection. */
export type LicensorsEdge = {
  __typename?: 'LicensorsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Licensor` at the end of the edge. */
  node?: Maybe<Licensor>;
};

/** Methods to use when ordering `Licensor`. */
export enum LicensorsOrderBy {
  AnimeLicensorsByLicensorIdCountAsc = 'ANIME_LICENSORS_BY_LICENSOR_ID__COUNT_ASC',
  AnimeLicensorsByLicensorIdCountDesc = 'ANIME_LICENSORS_BY_LICENSOR_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LicensorAsc = 'LICENSOR_ASC',
  LicensorDesc = 'LICENSOR_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type MediaType = Node & {
  __typename?: 'MediaType';
  /** Reads and enables pagination through a set of `Anime`. */
  animes: AnimeConnection;
  id: Scalars['UUID'];
  mediaType: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type MediaTypeAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCondition>;
  filter?: Maybe<AnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/**
 * A condition to be used against `MediaType` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type MediaTypeCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mediaType` field. */
  mediaType?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MediaType` object types. All fields are combined with a logical ‘and.’ */
export type MediaTypeFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MediaTypeFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<MediaTypeFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MediaTypeFilter>>;
};

/** An input for mutations affecting `MediaType` */
export type MediaTypeInput = {
  id?: Maybe<Scalars['UUID']>;
  mediaType: Scalars['String'];
};

/** Represents an update to a `MediaType`. Fields that are set will be updated. */
export type MediaTypePatch = {
  id?: Maybe<Scalars['UUID']>;
  mediaType?: Maybe<Scalars['String']>;
};

/** A connection to a list of `MediaType` values. */
export type MediaTypesConnection = {
  __typename?: 'MediaTypesConnection';
  /** A list of edges which contains the `MediaType` and cursor to aid in pagination. */
  edges: Array<MediaTypesEdge>;
  /** A list of `MediaType` objects. */
  nodes: Array<Maybe<MediaType>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MediaType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MediaType` edge in the connection. */
export type MediaTypesEdge = {
  __typename?: 'MediaTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MediaType` at the end of the edge. */
  node?: Maybe<MediaType>;
};

/** Methods to use when ordering `MediaType`. */
export enum MediaTypesOrderBy {
  AnimeByMediaTypeIdCountAsc = 'ANIME_BY_MEDIA_TYPE_ID__COUNT_ASC',
  AnimeByMediaTypeIdCountDesc = 'ANIME_BY_MEDIA_TYPE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  MediaTypeAsc = 'MEDIA_TYPE_ASC',
  MediaTypeDesc = 'MEDIA_TYPE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation';
  addAnimeToList?: Maybe<AddAnimeToListPayload>;
  /** Creates a single `AgeRatingType`. */
  createAgeRatingType?: Maybe<CreateAgeRatingTypePayload>;
  /** Creates a single `AiringStatusType`. */
  createAiringStatusType?: Maybe<CreateAiringStatusTypePayload>;
  /** Creates a single `AlternateAnimeName`. */
  createAlternateAnimeName?: Maybe<CreateAlternateAnimeNamePayload>;
  /** Creates a single `Anime`. */
  createAnime?: Maybe<CreateAnimePayload>;
  /** Creates a single `AnimeCharacter`. */
  createAnimeCharacter?: Maybe<CreateAnimeCharacterPayload>;
  /** Creates a single `AnimeGenre`. */
  createAnimeGenre?: Maybe<CreateAnimeGenrePayload>;
  /** Creates a single `AnimeImage`. */
  createAnimeImage?: Maybe<CreateAnimeImagePayload>;
  /** Creates a single `AnimeLicensor`. */
  createAnimeLicensor?: Maybe<CreateAnimeLicensorPayload>;
  /** Creates a single `AnimeList`. */
  createAnimeList?: Maybe<CreateAnimeListPayload>;
  /** Creates a single `AnimeProducer`. */
  createAnimeProducer?: Maybe<CreateAnimeProducerPayload>;
  /** Creates a single `AnimeStaff`. */
  createAnimeStaff?: Maybe<CreateAnimeStaffPayload>;
  /** Creates a single `AnimeStudio`. */
  createAnimeStudio?: Maybe<CreateAnimeStudioPayload>;
  /** Creates a single `AnimeUserScore`. */
  createAnimeUserScore?: Maybe<CreateAnimeUserScorePayload>;
  /** Creates a single `Character`. */
  createCharacter?: Maybe<CreateCharacterPayload>;
  /** Creates a single `CharacterImage`. */
  createCharacterImage?: Maybe<CreateCharacterImagePayload>;
  /** Creates a single `CharacterRole`. */
  createCharacterRole?: Maybe<CreateCharacterRolePayload>;
  /** Creates a single `Genre`. */
  createGenre?: Maybe<CreateGenrePayload>;
  /** Creates a single `Image`. */
  createImage?: Maybe<CreateImagePayload>;
  /** Creates a single `Language`. */
  createLanguage?: Maybe<CreateLanguagePayload>;
  /** Creates a single `Licensor`. */
  createLicensor?: Maybe<CreateLicensorPayload>;
  /** Creates a single `MediaType`. */
  createMediaType?: Maybe<CreateMediaTypePayload>;
  createNewListAddAnime?: Maybe<CreateNewListAddAnimePayload>;
  /** Creates a single `Person`. */
  createPerson?: Maybe<CreatePersonPayload>;
  /** Creates a single `PersonImage`. */
  createPersonImage?: Maybe<CreatePersonImagePayload>;
  /** Creates a single `Producer`. */
  createProducer?: Maybe<CreateProducerPayload>;
  /** Creates a single `Season`. */
  createSeason?: Maybe<CreateSeasonPayload>;
  /** Creates a single `SourceMaterialType`. */
  createSourceMaterialType?: Maybe<CreateSourceMaterialTypePayload>;
  /** Creates a single `StaffRole`. */
  createStaffRole?: Maybe<CreateStaffRolePayload>;
  /** Creates a single `Studio`. */
  createStudio?: Maybe<CreateStudioPayload>;
  /** Creates a single `User`. */
  createUser?: Maybe<CreateUserPayload>;
  /** Creates a single `UserAnime`. */
  createUserAnime?: Maybe<CreateUserAnimePayload>;
  /** Creates a single `UserAnimeList`. */
  createUserAnimeList?: Maybe<CreateUserAnimeListPayload>;
  /** Creates a single `UserWatchStatus`. */
  createUserWatchStatus?: Maybe<CreateUserWatchStatusPayload>;
  /** Deletes a single `AgeRatingType` using a unique key. */
  deleteAgeRatingType?: Maybe<DeleteAgeRatingTypePayload>;
  /** Deletes a single `AgeRatingType` using a unique key. */
  deleteAgeRatingTypeByAgeRatingType?: Maybe<DeleteAgeRatingTypePayload>;
  /** Deletes a single `AgeRatingType` using its globally unique id. */
  deleteAgeRatingTypeByNodeId?: Maybe<DeleteAgeRatingTypePayload>;
  /** Deletes a single `AiringStatusType` using a unique key. */
  deleteAiringStatusType?: Maybe<DeleteAiringStatusTypePayload>;
  /** Deletes a single `AiringStatusType` using a unique key. */
  deleteAiringStatusTypeByAiringStatusType?: Maybe<DeleteAiringStatusTypePayload>;
  /** Deletes a single `AiringStatusType` using its globally unique id. */
  deleteAiringStatusTypeByNodeId?: Maybe<DeleteAiringStatusTypePayload>;
  /** Deletes a single `AlternateAnimeName` using a unique key. */
  deleteAlternateAnimeName?: Maybe<DeleteAlternateAnimeNamePayload>;
  /** Deletes a single `AlternateAnimeName` using its globally unique id. */
  deleteAlternateAnimeNameByNodeId?: Maybe<DeleteAlternateAnimeNamePayload>;
  /** Deletes a single `Anime` using a unique key. */
  deleteAnime?: Maybe<DeleteAnimePayload>;
  /** Deletes a single `Anime` using a unique key. */
  deleteAnimeByMalId?: Maybe<DeleteAnimePayload>;
  /** Deletes a single `Anime` using its globally unique id. */
  deleteAnimeByNodeId?: Maybe<DeleteAnimePayload>;
  /** Deletes a single `AnimeCharacter` using a unique key. */
  deleteAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId?: Maybe<DeleteAnimeCharacterPayload>;
  /** Deletes a single `AnimeGenre` using a unique key. */
  deleteAnimeGenre?: Maybe<DeleteAnimeGenrePayload>;
  /** Deletes a single `AnimeGenre` using its globally unique id. */
  deleteAnimeGenreByNodeId?: Maybe<DeleteAnimeGenrePayload>;
  /** Deletes a single `AnimeImage` using a unique key. */
  deleteAnimeImage?: Maybe<DeleteAnimeImagePayload>;
  /** Deletes a single `AnimeImage` using its globally unique id. */
  deleteAnimeImageByNodeId?: Maybe<DeleteAnimeImagePayload>;
  /** Deletes a single `AnimeLicensor` using a unique key. */
  deleteAnimeLicensor?: Maybe<DeleteAnimeLicensorPayload>;
  /** Deletes a single `AnimeLicensor` using its globally unique id. */
  deleteAnimeLicensorByNodeId?: Maybe<DeleteAnimeLicensorPayload>;
  /** Deletes a single `AnimeList` using a unique key. */
  deleteAnimeList?: Maybe<DeleteAnimeListPayload>;
  /** Deletes a single `AnimeList` using its globally unique id. */
  deleteAnimeListByNodeId?: Maybe<DeleteAnimeListPayload>;
  /** Deletes a single `AnimeList` using a unique key. */
  deleteAnimeListByUserIdAndTitle?: Maybe<DeleteAnimeListPayload>;
  /** Deletes a single `AnimeProducer` using a unique key. */
  deleteAnimeProducer?: Maybe<DeleteAnimeProducerPayload>;
  /** Deletes a single `AnimeProducer` using its globally unique id. */
  deleteAnimeProducerByNodeId?: Maybe<DeleteAnimeProducerPayload>;
  /** Deletes a single `AnimeStaff` using a unique key. */
  deleteAnimeStaff?: Maybe<DeleteAnimeStaffPayload>;
  /** Deletes a single `AnimeStaff` using its globally unique id. */
  deleteAnimeStaffByNodeId?: Maybe<DeleteAnimeStaffPayload>;
  /** Deletes a single `AnimeStudio` using a unique key. */
  deleteAnimeStudio?: Maybe<DeleteAnimeStudioPayload>;
  /** Deletes a single `AnimeStudio` using its globally unique id. */
  deleteAnimeStudioByNodeId?: Maybe<DeleteAnimeStudioPayload>;
  /** Deletes a single `AnimeUserScore` using a unique key. */
  deleteAnimeUserScore?: Maybe<DeleteAnimeUserScorePayload>;
  /** Deletes a single `AnimeUserScore` using its globally unique id. */
  deleteAnimeUserScoreByNodeId?: Maybe<DeleteAnimeUserScorePayload>;
  /** Deletes a single `Character` using a unique key. */
  deleteCharacter?: Maybe<DeleteCharacterPayload>;
  /** Deletes a single `Character` using a unique key. */
  deleteCharacterByMalId?: Maybe<DeleteCharacterPayload>;
  /** Deletes a single `Character` using its globally unique id. */
  deleteCharacterByNodeId?: Maybe<DeleteCharacterPayload>;
  /** Deletes a single `CharacterImage` using a unique key. */
  deleteCharacterImage?: Maybe<DeleteCharacterImagePayload>;
  /** Deletes a single `CharacterImage` using its globally unique id. */
  deleteCharacterImageByNodeId?: Maybe<DeleteCharacterImagePayload>;
  /** Deletes a single `CharacterRole` using a unique key. */
  deleteCharacterRole?: Maybe<DeleteCharacterRolePayload>;
  /** Deletes a single `CharacterRole` using its globally unique id. */
  deleteCharacterRoleByNodeId?: Maybe<DeleteCharacterRolePayload>;
  /** Deletes a single `CharacterRole` using a unique key. */
  deleteCharacterRoleByRole?: Maybe<DeleteCharacterRolePayload>;
  /** Deletes a single `Genre` using a unique key. */
  deleteGenre?: Maybe<DeleteGenrePayload>;
  /** Deletes a single `Genre` using a unique key. */
  deleteGenreByGenre?: Maybe<DeleteGenrePayload>;
  /** Deletes a single `Genre` using its globally unique id. */
  deleteGenreByNodeId?: Maybe<DeleteGenrePayload>;
  /** Deletes a single `Image` using a unique key. */
  deleteImage?: Maybe<DeleteImagePayload>;
  /** Deletes a single `Image` using its globally unique id. */
  deleteImageByNodeId?: Maybe<DeleteImagePayload>;
  /** Deletes a single `Language` using a unique key. */
  deleteLanguage?: Maybe<DeleteLanguagePayload>;
  /** Deletes a single `Language` using a unique key. */
  deleteLanguageByLanguage?: Maybe<DeleteLanguagePayload>;
  /** Deletes a single `Language` using its globally unique id. */
  deleteLanguageByNodeId?: Maybe<DeleteLanguagePayload>;
  /** Deletes a single `Licensor` using a unique key. */
  deleteLicensor?: Maybe<DeleteLicensorPayload>;
  /** Deletes a single `Licensor` using a unique key. */
  deleteLicensorByLicensor?: Maybe<DeleteLicensorPayload>;
  /** Deletes a single `Licensor` using its globally unique id. */
  deleteLicensorByNodeId?: Maybe<DeleteLicensorPayload>;
  /** Deletes a single `MediaType` using a unique key. */
  deleteMediaType?: Maybe<DeleteMediaTypePayload>;
  /** Deletes a single `MediaType` using a unique key. */
  deleteMediaTypeByMediaType?: Maybe<DeleteMediaTypePayload>;
  /** Deletes a single `MediaType` using its globally unique id. */
  deleteMediaTypeByNodeId?: Maybe<DeleteMediaTypePayload>;
  /** Deletes a single `Person` using a unique key. */
  deletePerson?: Maybe<DeletePersonPayload>;
  /** Deletes a single `Person` using a unique key. */
  deletePersonByMalId?: Maybe<DeletePersonPayload>;
  /** Deletes a single `Person` using its globally unique id. */
  deletePersonByNodeId?: Maybe<DeletePersonPayload>;
  /** Deletes a single `PersonImage` using a unique key. */
  deletePersonImage?: Maybe<DeletePersonImagePayload>;
  /** Deletes a single `PersonImage` using its globally unique id. */
  deletePersonImageByNodeId?: Maybe<DeletePersonImagePayload>;
  /** Deletes a single `Producer` using a unique key. */
  deleteProducer?: Maybe<DeleteProducerPayload>;
  /** Deletes a single `Producer` using its globally unique id. */
  deleteProducerByNodeId?: Maybe<DeleteProducerPayload>;
  /** Deletes a single `Producer` using a unique key. */
  deleteProducerByProducer?: Maybe<DeleteProducerPayload>;
  /** Deletes a single `Season` using a unique key. */
  deleteSeason?: Maybe<DeleteSeasonPayload>;
  /** Deletes a single `Season` using its globally unique id. */
  deleteSeasonByNodeId?: Maybe<DeleteSeasonPayload>;
  /** Deletes a single `Season` using a unique key. */
  deleteSeasonBySeason?: Maybe<DeleteSeasonPayload>;
  /** Deletes a single `SourceMaterialType` using a unique key. */
  deleteSourceMaterialType?: Maybe<DeleteSourceMaterialTypePayload>;
  /** Deletes a single `SourceMaterialType` using its globally unique id. */
  deleteSourceMaterialTypeByNodeId?: Maybe<DeleteSourceMaterialTypePayload>;
  /** Deletes a single `SourceMaterialType` using a unique key. */
  deleteSourceMaterialTypeBySourceMaterialType?: Maybe<DeleteSourceMaterialTypePayload>;
  /** Deletes a single `StaffRole` using a unique key. */
  deleteStaffRole?: Maybe<DeleteStaffRolePayload>;
  /** Deletes a single `StaffRole` using its globally unique id. */
  deleteStaffRoleByNodeId?: Maybe<DeleteStaffRolePayload>;
  /** Deletes a single `StaffRole` using a unique key. */
  deleteStaffRoleByRole?: Maybe<DeleteStaffRolePayload>;
  /** Deletes a single `Studio` using a unique key. */
  deleteStudio?: Maybe<DeleteStudioPayload>;
  /** Deletes a single `Studio` using its globally unique id. */
  deleteStudioByNodeId?: Maybe<DeleteStudioPayload>;
  /** Deletes a single `Studio` using a unique key. */
  deleteStudioByStudio?: Maybe<DeleteStudioPayload>;
  /** Deletes a single `User` using a unique key. */
  deleteUser?: Maybe<DeleteUserPayload>;
  /** Deletes a single `UserAnime` using a unique key. */
  deleteUserAnime?: Maybe<DeleteUserAnimePayload>;
  /** Deletes a single `UserAnime` using its globally unique id. */
  deleteUserAnimeByNodeId?: Maybe<DeleteUserAnimePayload>;
  /** Deletes a single `UserAnimeList` using a unique key. */
  deleteUserAnimeListByAnimeListIdAndAnimeId?: Maybe<DeleteUserAnimeListPayload>;
  /** Deletes a single `User` using its globally unique id. */
  deleteUserByNodeId?: Maybe<DeleteUserPayload>;
  /** Deletes a single `UserWatchStatus` using a unique key. */
  deleteUserWatchStatus?: Maybe<DeleteUserWatchStatusPayload>;
  /** Deletes a single `UserWatchStatus` using its globally unique id. */
  deleteUserWatchStatusByNodeId?: Maybe<DeleteUserWatchStatusPayload>;
  insertAnimeToUserList?: Maybe<InsertAnimeToUserListPayload>;
  insertOrUpdateAnimeUserScore?: Maybe<InsertOrUpdateAnimeUserScorePayload>;
  registerUser?: Maybe<RegisterUserPayload>;
  /** Updates a single `AgeRatingType` using a unique key and a patch. */
  updateAgeRatingType?: Maybe<UpdateAgeRatingTypePayload>;
  /** Updates a single `AgeRatingType` using a unique key and a patch. */
  updateAgeRatingTypeByAgeRatingType?: Maybe<UpdateAgeRatingTypePayload>;
  /** Updates a single `AgeRatingType` using its globally unique id and a patch. */
  updateAgeRatingTypeByNodeId?: Maybe<UpdateAgeRatingTypePayload>;
  /** Updates a single `AiringStatusType` using a unique key and a patch. */
  updateAiringStatusType?: Maybe<UpdateAiringStatusTypePayload>;
  /** Updates a single `AiringStatusType` using a unique key and a patch. */
  updateAiringStatusTypeByAiringStatusType?: Maybe<UpdateAiringStatusTypePayload>;
  /** Updates a single `AiringStatusType` using its globally unique id and a patch. */
  updateAiringStatusTypeByNodeId?: Maybe<UpdateAiringStatusTypePayload>;
  /** Updates a single `AlternateAnimeName` using a unique key and a patch. */
  updateAlternateAnimeName?: Maybe<UpdateAlternateAnimeNamePayload>;
  /** Updates a single `AlternateAnimeName` using its globally unique id and a patch. */
  updateAlternateAnimeNameByNodeId?: Maybe<UpdateAlternateAnimeNamePayload>;
  /** Updates a single `Anime` using a unique key and a patch. */
  updateAnime?: Maybe<UpdateAnimePayload>;
  /** Updates a single `Anime` using a unique key and a patch. */
  updateAnimeByMalId?: Maybe<UpdateAnimePayload>;
  /** Updates a single `Anime` using its globally unique id and a patch. */
  updateAnimeByNodeId?: Maybe<UpdateAnimePayload>;
  /** Updates a single `AnimeCharacter` using a unique key and a patch. */
  updateAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId?: Maybe<UpdateAnimeCharacterPayload>;
  /** Updates a single `AnimeGenre` using a unique key and a patch. */
  updateAnimeGenre?: Maybe<UpdateAnimeGenrePayload>;
  /** Updates a single `AnimeGenre` using its globally unique id and a patch. */
  updateAnimeGenreByNodeId?: Maybe<UpdateAnimeGenrePayload>;
  /** Updates a single `AnimeImage` using a unique key and a patch. */
  updateAnimeImage?: Maybe<UpdateAnimeImagePayload>;
  /** Updates a single `AnimeImage` using its globally unique id and a patch. */
  updateAnimeImageByNodeId?: Maybe<UpdateAnimeImagePayload>;
  /** Updates a single `AnimeLicensor` using a unique key and a patch. */
  updateAnimeLicensor?: Maybe<UpdateAnimeLicensorPayload>;
  /** Updates a single `AnimeLicensor` using its globally unique id and a patch. */
  updateAnimeLicensorByNodeId?: Maybe<UpdateAnimeLicensorPayload>;
  /** Updates a single `AnimeList` using a unique key and a patch. */
  updateAnimeList?: Maybe<UpdateAnimeListPayload>;
  /** Updates a single `AnimeList` using its globally unique id and a patch. */
  updateAnimeListByNodeId?: Maybe<UpdateAnimeListPayload>;
  /** Updates a single `AnimeList` using a unique key and a patch. */
  updateAnimeListByUserIdAndTitle?: Maybe<UpdateAnimeListPayload>;
  /** Updates a single `AnimeProducer` using a unique key and a patch. */
  updateAnimeProducer?: Maybe<UpdateAnimeProducerPayload>;
  /** Updates a single `AnimeProducer` using its globally unique id and a patch. */
  updateAnimeProducerByNodeId?: Maybe<UpdateAnimeProducerPayload>;
  /** Updates a single `AnimeStaff` using a unique key and a patch. */
  updateAnimeStaff?: Maybe<UpdateAnimeStaffPayload>;
  /** Updates a single `AnimeStaff` using its globally unique id and a patch. */
  updateAnimeStaffByNodeId?: Maybe<UpdateAnimeStaffPayload>;
  /** Updates a single `AnimeStudio` using a unique key and a patch. */
  updateAnimeStudio?: Maybe<UpdateAnimeStudioPayload>;
  /** Updates a single `AnimeStudio` using its globally unique id and a patch. */
  updateAnimeStudioByNodeId?: Maybe<UpdateAnimeStudioPayload>;
  /** Updates a single `AnimeUserScore` using a unique key and a patch. */
  updateAnimeUserScore?: Maybe<UpdateAnimeUserScorePayload>;
  /** Updates a single `AnimeUserScore` using its globally unique id and a patch. */
  updateAnimeUserScoreByNodeId?: Maybe<UpdateAnimeUserScorePayload>;
  /** Updates a single `Character` using a unique key and a patch. */
  updateCharacter?: Maybe<UpdateCharacterPayload>;
  /** Updates a single `Character` using a unique key and a patch. */
  updateCharacterByMalId?: Maybe<UpdateCharacterPayload>;
  /** Updates a single `Character` using its globally unique id and a patch. */
  updateCharacterByNodeId?: Maybe<UpdateCharacterPayload>;
  /** Updates a single `CharacterImage` using a unique key and a patch. */
  updateCharacterImage?: Maybe<UpdateCharacterImagePayload>;
  /** Updates a single `CharacterImage` using its globally unique id and a patch. */
  updateCharacterImageByNodeId?: Maybe<UpdateCharacterImagePayload>;
  /** Updates a single `CharacterRole` using a unique key and a patch. */
  updateCharacterRole?: Maybe<UpdateCharacterRolePayload>;
  /** Updates a single `CharacterRole` using its globally unique id and a patch. */
  updateCharacterRoleByNodeId?: Maybe<UpdateCharacterRolePayload>;
  /** Updates a single `CharacterRole` using a unique key and a patch. */
  updateCharacterRoleByRole?: Maybe<UpdateCharacterRolePayload>;
  /** Updates a single `Genre` using a unique key and a patch. */
  updateGenre?: Maybe<UpdateGenrePayload>;
  /** Updates a single `Genre` using a unique key and a patch. */
  updateGenreByGenre?: Maybe<UpdateGenrePayload>;
  /** Updates a single `Genre` using its globally unique id and a patch. */
  updateGenreByNodeId?: Maybe<UpdateGenrePayload>;
  /** Updates a single `Image` using a unique key and a patch. */
  updateImage?: Maybe<UpdateImagePayload>;
  /** Updates a single `Image` using its globally unique id and a patch. */
  updateImageByNodeId?: Maybe<UpdateImagePayload>;
  /** Updates a single `Language` using a unique key and a patch. */
  updateLanguage?: Maybe<UpdateLanguagePayload>;
  /** Updates a single `Language` using a unique key and a patch. */
  updateLanguageByLanguage?: Maybe<UpdateLanguagePayload>;
  /** Updates a single `Language` using its globally unique id and a patch. */
  updateLanguageByNodeId?: Maybe<UpdateLanguagePayload>;
  /** Updates a single `Licensor` using a unique key and a patch. */
  updateLicensor?: Maybe<UpdateLicensorPayload>;
  /** Updates a single `Licensor` using a unique key and a patch. */
  updateLicensorByLicensor?: Maybe<UpdateLicensorPayload>;
  /** Updates a single `Licensor` using its globally unique id and a patch. */
  updateLicensorByNodeId?: Maybe<UpdateLicensorPayload>;
  /** Updates a single `MediaType` using a unique key and a patch. */
  updateMediaType?: Maybe<UpdateMediaTypePayload>;
  /** Updates a single `MediaType` using a unique key and a patch. */
  updateMediaTypeByMediaType?: Maybe<UpdateMediaTypePayload>;
  /** Updates a single `MediaType` using its globally unique id and a patch. */
  updateMediaTypeByNodeId?: Maybe<UpdateMediaTypePayload>;
  /** Updates a single `Person` using a unique key and a patch. */
  updatePerson?: Maybe<UpdatePersonPayload>;
  /** Updates a single `Person` using a unique key and a patch. */
  updatePersonByMalId?: Maybe<UpdatePersonPayload>;
  /** Updates a single `Person` using its globally unique id and a patch. */
  updatePersonByNodeId?: Maybe<UpdatePersonPayload>;
  /** Updates a single `PersonImage` using a unique key and a patch. */
  updatePersonImage?: Maybe<UpdatePersonImagePayload>;
  /** Updates a single `PersonImage` using its globally unique id and a patch. */
  updatePersonImageByNodeId?: Maybe<UpdatePersonImagePayload>;
  /** Updates a single `Producer` using a unique key and a patch. */
  updateProducer?: Maybe<UpdateProducerPayload>;
  /** Updates a single `Producer` using its globally unique id and a patch. */
  updateProducerByNodeId?: Maybe<UpdateProducerPayload>;
  /** Updates a single `Producer` using a unique key and a patch. */
  updateProducerByProducer?: Maybe<UpdateProducerPayload>;
  /** Updates a single `Season` using a unique key and a patch. */
  updateSeason?: Maybe<UpdateSeasonPayload>;
  /** Updates a single `Season` using its globally unique id and a patch. */
  updateSeasonByNodeId?: Maybe<UpdateSeasonPayload>;
  /** Updates a single `Season` using a unique key and a patch. */
  updateSeasonBySeason?: Maybe<UpdateSeasonPayload>;
  /** Updates a single `SourceMaterialType` using a unique key and a patch. */
  updateSourceMaterialType?: Maybe<UpdateSourceMaterialTypePayload>;
  /** Updates a single `SourceMaterialType` using its globally unique id and a patch. */
  updateSourceMaterialTypeByNodeId?: Maybe<UpdateSourceMaterialTypePayload>;
  /** Updates a single `SourceMaterialType` using a unique key and a patch. */
  updateSourceMaterialTypeBySourceMaterialType?: Maybe<UpdateSourceMaterialTypePayload>;
  /** Updates a single `StaffRole` using a unique key and a patch. */
  updateStaffRole?: Maybe<UpdateStaffRolePayload>;
  /** Updates a single `StaffRole` using its globally unique id and a patch. */
  updateStaffRoleByNodeId?: Maybe<UpdateStaffRolePayload>;
  /** Updates a single `StaffRole` using a unique key and a patch. */
  updateStaffRoleByRole?: Maybe<UpdateStaffRolePayload>;
  /** Updates a single `Studio` using a unique key and a patch. */
  updateStudio?: Maybe<UpdateStudioPayload>;
  /** Updates a single `Studio` using its globally unique id and a patch. */
  updateStudioByNodeId?: Maybe<UpdateStudioPayload>;
  /** Updates a single `Studio` using a unique key and a patch. */
  updateStudioByStudio?: Maybe<UpdateStudioPayload>;
  /** Updates a single `User` using a unique key and a patch. */
  updateUser?: Maybe<UpdateUserPayload>;
  /** Updates a single `UserAnime` using a unique key and a patch. */
  updateUserAnime?: Maybe<UpdateUserAnimePayload>;
  /** Updates a single `UserAnime` using its globally unique id and a patch. */
  updateUserAnimeByNodeId?: Maybe<UpdateUserAnimePayload>;
  /** Updates a single `UserAnimeList` using a unique key and a patch. */
  updateUserAnimeListByAnimeListIdAndAnimeId?: Maybe<UpdateUserAnimeListPayload>;
  /** Updates a single `User` using its globally unique id and a patch. */
  updateUserByNodeId?: Maybe<UpdateUserPayload>;
  /** Updates a single `UserWatchStatus` using a unique key and a patch. */
  updateUserWatchStatus?: Maybe<UpdateUserWatchStatusPayload>;
  /** Updates a single `UserWatchStatus` using its globally unique id and a patch. */
  updateUserWatchStatusByNodeId?: Maybe<UpdateUserWatchStatusPayload>;
  /** Upserts a single `AgeRatingType`. */
  upsertAgeRatingType?: Maybe<UpsertAgeRatingTypePayload>;
  /** Upserts a single `AiringStatusType`. */
  upsertAiringStatusType?: Maybe<UpsertAiringStatusTypePayload>;
  /** Upserts a single `AlternateAnimeName`. */
  upsertAlternateAnimeName?: Maybe<UpsertAlternateAnimeNamePayload>;
  /** Upserts a single `Anime`. */
  upsertAnime?: Maybe<UpsertAnimePayload>;
  /** Upserts a single `AnimeCharacter`. */
  upsertAnimeCharacter?: Maybe<UpsertAnimeCharacterPayload>;
  /** Upserts a single `AnimeGenre`. */
  upsertAnimeGenre?: Maybe<UpsertAnimeGenrePayload>;
  /** Upserts a single `AnimeImage`. */
  upsertAnimeImage?: Maybe<UpsertAnimeImagePayload>;
  /** Upserts a single `AnimeLicensor`. */
  upsertAnimeLicensor?: Maybe<UpsertAnimeLicensorPayload>;
  /** Upserts a single `AnimeList`. */
  upsertAnimeList?: Maybe<UpsertAnimeListPayload>;
  /** Upserts a single `AnimeProducer`. */
  upsertAnimeProducer?: Maybe<UpsertAnimeProducerPayload>;
  /** Upserts a single `AnimeStaff`. */
  upsertAnimeStaff?: Maybe<UpsertAnimeStaffPayload>;
  /** Upserts a single `AnimeStudio`. */
  upsertAnimeStudio?: Maybe<UpsertAnimeStudioPayload>;
  /** Upserts a single `AnimeUserScore`. */
  upsertAnimeUserScore?: Maybe<UpsertAnimeUserScorePayload>;
  /** Upserts a single `Character`. */
  upsertCharacter?: Maybe<UpsertCharacterPayload>;
  /** Upserts a single `CharacterImage`. */
  upsertCharacterImage?: Maybe<UpsertCharacterImagePayload>;
  /** Upserts a single `CharacterRole`. */
  upsertCharacterRole?: Maybe<UpsertCharacterRolePayload>;
  /** Upserts a single `Genre`. */
  upsertGenre?: Maybe<UpsertGenrePayload>;
  /** Upserts a single `Image`. */
  upsertImage?: Maybe<UpsertImagePayload>;
  /** Upserts a single `Language`. */
  upsertLanguage?: Maybe<UpsertLanguagePayload>;
  /** Upserts a single `Licensor`. */
  upsertLicensor?: Maybe<UpsertLicensorPayload>;
  /** Upserts a single `MediaType`. */
  upsertMediaType?: Maybe<UpsertMediaTypePayload>;
  /** Upserts a single `Person`. */
  upsertPerson?: Maybe<UpsertPersonPayload>;
  /** Upserts a single `PersonImage`. */
  upsertPersonImage?: Maybe<UpsertPersonImagePayload>;
  /** Upserts a single `Producer`. */
  upsertProducer?: Maybe<UpsertProducerPayload>;
  /** Upserts a single `Season`. */
  upsertSeason?: Maybe<UpsertSeasonPayload>;
  /** Upserts a single `SourceMaterialType`. */
  upsertSourceMaterialType?: Maybe<UpsertSourceMaterialTypePayload>;
  /** Upserts a single `StaffRole`. */
  upsertStaffRole?: Maybe<UpsertStaffRolePayload>;
  /** Upserts a single `Studio`. */
  upsertStudio?: Maybe<UpsertStudioPayload>;
  /** Upserts a single `User`. */
  upsertUser?: Maybe<UpsertUserPayload>;
  /** Upserts a single `UserAnime`. */
  upsertUserAnime?: Maybe<UpsertUserAnimePayload>;
  /** Upserts a single `UserAnimeList`. */
  upsertUserAnimeList?: Maybe<UpsertUserAnimeListPayload>;
  /** Upserts a single `UserWatchStatus`. */
  upsertUserWatchStatus?: Maybe<UpsertUserWatchStatusPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddAnimeToListArgs = {
  input: AddAnimeToListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAgeRatingTypeArgs = {
  input: CreateAgeRatingTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAiringStatusTypeArgs = {
  input: CreateAiringStatusTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAlternateAnimeNameArgs = {
  input: CreateAlternateAnimeNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeArgs = {
  input: CreateAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeCharacterArgs = {
  input: CreateAnimeCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeGenreArgs = {
  input: CreateAnimeGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeImageArgs = {
  input: CreateAnimeImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeLicensorArgs = {
  input: CreateAnimeLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeListArgs = {
  input: CreateAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeProducerArgs = {
  input: CreateAnimeProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeStaffArgs = {
  input: CreateAnimeStaffInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeStudioArgs = {
  input: CreateAnimeStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeUserScoreArgs = {
  input: CreateAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCharacterArgs = {
  input: CreateCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCharacterImageArgs = {
  input: CreateCharacterImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCharacterRoleArgs = {
  input: CreateCharacterRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateGenreArgs = {
  input: CreateGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateImageArgs = {
  input: CreateImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateLanguageArgs = {
  input: CreateLanguageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateLicensorArgs = {
  input: CreateLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMediaTypeArgs = {
  input: CreateMediaTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNewListAddAnimeArgs = {
  input: CreateNewListAddAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePersonArgs = {
  input: CreatePersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePersonImageArgs = {
  input: CreatePersonImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateProducerArgs = {
  input: CreateProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSeasonArgs = {
  input: CreateSeasonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSourceMaterialTypeArgs = {
  input: CreateSourceMaterialTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateStaffRoleArgs = {
  input: CreateStaffRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateStudioArgs = {
  input: CreateStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserAnimeArgs = {
  input: CreateUserAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserAnimeListArgs = {
  input: CreateUserAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserWatchStatusArgs = {
  input: CreateUserWatchStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAgeRatingTypeArgs = {
  input: DeleteAgeRatingTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAgeRatingTypeByAgeRatingTypeArgs = {
  input: DeleteAgeRatingTypeByAgeRatingTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAgeRatingTypeByNodeIdArgs = {
  input: DeleteAgeRatingTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAiringStatusTypeArgs = {
  input: DeleteAiringStatusTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAiringStatusTypeByAiringStatusTypeArgs = {
  input: DeleteAiringStatusTypeByAiringStatusTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAiringStatusTypeByNodeIdArgs = {
  input: DeleteAiringStatusTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAlternateAnimeNameArgs = {
  input: DeleteAlternateAnimeNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAlternateAnimeNameByNodeIdArgs = {
  input: DeleteAlternateAnimeNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeArgs = {
  input: DeleteAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeByMalIdArgs = {
  input: DeleteAnimeByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeByNodeIdArgs = {
  input: DeleteAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonIdArgs = {
  input: DeleteAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeGenreArgs = {
  input: DeleteAnimeGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeGenreByNodeIdArgs = {
  input: DeleteAnimeGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeImageArgs = {
  input: DeleteAnimeImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeImageByNodeIdArgs = {
  input: DeleteAnimeImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeLicensorArgs = {
  input: DeleteAnimeLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeLicensorByNodeIdArgs = {
  input: DeleteAnimeLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeListArgs = {
  input: DeleteAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeListByNodeIdArgs = {
  input: DeleteAnimeListByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeListByUserIdAndTitleArgs = {
  input: DeleteAnimeListByUserIdAndTitleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeProducerArgs = {
  input: DeleteAnimeProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeProducerByNodeIdArgs = {
  input: DeleteAnimeProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStaffArgs = {
  input: DeleteAnimeStaffInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStaffByNodeIdArgs = {
  input: DeleteAnimeStaffByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStudioArgs = {
  input: DeleteAnimeStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStudioByNodeIdArgs = {
  input: DeleteAnimeStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeUserScoreArgs = {
  input: DeleteAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeUserScoreByNodeIdArgs = {
  input: DeleteAnimeUserScoreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterArgs = {
  input: DeleteCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterByMalIdArgs = {
  input: DeleteCharacterByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterByNodeIdArgs = {
  input: DeleteCharacterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterImageArgs = {
  input: DeleteCharacterImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterImageByNodeIdArgs = {
  input: DeleteCharacterImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterRoleArgs = {
  input: DeleteCharacterRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterRoleByNodeIdArgs = {
  input: DeleteCharacterRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterRoleByRoleArgs = {
  input: DeleteCharacterRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteGenreArgs = {
  input: DeleteGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteGenreByGenreArgs = {
  input: DeleteGenreByGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteGenreByNodeIdArgs = {
  input: DeleteGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteImageArgs = {
  input: DeleteImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteImageByNodeIdArgs = {
  input: DeleteImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLanguageArgs = {
  input: DeleteLanguageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLanguageByLanguageArgs = {
  input: DeleteLanguageByLanguageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLanguageByNodeIdArgs = {
  input: DeleteLanguageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLicensorArgs = {
  input: DeleteLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLicensorByLicensorArgs = {
  input: DeleteLicensorByLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLicensorByNodeIdArgs = {
  input: DeleteLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteMediaTypeArgs = {
  input: DeleteMediaTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteMediaTypeByMediaTypeArgs = {
  input: DeleteMediaTypeByMediaTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteMediaTypeByNodeIdArgs = {
  input: DeleteMediaTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonArgs = {
  input: DeletePersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonByMalIdArgs = {
  input: DeletePersonByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonByNodeIdArgs = {
  input: DeletePersonByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonImageArgs = {
  input: DeletePersonImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonImageByNodeIdArgs = {
  input: DeletePersonImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProducerArgs = {
  input: DeleteProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProducerByNodeIdArgs = {
  input: DeleteProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProducerByProducerArgs = {
  input: DeleteProducerByProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSeasonArgs = {
  input: DeleteSeasonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSeasonByNodeIdArgs = {
  input: DeleteSeasonByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSeasonBySeasonArgs = {
  input: DeleteSeasonBySeasonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSourceMaterialTypeArgs = {
  input: DeleteSourceMaterialTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSourceMaterialTypeByNodeIdArgs = {
  input: DeleteSourceMaterialTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSourceMaterialTypeBySourceMaterialTypeArgs = {
  input: DeleteSourceMaterialTypeBySourceMaterialTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStaffRoleArgs = {
  input: DeleteStaffRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStaffRoleByNodeIdArgs = {
  input: DeleteStaffRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStaffRoleByRoleArgs = {
  input: DeleteStaffRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStudioArgs = {
  input: DeleteStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStudioByNodeIdArgs = {
  input: DeleteStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStudioByStudioArgs = {
  input: DeleteStudioByStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserArgs = {
  input: DeleteUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAnimeArgs = {
  input: DeleteUserAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAnimeByNodeIdArgs = {
  input: DeleteUserAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAnimeListByAnimeListIdAndAnimeIdArgs = {
  input: DeleteUserAnimeListByAnimeListIdAndAnimeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserByNodeIdArgs = {
  input: DeleteUserByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserWatchStatusArgs = {
  input: DeleteUserWatchStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserWatchStatusByNodeIdArgs = {
  input: DeleteUserWatchStatusByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertAnimeToUserListArgs = {
  input: InsertAnimeToUserListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertOrUpdateAnimeUserScoreArgs = {
  input: InsertOrUpdateAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterUserArgs = {
  input: RegisterUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAgeRatingTypeArgs = {
  input: UpdateAgeRatingTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAgeRatingTypeByAgeRatingTypeArgs = {
  input: UpdateAgeRatingTypeByAgeRatingTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAgeRatingTypeByNodeIdArgs = {
  input: UpdateAgeRatingTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAiringStatusTypeArgs = {
  input: UpdateAiringStatusTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAiringStatusTypeByAiringStatusTypeArgs = {
  input: UpdateAiringStatusTypeByAiringStatusTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAiringStatusTypeByNodeIdArgs = {
  input: UpdateAiringStatusTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAlternateAnimeNameArgs = {
  input: UpdateAlternateAnimeNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAlternateAnimeNameByNodeIdArgs = {
  input: UpdateAlternateAnimeNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeArgs = {
  input: UpdateAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeByMalIdArgs = {
  input: UpdateAnimeByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeByNodeIdArgs = {
  input: UpdateAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonIdArgs = {
  input: UpdateAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeGenreArgs = {
  input: UpdateAnimeGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeGenreByNodeIdArgs = {
  input: UpdateAnimeGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeImageArgs = {
  input: UpdateAnimeImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeImageByNodeIdArgs = {
  input: UpdateAnimeImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeLicensorArgs = {
  input: UpdateAnimeLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeLicensorByNodeIdArgs = {
  input: UpdateAnimeLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeListArgs = {
  input: UpdateAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeListByNodeIdArgs = {
  input: UpdateAnimeListByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeListByUserIdAndTitleArgs = {
  input: UpdateAnimeListByUserIdAndTitleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeProducerArgs = {
  input: UpdateAnimeProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeProducerByNodeIdArgs = {
  input: UpdateAnimeProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStaffArgs = {
  input: UpdateAnimeStaffInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStaffByNodeIdArgs = {
  input: UpdateAnimeStaffByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStudioArgs = {
  input: UpdateAnimeStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStudioByNodeIdArgs = {
  input: UpdateAnimeStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeUserScoreArgs = {
  input: UpdateAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeUserScoreByNodeIdArgs = {
  input: UpdateAnimeUserScoreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterArgs = {
  input: UpdateCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterByMalIdArgs = {
  input: UpdateCharacterByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterByNodeIdArgs = {
  input: UpdateCharacterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterImageArgs = {
  input: UpdateCharacterImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterImageByNodeIdArgs = {
  input: UpdateCharacterImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterRoleArgs = {
  input: UpdateCharacterRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterRoleByNodeIdArgs = {
  input: UpdateCharacterRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterRoleByRoleArgs = {
  input: UpdateCharacterRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateGenreArgs = {
  input: UpdateGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateGenreByGenreArgs = {
  input: UpdateGenreByGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateGenreByNodeIdArgs = {
  input: UpdateGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateImageArgs = {
  input: UpdateImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateImageByNodeIdArgs = {
  input: UpdateImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLanguageArgs = {
  input: UpdateLanguageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLanguageByLanguageArgs = {
  input: UpdateLanguageByLanguageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLanguageByNodeIdArgs = {
  input: UpdateLanguageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLicensorArgs = {
  input: UpdateLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLicensorByLicensorArgs = {
  input: UpdateLicensorByLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLicensorByNodeIdArgs = {
  input: UpdateLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateMediaTypeArgs = {
  input: UpdateMediaTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateMediaTypeByMediaTypeArgs = {
  input: UpdateMediaTypeByMediaTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateMediaTypeByNodeIdArgs = {
  input: UpdateMediaTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonArgs = {
  input: UpdatePersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonByMalIdArgs = {
  input: UpdatePersonByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonByNodeIdArgs = {
  input: UpdatePersonByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonImageArgs = {
  input: UpdatePersonImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonImageByNodeIdArgs = {
  input: UpdatePersonImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProducerArgs = {
  input: UpdateProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProducerByNodeIdArgs = {
  input: UpdateProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProducerByProducerArgs = {
  input: UpdateProducerByProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSeasonArgs = {
  input: UpdateSeasonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSeasonByNodeIdArgs = {
  input: UpdateSeasonByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSeasonBySeasonArgs = {
  input: UpdateSeasonBySeasonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSourceMaterialTypeArgs = {
  input: UpdateSourceMaterialTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSourceMaterialTypeByNodeIdArgs = {
  input: UpdateSourceMaterialTypeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSourceMaterialTypeBySourceMaterialTypeArgs = {
  input: UpdateSourceMaterialTypeBySourceMaterialTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStaffRoleArgs = {
  input: UpdateStaffRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStaffRoleByNodeIdArgs = {
  input: UpdateStaffRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStaffRoleByRoleArgs = {
  input: UpdateStaffRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStudioArgs = {
  input: UpdateStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStudioByNodeIdArgs = {
  input: UpdateStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStudioByStudioArgs = {
  input: UpdateStudioByStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserAnimeArgs = {
  input: UpdateUserAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserAnimeByNodeIdArgs = {
  input: UpdateUserAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserAnimeListByAnimeListIdAndAnimeIdArgs = {
  input: UpdateUserAnimeListByAnimeListIdAndAnimeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserByNodeIdArgs = {
  input: UpdateUserByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserWatchStatusArgs = {
  input: UpdateUserWatchStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserWatchStatusByNodeIdArgs = {
  input: UpdateUserWatchStatusByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAgeRatingTypeArgs = {
  input: UpsertAgeRatingTypeInput;
  where?: Maybe<UpsertAgeRatingTypeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAiringStatusTypeArgs = {
  input: UpsertAiringStatusTypeInput;
  where?: Maybe<UpsertAiringStatusTypeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAlternateAnimeNameArgs = {
  input: UpsertAlternateAnimeNameInput;
  where?: Maybe<UpsertAlternateAnimeNameWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeArgs = {
  input: UpsertAnimeInput;
  where?: Maybe<UpsertAnimeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeCharacterArgs = {
  input: UpsertAnimeCharacterInput;
  where?: Maybe<UpsertAnimeCharacterWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeGenreArgs = {
  input: UpsertAnimeGenreInput;
  where?: Maybe<UpsertAnimeGenreWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeImageArgs = {
  input: UpsertAnimeImageInput;
  where?: Maybe<UpsertAnimeImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeLicensorArgs = {
  input: UpsertAnimeLicensorInput;
  where?: Maybe<UpsertAnimeLicensorWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeListArgs = {
  input: UpsertAnimeListInput;
  where?: Maybe<UpsertAnimeListWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeProducerArgs = {
  input: UpsertAnimeProducerInput;
  where?: Maybe<UpsertAnimeProducerWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeStaffArgs = {
  input: UpsertAnimeStaffInput;
  where?: Maybe<UpsertAnimeStaffWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeStudioArgs = {
  input: UpsertAnimeStudioInput;
  where?: Maybe<UpsertAnimeStudioWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeUserScoreArgs = {
  input: UpsertAnimeUserScoreInput;
  where?: Maybe<UpsertAnimeUserScoreWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertCharacterArgs = {
  input: UpsertCharacterInput;
  where?: Maybe<UpsertCharacterWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertCharacterImageArgs = {
  input: UpsertCharacterImageInput;
  where?: Maybe<UpsertCharacterImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertCharacterRoleArgs = {
  input: UpsertCharacterRoleInput;
  where?: Maybe<UpsertCharacterRoleWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertGenreArgs = {
  input: UpsertGenreInput;
  where?: Maybe<UpsertGenreWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertImageArgs = {
  input: UpsertImageInput;
  where?: Maybe<UpsertImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertLanguageArgs = {
  input: UpsertLanguageInput;
  where?: Maybe<UpsertLanguageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertLicensorArgs = {
  input: UpsertLicensorInput;
  where?: Maybe<UpsertLicensorWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertMediaTypeArgs = {
  input: UpsertMediaTypeInput;
  where?: Maybe<UpsertMediaTypeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertPersonArgs = {
  input: UpsertPersonInput;
  where?: Maybe<UpsertPersonWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertPersonImageArgs = {
  input: UpsertPersonImageInput;
  where?: Maybe<UpsertPersonImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertProducerArgs = {
  input: UpsertProducerInput;
  where?: Maybe<UpsertProducerWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertSeasonArgs = {
  input: UpsertSeasonInput;
  where?: Maybe<UpsertSeasonWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertSourceMaterialTypeArgs = {
  input: UpsertSourceMaterialTypeInput;
  where?: Maybe<UpsertSourceMaterialTypeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertStaffRoleArgs = {
  input: UpsertStaffRoleInput;
  where?: Maybe<UpsertStaffRoleWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertStudioArgs = {
  input: UpsertStudioInput;
  where?: Maybe<UpsertStudioWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserArgs = {
  input: UpsertUserInput;
  where?: Maybe<UpsertUserWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserAnimeArgs = {
  input: UpsertUserAnimeInput;
  where?: Maybe<UpsertUserAnimeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserAnimeListArgs = {
  input: UpsertUserAnimeListInput;
  where?: Maybe<UpsertUserAnimeListWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserWatchStatusArgs = {
  input: UpsertUserWatchStatusInput;
  where?: Maybe<UpsertUserWatchStatusWhere>;
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
};

/** A connection to a list of `Person` values. */
export type PeopleConnection = {
  __typename?: 'PeopleConnection';
  /** A list of edges which contains the `Person` and cursor to aid in pagination. */
  edges: Array<PeopleEdge>;
  /** A list of `Person` objects. */
  nodes: Array<Maybe<Person>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Person` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Person` edge in the connection. */
export type PeopleEdge = {
  __typename?: 'PeopleEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Person` at the end of the edge. */
  node?: Maybe<Person>;
};

/** Methods to use when ordering `Person`. */
export enum PeopleOrderBy {
  AlternateNamesAsc = 'ALTERNATE_NAMES_ASC',
  AlternateNamesDesc = 'ALTERNATE_NAMES_DESC',
  AnimeCharactersByPersonIdCountAsc = 'ANIME_CHARACTERS_BY_PERSON_ID__COUNT_ASC',
  AnimeCharactersByPersonIdCountDesc = 'ANIME_CHARACTERS_BY_PERSON_ID__COUNT_DESC',
  AnimeStaffByPersonIdCountAsc = 'ANIME_STAFF_BY_PERSON_ID__COUNT_ASC',
  AnimeStaffByPersonIdCountDesc = 'ANIME_STAFF_BY_PERSON_ID__COUNT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ImageByPersonImageIdIdAsc = 'IMAGE_BY_PERSON_IMAGE_ID__ID_ASC',
  ImageByPersonImageIdIdDesc = 'IMAGE_BY_PERSON_IMAGE_ID__ID_DESC',
  ImageByPersonImageIdTitleAsc = 'IMAGE_BY_PERSON_IMAGE_ID__TITLE_ASC',
  ImageByPersonImageIdTitleDesc = 'IMAGE_BY_PERSON_IMAGE_ID__TITLE_DESC',
  ImageByPersonImageIdUrlAsc = 'IMAGE_BY_PERSON_IMAGE_ID__URL_ASC',
  ImageByPersonImageIdUrlDesc = 'IMAGE_BY_PERSON_IMAGE_ID__URL_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  MalIdAsc = 'MAL_ID_ASC',
  MalIdDesc = 'MAL_ID_DESC',
  NativeNameAsc = 'NATIVE_NAME_ASC',
  NativeNameDesc = 'NATIVE_NAME_DESC',
  Natural = 'NATURAL',
  PersonImagesByPersonIdCountAsc = 'PERSON_IMAGES_BY_PERSON_ID__COUNT_ASC',
  PersonImagesByPersonIdCountDesc = 'PERSON_IMAGES_BY_PERSON_ID__COUNT_DESC',
  PersonImageIdAsc = 'PERSON_IMAGE_ID_ASC',
  PersonImageIdDesc = 'PERSON_IMAGE_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Person = Node & {
  __typename?: 'Person';
  alternateNames?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs: AnimeStaffConnection;
  description?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  id: Scalars['UUID'];
  lastName?: Maybe<Scalars['String']>;
  malId?: Maybe<Scalars['String']>;
  nativeName?: Maybe<Scalars['String']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Reads and enables pagination through a set of `PersonImage`. */
  personImages: PersonImagesConnection;
};


export type PersonAnimeCharactersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCharacterCondition>;
  filter?: Maybe<AnimeCharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};


export type PersonAnimeStaffsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeStaffCondition>;
  filter?: Maybe<AnimeStaffFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};


export type PersonPersonImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<PersonImageCondition>;
  filter?: Maybe<PersonImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonImagesOrderBy>>;
};

/** A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PersonCondition = {
  /** Checks for equality with the object’s `alternateNames` field. */
  alternateNames?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `malId` field. */
  malId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `nativeName` field. */
  nativeName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `personImageId` field. */
  personImageId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `Person` object types. All fields are combined with a logical ‘and.’ */
export type PersonFilter = {
  /** Filter by the object’s `alternateNames` field. */
  alternateNames?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonFilter>>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: Maybe<StringFilter>;
  /** Filter by the object’s `nativeName` field. */
  nativeName?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<PersonFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonFilter>>;
  /** Filter by the object’s `personImageId` field. */
  personImageId?: Maybe<UuidFilter>;
};

export type PersonImage = Node & {
  __typename?: 'PersonImage';
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  imageId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  personId: Scalars['UUID'];
};

/**
 * A condition to be used against `PersonImage` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type PersonImageCondition = {
  /** Checks for equality with the object’s `imageId` field. */
  imageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personId` field. */
  personId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `PersonImage` object types. All fields are combined with a logical ‘and.’ */
export type PersonImageFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonImageFilter>>;
  /** Filter by the object’s `imageId` field. */
  imageId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<PersonImageFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonImageFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<UuidFilter>;
};

/** An input for mutations affecting `PersonImage` */
export type PersonImageInput = {
  imageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};

/** Represents an update to a `PersonImage`. Fields that are set will be updated. */
export type PersonImagePatch = {
  imageId?: Maybe<Scalars['UUID']>;
  personId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `PersonImage` values. */
export type PersonImagesConnection = {
  __typename?: 'PersonImagesConnection';
  /** A list of edges which contains the `PersonImage` and cursor to aid in pagination. */
  edges: Array<PersonImagesEdge>;
  /** A list of `PersonImage` objects. */
  nodes: Array<Maybe<PersonImage>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonImage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonImage` edge in the connection. */
export type PersonImagesEdge = {
  __typename?: 'PersonImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonImage` at the end of the edge. */
  node?: Maybe<PersonImage>;
};

/** Methods to use when ordering `PersonImage`. */
export enum PersonImagesOrderBy {
  ImageByImageIdIdAsc = 'IMAGE_BY_IMAGE_ID__ID_ASC',
  ImageByImageIdIdDesc = 'IMAGE_BY_IMAGE_ID__ID_DESC',
  ImageByImageIdTitleAsc = 'IMAGE_BY_IMAGE_ID__TITLE_ASC',
  ImageByImageIdTitleDesc = 'IMAGE_BY_IMAGE_ID__TITLE_DESC',
  ImageByImageIdUrlAsc = 'IMAGE_BY_IMAGE_ID__URL_ASC',
  ImageByImageIdUrlDesc = 'IMAGE_BY_IMAGE_ID__URL_DESC',
  ImageIdAsc = 'IMAGE_ID_ASC',
  ImageIdDesc = 'IMAGE_ID_DESC',
  Natural = 'NATURAL',
  PersonByPersonIdAlternateNamesAsc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_ASC',
  PersonByPersonIdAlternateNamesDesc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_DESC',
  PersonByPersonIdDescriptionAsc = 'PERSON_BY_PERSON_ID__DESCRIPTION_ASC',
  PersonByPersonIdDescriptionDesc = 'PERSON_BY_PERSON_ID__DESCRIPTION_DESC',
  PersonByPersonIdFirstNameAsc = 'PERSON_BY_PERSON_ID__FIRST_NAME_ASC',
  PersonByPersonIdFirstNameDesc = 'PERSON_BY_PERSON_ID__FIRST_NAME_DESC',
  PersonByPersonIdIdAsc = 'PERSON_BY_PERSON_ID__ID_ASC',
  PersonByPersonIdIdDesc = 'PERSON_BY_PERSON_ID__ID_DESC',
  PersonByPersonIdLastNameAsc = 'PERSON_BY_PERSON_ID__LAST_NAME_ASC',
  PersonByPersonIdLastNameDesc = 'PERSON_BY_PERSON_ID__LAST_NAME_DESC',
  PersonByPersonIdMalIdAsc = 'PERSON_BY_PERSON_ID__MAL_ID_ASC',
  PersonByPersonIdMalIdDesc = 'PERSON_BY_PERSON_ID__MAL_ID_DESC',
  PersonByPersonIdNativeNameAsc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_ASC',
  PersonByPersonIdNativeNameDesc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_DESC',
  PersonByPersonIdPersonImageIdAsc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_ASC',
  PersonByPersonIdPersonImageIdDesc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_DESC',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** An input for mutations affecting `Person` */
export type PersonInput = {
  alternateNames?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  id?: Maybe<Scalars['UUID']>;
  lastName?: Maybe<Scalars['String']>;
  malId?: Maybe<Scalars['String']>;
  nativeName?: Maybe<Scalars['String']>;
  personImageId?: Maybe<Scalars['UUID']>;
};

/** Represents an update to a `Person`. Fields that are set will be updated. */
export type PersonPatch = {
  alternateNames?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
  lastName?: Maybe<Scalars['String']>;
  malId?: Maybe<Scalars['String']>;
  nativeName?: Maybe<Scalars['String']>;
  personImageId?: Maybe<Scalars['UUID']>;
};

export type Producer = Node & {
  __typename?: 'Producer';
  /** Reads and enables pagination through a set of `AnimeProducer`. */
  animeProducers: AnimeProducersConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  producer: Scalars['String'];
};


export type ProducerAnimeProducersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeProducerCondition>;
  filter?: Maybe<AnimeProducerFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeProducersOrderBy>>;
};

/**
 * A condition to be used against `Producer` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type ProducerCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `producer` field. */
  producer?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Producer` object types. All fields are combined with a logical ‘and.’ */
export type ProducerFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ProducerFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<ProducerFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ProducerFilter>>;
  /** Filter by the object’s `producer` field. */
  producer?: Maybe<StringFilter>;
};

/** An input for mutations affecting `Producer` */
export type ProducerInput = {
  id?: Maybe<Scalars['UUID']>;
  producer: Scalars['String'];
};

/** Represents an update to a `Producer`. Fields that are set will be updated. */
export type ProducerPatch = {
  id?: Maybe<Scalars['UUID']>;
  producer?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Producer` values. */
export type ProducersConnection = {
  __typename?: 'ProducersConnection';
  /** A list of edges which contains the `Producer` and cursor to aid in pagination. */
  edges: Array<ProducersEdge>;
  /** A list of `Producer` objects. */
  nodes: Array<Maybe<Producer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Producer` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Producer` edge in the connection. */
export type ProducersEdge = {
  __typename?: 'ProducersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Producer` at the end of the edge. */
  node?: Maybe<Producer>;
};

/** Methods to use when ordering `Producer`. */
export enum ProducersOrderBy {
  AnimeProducersByProducerIdCountAsc = 'ANIME_PRODUCERS_BY_PRODUCER_ID__COUNT_ASC',
  AnimeProducersByProducerIdCountDesc = 'ANIME_PRODUCERS_BY_PRODUCER_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProducerAsc = 'PRODUCER_ASC',
  ProducerDesc = 'PRODUCER_DESC'
}

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  __typename?: 'Query';
  ageRatingType?: Maybe<AgeRatingType>;
  ageRatingTypeByAgeRatingType?: Maybe<AgeRatingType>;
  /** Reads a single `AgeRatingType` using its globally unique `ID`. */
  ageRatingTypeByNodeId?: Maybe<AgeRatingType>;
  /** Reads and enables pagination through a set of `AgeRatingType`. */
  ageRatingTypes?: Maybe<AgeRatingTypesConnection>;
  airingStatusType?: Maybe<AiringStatusType>;
  airingStatusTypeByAiringStatusType?: Maybe<AiringStatusType>;
  /** Reads a single `AiringStatusType` using its globally unique `ID`. */
  airingStatusTypeByNodeId?: Maybe<AiringStatusType>;
  /** Reads and enables pagination through a set of `AiringStatusType`. */
  airingStatusTypes?: Maybe<AiringStatusTypesConnection>;
  /** Reads and enables pagination through a set of `AllAnimesTile`. */
  allAnimesTiles?: Maybe<AllAnimesTilesConnection>;
  /** Reads and enables pagination through a set of `AllUserAnime`. */
  allUserAnimes?: Maybe<AllUserAnimeConnection>;
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** Reads a single `AlternateAnimeName` using its globally unique `ID`. */
  alternateAnimeNameByNodeId?: Maybe<AlternateAnimeName>;
  /** Reads and enables pagination through a set of `AlternateAnimeName`. */
  alternateAnimeNames?: Maybe<AlternateAnimeNamesConnection>;
  anime?: Maybe<Anime>;
  animeByMalId?: Maybe<Anime>;
  /** Reads a single `Anime` using its globally unique `ID`. */
  animeByNodeId?: Maybe<Anime>;
  animeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId?: Maybe<AnimeCharacter>;
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters?: Maybe<AnimeCharactersConnection>;
  animeGenre?: Maybe<AnimeGenre>;
  /** Reads a single `AnimeGenre` using its globally unique `ID`. */
  animeGenreByNodeId?: Maybe<AnimeGenre>;
  /** Reads and enables pagination through a set of `AnimeGenre`. */
  animeGenres?: Maybe<AnimeGenresConnection>;
  animeImage?: Maybe<AnimeImage>;
  /** Reads a single `AnimeImage` using its globally unique `ID`. */
  animeImageByNodeId?: Maybe<AnimeImage>;
  /** Reads and enables pagination through a set of `AnimeImage`. */
  animeImages?: Maybe<AnimeImagesConnection>;
  /** Reads and enables pagination through a set of `AnimeInfo`. */
  animeInfos?: Maybe<AnimeInfosConnection>;
  animeLicensor?: Maybe<AnimeLicensor>;
  /** Reads a single `AnimeLicensor` using its globally unique `ID`. */
  animeLicensorByNodeId?: Maybe<AnimeLicensor>;
  /** Reads and enables pagination through a set of `AnimeLicensor`. */
  animeLicensors?: Maybe<AnimeLicensorsConnection>;
  animeList?: Maybe<AnimeList>;
  /** Reads a single `AnimeList` using its globally unique `ID`. */
  animeListByNodeId?: Maybe<AnimeList>;
  animeListByUserIdAndTitle?: Maybe<AnimeList>;
  /** Reads and enables pagination through a set of `AnimeList`. */
  animeLists?: Maybe<AnimeListsConnection>;
  animeProducer?: Maybe<AnimeProducer>;
  /** Reads a single `AnimeProducer` using its globally unique `ID`. */
  animeProducerByNodeId?: Maybe<AnimeProducer>;
  /** Reads and enables pagination through a set of `AnimeProducer`. */
  animeProducers?: Maybe<AnimeProducersConnection>;
  animeStaff?: Maybe<AnimeStaff>;
  /** Reads a single `AnimeStaff` using its globally unique `ID`. */
  animeStaffByNodeId?: Maybe<AnimeStaff>;
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs?: Maybe<AnimeStaffConnection>;
  animeStudio?: Maybe<AnimeStudio>;
  /** Reads a single `AnimeStudio` using its globally unique `ID`. */
  animeStudioByNodeId?: Maybe<AnimeStudio>;
  /** Reads and enables pagination through a set of `AnimeStudio`. */
  animeStudios?: Maybe<AnimeStudiosConnection>;
  animeUserScore?: Maybe<AnimeUserScore>;
  /** Reads a single `AnimeUserScore` using its globally unique `ID`. */
  animeUserScoreByNodeId?: Maybe<AnimeUserScore>;
  /** Reads and enables pagination through a set of `AnimeUserScore`. */
  animeUserScores?: Maybe<AnimeUserScoresConnection>;
  /** Reads and enables pagination through a set of `Anime`. */
  animes?: Maybe<AnimeConnection>;
  character?: Maybe<Character>;
  /** Reads and enables pagination through a set of `CharacterAnimePreview`. */
  characterAnimePreviews?: Maybe<CharacterAnimePreviewsConnection>;
  /** Reads and enables pagination through a set of `CharacterByAnime`. */
  characterByAnimes?: Maybe<CharacterByAnimeConnection>;
  characterByMalId?: Maybe<Character>;
  /** Reads a single `Character` using its globally unique `ID`. */
  characterByNodeId?: Maybe<Character>;
  characterImage?: Maybe<CharacterImage>;
  /** Reads a single `CharacterImage` using its globally unique `ID`. */
  characterImageByNodeId?: Maybe<CharacterImage>;
  /** Reads and enables pagination through a set of `CharacterImage`. */
  characterImages?: Maybe<CharacterImagesConnection>;
  characterRole?: Maybe<CharacterRole>;
  /** Reads a single `CharacterRole` using its globally unique `ID`. */
  characterRoleByNodeId?: Maybe<CharacterRole>;
  characterRoleByRole?: Maybe<CharacterRole>;
  /** Reads and enables pagination through a set of `CharacterRole`. */
  characterRoles?: Maybe<CharacterRolesConnection>;
  /** Reads and enables pagination through a set of `Character`. */
  characters?: Maybe<CharactersConnection>;
  currentRole?: Maybe<Scalars['String']>;
  currentUser?: Maybe<Scalars['String']>;
  genre?: Maybe<Genre>;
  genreByGenre?: Maybe<Genre>;
  /** Reads a single `Genre` using its globally unique `ID`. */
  genreByNodeId?: Maybe<Genre>;
  /** Reads and enables pagination through a set of `Genre`. */
  genres?: Maybe<GenresConnection>;
  getUser?: Maybe<SmallUser>;
  /** Reads and enables pagination through a set of `UserList`. */
  getUserAnimeLists?: Maybe<UserListsConnection>;
  image?: Maybe<Image>;
  /** Reads a single `Image` using its globally unique `ID`. */
  imageByNodeId?: Maybe<Image>;
  /** Reads and enables pagination through a set of `Image`. */
  images?: Maybe<ImagesConnection>;
  language?: Maybe<Language>;
  languageByLanguage?: Maybe<Language>;
  /** Reads a single `Language` using its globally unique `ID`. */
  languageByNodeId?: Maybe<Language>;
  /** Reads and enables pagination through a set of `Language`. */
  languages?: Maybe<LanguagesConnection>;
  licensor?: Maybe<Licensor>;
  licensorByLicensor?: Maybe<Licensor>;
  /** Reads a single `Licensor` using its globally unique `ID`. */
  licensorByNodeId?: Maybe<Licensor>;
  /** Reads and enables pagination through a set of `Licensor`. */
  licensors?: Maybe<LicensorsConnection>;
  mediaType?: Maybe<MediaType>;
  mediaTypeByMediaType?: Maybe<MediaType>;
  /** Reads a single `MediaType` using its globally unique `ID`. */
  mediaTypeByNodeId?: Maybe<MediaType>;
  /** Reads and enables pagination through a set of `MediaType`. */
  mediaTypes?: Maybe<MediaTypesConnection>;
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID'];
  /** Reads and enables pagination through a set of `Person`. */
  people?: Maybe<PeopleConnection>;
  person?: Maybe<Person>;
  personByMalId?: Maybe<Person>;
  /** Reads a single `Person` using its globally unique `ID`. */
  personByNodeId?: Maybe<Person>;
  personImage?: Maybe<PersonImage>;
  /** Reads a single `PersonImage` using its globally unique `ID`. */
  personImageByNodeId?: Maybe<PersonImage>;
  /** Reads and enables pagination through a set of `PersonImage`. */
  personImages?: Maybe<PersonImagesConnection>;
  producer?: Maybe<Producer>;
  /** Reads a single `Producer` using its globally unique `ID`. */
  producerByNodeId?: Maybe<Producer>;
  producerByProducer?: Maybe<Producer>;
  /** Reads and enables pagination through a set of `Producer`. */
  producers?: Maybe<ProducersConnection>;
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  season?: Maybe<Season>;
  /** Reads a single `Season` using its globally unique `ID`. */
  seasonByNodeId?: Maybe<Season>;
  seasonBySeason?: Maybe<Season>;
  /** Reads and enables pagination through a set of `Season`. */
  seasons?: Maybe<SeasonsConnection>;
  sourceMaterialType?: Maybe<SourceMaterialType>;
  /** Reads a single `SourceMaterialType` using its globally unique `ID`. */
  sourceMaterialTypeByNodeId?: Maybe<SourceMaterialType>;
  sourceMaterialTypeBySourceMaterialType?: Maybe<SourceMaterialType>;
  /** Reads and enables pagination through a set of `SourceMaterialType`. */
  sourceMaterialTypes?: Maybe<SourceMaterialTypesConnection>;
  staffRole?: Maybe<StaffRole>;
  /** Reads a single `StaffRole` using its globally unique `ID`. */
  staffRoleByNodeId?: Maybe<StaffRole>;
  staffRoleByRole?: Maybe<StaffRole>;
  /** Reads and enables pagination through a set of `StaffRole`. */
  staffRoles?: Maybe<StaffRolesConnection>;
  studio?: Maybe<Studio>;
  /** Reads a single `Studio` using its globally unique `ID`. */
  studioByNodeId?: Maybe<Studio>;
  studioByStudio?: Maybe<Studio>;
  /** Reads and enables pagination through a set of `Studio`. */
  studios?: Maybe<StudiosConnection>;
  user?: Maybe<User>;
  userAnime?: Maybe<UserAnime>;
  /** Reads a single `UserAnime` using its globally unique `ID`. */
  userAnimeByNodeId?: Maybe<UserAnime>;
  userAnimeListByAnimeListIdAndAnimeId?: Maybe<UserAnimeList>;
  /** Reads and enables pagination through a set of `UserAnimeList`. */
  userAnimeLists?: Maybe<UserAnimeListsConnection>;
  /** Reads and enables pagination through a set of `UserAnime`. */
  userAnimes?: Maybe<UserAnimeConnection>;
  /** Reads a single `User` using its globally unique `ID`. */
  userByNodeId?: Maybe<User>;
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** Reads a single `UserWatchStatus` using its globally unique `ID`. */
  userWatchStatusByNodeId?: Maybe<UserWatchStatus>;
  /** Reads and enables pagination through a set of `UserWatchStatus`. */
  userWatchStatuses?: Maybe<UserWatchStatusesConnection>;
  /** Reads and enables pagination through a set of `User`. */
  users?: Maybe<UsersConnection>;
  /** Reads and enables pagination through a set of `VoiceActor`. */
  voiceActors?: Maybe<VoiceActorsConnection>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAgeRatingTypeArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAgeRatingTypeByAgeRatingTypeArgs = {
  ageRatingType: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAgeRatingTypeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAgeRatingTypesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AgeRatingTypeCondition>;
  filter?: Maybe<AgeRatingTypeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AgeRatingTypesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAiringStatusTypeArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAiringStatusTypeByAiringStatusTypeArgs = {
  airingStatusType: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAiringStatusTypeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAiringStatusTypesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AiringStatusTypeCondition>;
  filter?: Maybe<AiringStatusTypeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AiringStatusTypesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAllAnimesTilesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AllAnimesTileCondition>;
  filter?: Maybe<AllAnimesTileFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AllAnimesTilesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAllUserAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AllUserAnimeCondition>;
  filter?: Maybe<AllUserAnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AllUserAnimeOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAlternateAnimeNameArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAlternateAnimeNameByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAlternateAnimeNamesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AlternateAnimeNameCondition>;
  filter?: Maybe<AlternateAnimeNameFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AlternateAnimeNamesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeByMalIdArgs = {
  malId: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonIdArgs = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  languageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeCharactersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCharacterCondition>;
  filter?: Maybe<AnimeCharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeGenreArgs = {
  animeId: Scalars['UUID'];
  genreId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeGenreByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeGenresArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeGenreCondition>;
  filter?: Maybe<AnimeGenreFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeGenresOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeImageArgs = {
  animeId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeImageCondition>;
  filter?: Maybe<AnimeImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeInfosArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeInfoCondition>;
  filter?: Maybe<AnimeInfoFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeInfosOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeLicensorArgs = {
  animeId: Scalars['UUID'];
  licensorId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeLicensorByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeLicensorsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeLicensorCondition>;
  filter?: Maybe<AnimeLicensorFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeLicensorsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeListArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeListByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeListByUserIdAndTitleArgs = {
  title: Scalars['String'];
  userId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeListsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeListCondition>;
  filter?: Maybe<AnimeListFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeProducerArgs = {
  animeId: Scalars['UUID'];
  producerId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeProducerByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeProducersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeProducerCondition>;
  filter?: Maybe<AnimeProducerFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeProducersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStaffArgs = {
  animeId: Scalars['UUID'];
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStaffByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStaffsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeStaffCondition>;
  filter?: Maybe<AnimeStaffFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStudioArgs = {
  animeId: Scalars['UUID'];
  studioId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStudioByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStudiosArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeStudioCondition>;
  filter?: Maybe<AnimeStudioFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeStudiosOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeUserScoreArgs = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeUserScoreByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeUserScoresArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeUserScoreCondition>;
  filter?: Maybe<AnimeUserScoreFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCondition>;
  filter?: Maybe<AnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterAnimePreviewsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterAnimePreviewCondition>;
  filter?: Maybe<CharacterAnimePreviewFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharacterAnimePreviewsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterByAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterByAnimeCondition>;
  filter?: Maybe<CharacterByAnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharacterByAnimeOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterByMalIdArgs = {
  malId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterImageArgs = {
  characterId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterImageCondition>;
  filter?: Maybe<CharacterImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharacterImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRoleArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRoleByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRoleByRoleArgs = {
  role: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRolesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterRoleCondition>;
  filter?: Maybe<CharacterRoleFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharacterRolesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharactersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<CharacterCondition>;
  filter?: Maybe<CharacterFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CharactersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGenreArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGenreByGenreArgs = {
  genre: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGenreByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGenresArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<GenreCondition>;
  filter?: Maybe<GenreFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GenresOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetUserArgs = {
  uId?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetUserAnimeListsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<UserListFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  watchStatusInput?: Maybe<WatchingStatusEnum>;
};


/** The root query type which gives access points into the data universe. */
export type QueryImageArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<ImageCondition>;
  filter?: Maybe<ImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryLanguageArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLanguageByLanguageArgs = {
  language: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLanguageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLanguagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<LanguageCondition>;
  filter?: Maybe<LanguageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<LanguagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorByLicensorArgs = {
  licensor: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<LicensorCondition>;
  filter?: Maybe<LicensorFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<LicensorsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaTypeArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaTypeByMediaTypeArgs = {
  mediaType: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaTypeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaTypesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<MediaTypeCondition>;
  filter?: Maybe<MediaTypeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPeopleArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<PersonCondition>;
  filter?: Maybe<PersonFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PeopleOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonByMalIdArgs = {
  malId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonImageArgs = {
  imageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonImagesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<PersonImageCondition>;
  filter?: Maybe<PersonImageFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryProducerArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProducerByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProducerByProducerArgs = {
  producer: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProducersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<ProducerCondition>;
  filter?: Maybe<ProducerFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ProducersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySeasonArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySeasonByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySeasonBySeasonArgs = {
  season: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySeasonsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<SeasonCondition>;
  filter?: Maybe<SeasonFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SeasonsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySourceMaterialTypeArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySourceMaterialTypeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySourceMaterialTypeBySourceMaterialTypeArgs = {
  sourceMaterialType: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySourceMaterialTypesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<SourceMaterialTypeCondition>;
  filter?: Maybe<SourceMaterialTypeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SourceMaterialTypesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRoleArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRoleByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRoleByRoleArgs = {
  role: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRolesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<StaffRoleCondition>;
  filter?: Maybe<StaffRoleFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<StaffRolesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStudioArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStudioByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStudioByStudioArgs = {
  studio: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStudiosArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<StudioCondition>;
  filter?: Maybe<StudioFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<StudiosOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserArgs = {
  id: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeArgs = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeListByAnimeListIdAndAnimeIdArgs = {
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeListsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserAnimeListCondition>;
  filter?: Maybe<UserAnimeListFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserAnimeCondition>;
  filter?: Maybe<UserAnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserAnimeOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserWatchStatusArgs = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserWatchStatusByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserWatchStatusesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserWatchStatusCondition>;
  filter?: Maybe<UserWatchStatusFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserWatchStatusesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUsersArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserCondition>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UsersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryVoiceActorsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<VoiceActorCondition>;
  filter?: Maybe<VoiceActorFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<VoiceActorsOrderBy>>;
};

/** All input for the `registerUser` mutation. */
export type RegisterUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  userId: Scalars['String'];
  username: Scalars['String'];
};

/** The output of our `registerUser` mutation. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our `registerUser` mutation. */
export type RegisterUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

export type Season = Node & {
  __typename?: 'Season';
  /** Reads and enables pagination through a set of `Anime`. */
  animes: AnimeConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  season: Scalars['String'];
};


export type SeasonAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCondition>;
  filter?: Maybe<AnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/** A condition to be used against `Season` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type SeasonCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `season` field. */
  season?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Season` object types. All fields are combined with a logical ‘and.’ */
export type SeasonFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SeasonFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<SeasonFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SeasonFilter>>;
  /** Filter by the object’s `season` field. */
  season?: Maybe<StringFilter>;
};

/** An input for mutations affecting `Season` */
export type SeasonInput = {
  id?: Maybe<Scalars['UUID']>;
  season: Scalars['String'];
};

/** Represents an update to a `Season`. Fields that are set will be updated. */
export type SeasonPatch = {
  id?: Maybe<Scalars['UUID']>;
  season?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Season` values. */
export type SeasonsConnection = {
  __typename?: 'SeasonsConnection';
  /** A list of edges which contains the `Season` and cursor to aid in pagination. */
  edges: Array<SeasonsEdge>;
  /** A list of `Season` objects. */
  nodes: Array<Maybe<Season>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Season` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Season` edge in the connection. */
export type SeasonsEdge = {
  __typename?: 'SeasonsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Season` at the end of the edge. */
  node?: Maybe<Season>;
};

/** Methods to use when ordering `Season`. */
export enum SeasonsOrderBy {
  AnimeBySeasonIdCountAsc = 'ANIME_BY_SEASON_ID__COUNT_ASC',
  AnimeBySeasonIdCountDesc = 'ANIME_BY_SEASON_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SeasonAsc = 'SEASON_ASC',
  SeasonDesc = 'SEASON_DESC'
}

export type SmallUser = {
  __typename?: 'SmallUser';
  email?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type SourceMaterialType = Node & {
  __typename?: 'SourceMaterialType';
  /** Reads and enables pagination through a set of `Anime`. */
  animeBySourceMaterialId: AnimeConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  sourceMaterialType: Scalars['String'];
};


export type SourceMaterialTypeAnimeBySourceMaterialIdArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeCondition>;
  filter?: Maybe<AnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/**
 * A condition to be used against `SourceMaterialType` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type SourceMaterialTypeCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `sourceMaterialType` field. */
  sourceMaterialType?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SourceMaterialType` object types. All fields are combined with a logical ‘and.’ */
export type SourceMaterialTypeFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SourceMaterialTypeFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<SourceMaterialTypeFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SourceMaterialTypeFilter>>;
  /** Filter by the object’s `sourceMaterialType` field. */
  sourceMaterialType?: Maybe<StringFilter>;
};

/** An input for mutations affecting `SourceMaterialType` */
export type SourceMaterialTypeInput = {
  id?: Maybe<Scalars['UUID']>;
  sourceMaterialType: Scalars['String'];
};

/** Represents an update to a `SourceMaterialType`. Fields that are set will be updated. */
export type SourceMaterialTypePatch = {
  id?: Maybe<Scalars['UUID']>;
  sourceMaterialType?: Maybe<Scalars['String']>;
};

/** A connection to a list of `SourceMaterialType` values. */
export type SourceMaterialTypesConnection = {
  __typename?: 'SourceMaterialTypesConnection';
  /** A list of edges which contains the `SourceMaterialType` and cursor to aid in pagination. */
  edges: Array<SourceMaterialTypesEdge>;
  /** A list of `SourceMaterialType` objects. */
  nodes: Array<Maybe<SourceMaterialType>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SourceMaterialType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SourceMaterialType` edge in the connection. */
export type SourceMaterialTypesEdge = {
  __typename?: 'SourceMaterialTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SourceMaterialType` at the end of the edge. */
  node?: Maybe<SourceMaterialType>;
};

/** Methods to use when ordering `SourceMaterialType`. */
export enum SourceMaterialTypesOrderBy {
  AnimeBySourceMaterialIdCountAsc = 'ANIME_BY_SOURCE_MATERIAL_ID__COUNT_ASC',
  AnimeBySourceMaterialIdCountDesc = 'ANIME_BY_SOURCE_MATERIAL_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SourceMaterialTypeAsc = 'SOURCE_MATERIAL_TYPE_ASC',
  SourceMaterialTypeDesc = 'SOURCE_MATERIAL_TYPE_DESC'
}

export type StaffResult = {
  __typename?: 'StaffResult';
  actorFirstName?: Maybe<Scalars['String']>;
  actorImage?: Maybe<Scalars['String']>;
  actorLastName?: Maybe<Scalars['String']>;
  animeId?: Maybe<Scalars['String']>;
  characterId?: Maybe<Scalars['String']>;
  characterImage?: Maybe<Scalars['String']>;
  characterName?: Maybe<Scalars['String']>;
  characterRole?: Maybe<Scalars['String']>;
  language?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
};

/** A filter to be used against `StaffResult` object types. All fields are combined with a logical ‘and.’ */
export type StaffResultFilter = {
  /** Filter by the object’s `actorFirstName` field. */
  actorFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `actorImage` field. */
  actorImage?: Maybe<StringFilter>;
  /** Filter by the object’s `actorLastName` field. */
  actorLastName?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<StaffResultFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<StringFilter>;
  /** Filter by the object’s `characterId` field. */
  characterId?: Maybe<StringFilter>;
  /** Filter by the object’s `characterImage` field. */
  characterImage?: Maybe<StringFilter>;
  /** Filter by the object’s `characterName` field. */
  characterName?: Maybe<StringFilter>;
  /** Filter by the object’s `characterRole` field. */
  characterRole?: Maybe<StringFilter>;
  /** Filter by the object’s `language` field. */
  language?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<StaffResultFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<StaffResultFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<StringFilter>;
};

/** A connection to a list of `StaffResult` values. */
export type StaffResultsConnection = {
  __typename?: 'StaffResultsConnection';
  /** A list of edges which contains the `StaffResult` and cursor to aid in pagination. */
  edges: Array<StaffResultsEdge>;
  /** A list of `StaffResult` objects. */
  nodes: Array<Maybe<StaffResult>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StaffResult` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `StaffResult` edge in the connection. */
export type StaffResultsEdge = {
  __typename?: 'StaffResultsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `StaffResult` at the end of the edge. */
  node?: Maybe<StaffResult>;
};

export type StaffRole = Node & {
  __typename?: 'StaffRole';
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs: AnimeStaffConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  role: Scalars['String'];
};


export type StaffRoleAnimeStaffsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeStaffCondition>;
  filter?: Maybe<AnimeStaffFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};

/**
 * A condition to be used against `StaffRole` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type StaffRoleCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `role` field. */
  role?: Maybe<Scalars['String']>;
};

/** A filter to be used against `StaffRole` object types. All fields are combined with a logical ‘and.’ */
export type StaffRoleFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<StaffRoleFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<StaffRoleFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<StaffRoleFilter>>;
  /** Filter by the object’s `role` field. */
  role?: Maybe<StringFilter>;
};

/** An input for mutations affecting `StaffRole` */
export type StaffRoleInput = {
  id?: Maybe<Scalars['UUID']>;
  role: Scalars['String'];
};

/** Represents an update to a `StaffRole`. Fields that are set will be updated. */
export type StaffRolePatch = {
  id?: Maybe<Scalars['UUID']>;
  role?: Maybe<Scalars['String']>;
};

/** A connection to a list of `StaffRole` values. */
export type StaffRolesConnection = {
  __typename?: 'StaffRolesConnection';
  /** A list of edges which contains the `StaffRole` and cursor to aid in pagination. */
  edges: Array<StaffRolesEdge>;
  /** A list of `StaffRole` objects. */
  nodes: Array<Maybe<StaffRole>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StaffRole` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `StaffRole` edge in the connection. */
export type StaffRolesEdge = {
  __typename?: 'StaffRolesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `StaffRole` at the end of the edge. */
  node?: Maybe<StaffRole>;
};

/** Methods to use when ordering `StaffRole`. */
export enum StaffRolesOrderBy {
  AnimeStaffByStaffRoleIdCountAsc = 'ANIME_STAFF_BY_STAFF_ROLE_ID__COUNT_ASC',
  AnimeStaffByStaffRoleIdCountDesc = 'ANIME_STAFF_BY_STAFF_ROLE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RoleAsc = 'ROLE_ASC',
  RoleDesc = 'ROLE_DESC'
}

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['String']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: Maybe<Scalars['String']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: Maybe<Scalars['String']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: Maybe<Scalars['String']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['String']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: Maybe<Scalars['String']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['String']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: Maybe<Scalars['String']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: Maybe<Scalars['String']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['String']>>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: Maybe<Array<Scalars['String']>>;
  /** Contains the specified string (case-sensitive). */
  includes?: Maybe<Scalars['String']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: Maybe<Scalars['String']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['String']>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: Maybe<Scalars['String']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: Maybe<Scalars['String']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: Maybe<Scalars['String']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: Maybe<Scalars['String']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['String']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: Maybe<Scalars['String']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: Maybe<Scalars['String']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: Maybe<Scalars['String']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['String']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: Maybe<Scalars['String']>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['String']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: Maybe<Array<Scalars['String']>>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: Maybe<Scalars['String']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: Maybe<Scalars['String']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: Maybe<Scalars['String']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: Maybe<Scalars['String']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: Maybe<Scalars['String']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: Maybe<Scalars['String']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: Maybe<Scalars['String']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: Maybe<Scalars['String']>;
};

/** A filter to be used against String List fields. All fields are combined with a logical ‘and.’ */
export type StringListFilter = {
  /** Any array item is equal to the specified value. */
  anyEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: Maybe<Scalars['String']>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is less than the specified value. */
  anyLessThan?: Maybe<Scalars['String']>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: Maybe<Scalars['String']>;
  /** Contained by the specified list of values. */
  containedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Contains the specified list of values. */
  contains?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Overlaps the specified list of values. */
  overlaps?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Studio = Node & {
  __typename?: 'Studio';
  /** Reads and enables pagination through a set of `AnimeStudio`. */
  animeStudios: AnimeStudiosConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  studio: Scalars['String'];
};


export type StudioAnimeStudiosArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeStudioCondition>;
  filter?: Maybe<AnimeStudioFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeStudiosOrderBy>>;
};

/** A condition to be used against `Studio` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type StudioCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `studio` field. */
  studio?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Studio` object types. All fields are combined with a logical ‘and.’ */
export type StudioFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<StudioFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<StudioFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<StudioFilter>>;
  /** Filter by the object’s `studio` field. */
  studio?: Maybe<StringFilter>;
};

/** An input for mutations affecting `Studio` */
export type StudioInput = {
  id?: Maybe<Scalars['UUID']>;
  studio: Scalars['String'];
};

/** Represents an update to a `Studio`. Fields that are set will be updated. */
export type StudioPatch = {
  id?: Maybe<Scalars['UUID']>;
  studio?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Studio` values. */
export type StudiosConnection = {
  __typename?: 'StudiosConnection';
  /** A list of edges which contains the `Studio` and cursor to aid in pagination. */
  edges: Array<StudiosEdge>;
  /** A list of `Studio` objects. */
  nodes: Array<Maybe<Studio>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Studio` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Studio` edge in the connection. */
export type StudiosEdge = {
  __typename?: 'StudiosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Studio` at the end of the edge. */
  node?: Maybe<Studio>;
};

/** Methods to use when ordering `Studio`. */
export enum StudiosOrderBy {
  AnimeStudiosByStudioIdCountAsc = 'ANIME_STUDIOS_BY_STUDIO_ID__COUNT_ASC',
  AnimeStudiosByStudioIdCountDesc = 'ANIME_STUDIOS_BY_STUDIO_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StudioAsc = 'STUDIO_ASC',
  StudioDesc = 'STUDIO_DESC'
}

/** A filter to be used against UUID fields. All fields are combined with a logical ‘and.’ */
export type UuidFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['UUID']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['UUID']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['UUID']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['UUID']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['UUID']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['UUID']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['UUID']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['UUID']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['UUID']>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['UUID']>>;
};

/** All input for the `updateAgeRatingTypeByAgeRatingType` mutation. */
export type UpdateAgeRatingTypeByAgeRatingTypeInput = {
  ageRatingType: Scalars['String'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AgeRatingType` being updated. */
  patch: AgeRatingTypePatch;
};

/** All input for the `updateAgeRatingTypeByNodeId` mutation. */
export type UpdateAgeRatingTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AgeRatingType` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AgeRatingType` being updated. */
  patch: AgeRatingTypePatch;
};

/** All input for the `updateAgeRatingType` mutation. */
export type UpdateAgeRatingTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AgeRatingType` being updated. */
  patch: AgeRatingTypePatch;
};

/** The output of our update `AgeRatingType` mutation. */
export type UpdateAgeRatingTypePayload = {
  __typename?: 'UpdateAgeRatingTypePayload';
  /** The `AgeRatingType` that was updated by this mutation. */
  ageRatingType?: Maybe<AgeRatingType>;
  /** An edge for our `AgeRatingType`. May be used by Relay 1. */
  ageRatingTypeEdge?: Maybe<AgeRatingTypesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AgeRatingType` mutation. */
export type UpdateAgeRatingTypePayloadAgeRatingTypeEdgeArgs = {
  orderBy?: Maybe<Array<AgeRatingTypesOrderBy>>;
};

/** All input for the `updateAiringStatusTypeByAiringStatusType` mutation. */
export type UpdateAiringStatusTypeByAiringStatusTypeInput = {
  airingStatusType: Scalars['String'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AiringStatusType` being updated. */
  patch: AiringStatusTypePatch;
};

/** All input for the `updateAiringStatusTypeByNodeId` mutation. */
export type UpdateAiringStatusTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AiringStatusType` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AiringStatusType` being updated. */
  patch: AiringStatusTypePatch;
};

/** All input for the `updateAiringStatusType` mutation. */
export type UpdateAiringStatusTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AiringStatusType` being updated. */
  patch: AiringStatusTypePatch;
};

/** The output of our update `AiringStatusType` mutation. */
export type UpdateAiringStatusTypePayload = {
  __typename?: 'UpdateAiringStatusTypePayload';
  /** The `AiringStatusType` that was updated by this mutation. */
  airingStatusType?: Maybe<AiringStatusType>;
  /** An edge for our `AiringStatusType`. May be used by Relay 1. */
  airingStatusTypeEdge?: Maybe<AiringStatusTypesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AiringStatusType` mutation. */
export type UpdateAiringStatusTypePayloadAiringStatusTypeEdgeArgs = {
  orderBy?: Maybe<Array<AiringStatusTypesOrderBy>>;
};

/** All input for the `updateAlternateAnimeNameByNodeId` mutation. */
export type UpdateAlternateAnimeNameByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AlternateAnimeName` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AlternateAnimeName` being updated. */
  patch: AlternateAnimeNamePatch;
};

/** All input for the `updateAlternateAnimeName` mutation. */
export type UpdateAlternateAnimeNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AlternateAnimeName` being updated. */
  patch: AlternateAnimeNamePatch;
};

/** The output of our update `AlternateAnimeName` mutation. */
export type UpdateAlternateAnimeNamePayload = {
  __typename?: 'UpdateAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was updated by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AlternateAnimeName` mutation. */
export type UpdateAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: Maybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** All input for the `updateAnimeByMalId` mutation. */
export type UpdateAnimeByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  malId: Scalars['Int'];
  /** An object where the defined keys will be set on the `Anime` being updated. */
  patch: AnimePatch;
};

/** All input for the `updateAnimeByNodeId` mutation. */
export type UpdateAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Anime` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Anime` being updated. */
  patch: AnimePatch;
};

/** All input for the `updateAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId` mutation. */
export type UpdateAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonIdInput = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  languageId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeCharacter` being updated. */
  patch: AnimeCharacterPatch;
  personId: Scalars['UUID'];
};

/** The output of our update `AnimeCharacter` mutation. */
export type UpdateAnimeCharacterPayload = {
  __typename?: 'UpdateAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was updated by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Language` that is related to this `AnimeCharacter`. */
  language?: Maybe<Language>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeCharacter` mutation. */
export type UpdateAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};

/** All input for the `updateAnimeGenreByNodeId` mutation. */
export type UpdateAnimeGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeGenre` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeGenre` being updated. */
  patch: AnimeGenrePatch;
};

/** All input for the `updateAnimeGenre` mutation. */
export type UpdateAnimeGenreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genreId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeGenre` being updated. */
  patch: AnimeGenrePatch;
};

/** The output of our update `AnimeGenre` mutation. */
export type UpdateAnimeGenrePayload = {
  __typename?: 'UpdateAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was updated by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeGenre` mutation. */
export type UpdateAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeGenresOrderBy>>;
};

/** All input for the `updateAnimeImageByNodeId` mutation. */
export type UpdateAnimeImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeImage` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeImage` being updated. */
  patch: AnimeImagePatch;
};

/** All input for the `updateAnimeImage` mutation. */
export type UpdateAnimeImageInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeImage` being updated. */
  patch: AnimeImagePatch;
};

/** The output of our update `AnimeImage` mutation. */
export type UpdateAnimeImagePayload = {
  __typename?: 'UpdateAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was updated by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeImage` mutation. */
export type UpdateAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: Maybe<Array<AnimeImagesOrderBy>>;
};

/** All input for the `updateAnime` mutation. */
export type UpdateAnimeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Anime` being updated. */
  patch: AnimePatch;
};

/** All input for the `updateAnimeLicensorByNodeId` mutation. */
export type UpdateAnimeLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeLicensor` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeLicensor` being updated. */
  patch: AnimeLicensorPatch;
};

/** All input for the `updateAnimeLicensor` mutation. */
export type UpdateAnimeLicensorInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  licensorId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeLicensor` being updated. */
  patch: AnimeLicensorPatch;
};

/** The output of our update `AnimeLicensor` mutation. */
export type UpdateAnimeLicensorPayload = {
  __typename?: 'UpdateAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was updated by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeLicensor` mutation. */
export type UpdateAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: Maybe<Array<AnimeLicensorsOrderBy>>;
};

/** All input for the `updateAnimeListByNodeId` mutation. */
export type UpdateAnimeListByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeList` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeList` being updated. */
  patch: AnimeListPatch;
};

/** All input for the `updateAnimeListByUserIdAndTitle` mutation. */
export type UpdateAnimeListByUserIdAndTitleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeList` being updated. */
  patch: AnimeListPatch;
  title: Scalars['String'];
  userId: Scalars['String'];
};

/** All input for the `updateAnimeList` mutation. */
export type UpdateAnimeListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeList` being updated. */
  patch: AnimeListPatch;
};

/** The output of our update `AnimeList` mutation. */
export type UpdateAnimeListPayload = {
  __typename?: 'UpdateAnimeListPayload';
  /** The `AnimeList` that was updated by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our update `AnimeList` mutation. */
export type UpdateAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};

/** The output of our update `Anime` mutation. */
export type UpdateAnimePayload = {
  __typename?: 'UpdateAnimePayload';
  /** Reads a single `AgeRatingType` that is related to this `Anime`. */
  ageRating?: Maybe<AgeRatingType>;
  /** Reads a single `AiringStatusType` that is related to this `Anime`. */
  airingStatus?: Maybe<AiringStatusType>;
  /** The `Anime` that was updated by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `MediaType` that is related to this `Anime`. */
  mediaType?: Maybe<MediaType>;
  /** Reads a single `Image` that is related to this `Anime`. */
  profileImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Season` that is related to this `Anime`. */
  season?: Maybe<Season>;
  /** Reads a single `SourceMaterialType` that is related to this `Anime`. */
  sourceMaterial?: Maybe<SourceMaterialType>;
};


/** The output of our update `Anime` mutation. */
export type UpdateAnimePayloadAnimeEdgeArgs = {
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/** All input for the `updateAnimeProducerByNodeId` mutation. */
export type UpdateAnimeProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeProducer` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeProducer` being updated. */
  patch: AnimeProducerPatch;
};

/** All input for the `updateAnimeProducer` mutation. */
export type UpdateAnimeProducerInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeProducer` being updated. */
  patch: AnimeProducerPatch;
  producerId: Scalars['UUID'];
};

/** The output of our update `AnimeProducer` mutation. */
export type UpdateAnimeProducerPayload = {
  __typename?: 'UpdateAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was updated by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeProducer` mutation. */
export type UpdateAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: Maybe<Array<AnimeProducersOrderBy>>;
};

/** All input for the `updateAnimeStaffByNodeId` mutation. */
export type UpdateAnimeStaffByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStaff` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeStaff` being updated. */
  patch: AnimeStaffPatch;
};

/** All input for the `updateAnimeStaff` mutation. */
export type UpdateAnimeStaffInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeStaff` being updated. */
  patch: AnimeStaffPatch;
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};

/** The output of our update `AnimeStaff` mutation. */
export type UpdateAnimeStaffPayload = {
  __typename?: 'UpdateAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was updated by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our update `AnimeStaff` mutation. */
export type UpdateAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};

/** All input for the `updateAnimeStudioByNodeId` mutation. */
export type UpdateAnimeStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStudio` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeStudio` being updated. */
  patch: AnimeStudioPatch;
};

/** All input for the `updateAnimeStudio` mutation. */
export type UpdateAnimeStudioInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeStudio` being updated. */
  patch: AnimeStudioPatch;
  studioId: Scalars['UUID'];
};

/** The output of our update `AnimeStudio` mutation. */
export type UpdateAnimeStudioPayload = {
  __typename?: 'UpdateAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was updated by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our update `AnimeStudio` mutation. */
export type UpdateAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStudiosOrderBy>>;
};

/** All input for the `updateAnimeUserScoreByNodeId` mutation. */
export type UpdateAnimeUserScoreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeUserScore` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeUserScore` being updated. */
  patch: AnimeUserScorePatch;
};

/** All input for the `updateAnimeUserScore` mutation. */
export type UpdateAnimeUserScoreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeUserScore` being updated. */
  patch: AnimeUserScorePatch;
  userId: Scalars['String'];
};

/** The output of our update `AnimeUserScore` mutation. */
export type UpdateAnimeUserScorePayload = {
  __typename?: 'UpdateAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was updated by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our update `AnimeUserScore` mutation. */
export type UpdateAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};

/** All input for the `updateCharacterByMalId` mutation. */
export type UpdateCharacterByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  malId: Scalars['String'];
  /** An object where the defined keys will be set on the `Character` being updated. */
  patch: CharacterPatch;
};

/** All input for the `updateCharacterByNodeId` mutation. */
export type UpdateCharacterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Character` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Character` being updated. */
  patch: CharacterPatch;
};

/** All input for the `updateCharacterImageByNodeId` mutation. */
export type UpdateCharacterImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterImage` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `CharacterImage` being updated. */
  patch: CharacterImagePatch;
};

/** All input for the `updateCharacterImage` mutation. */
export type UpdateCharacterImageInput = {
  characterId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `CharacterImage` being updated. */
  patch: CharacterImagePatch;
};

/** The output of our update `CharacterImage` mutation. */
export type UpdateCharacterImagePayload = {
  __typename?: 'UpdateCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was updated by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `CharacterImage` mutation. */
export type UpdateCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: Maybe<Array<CharacterImagesOrderBy>>;
};

/** All input for the `updateCharacter` mutation. */
export type UpdateCharacterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Character` being updated. */
  patch: CharacterPatch;
};

/** The output of our update `Character` mutation. */
export type UpdateCharacterPayload = {
  __typename?: 'UpdateCharacterPayload';
  /** The `Character` that was updated by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Character` mutation. */
export type UpdateCharacterPayloadCharacterEdgeArgs = {
  orderBy?: Maybe<Array<CharactersOrderBy>>;
};

/** All input for the `updateCharacterRoleByNodeId` mutation. */
export type UpdateCharacterRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterRole` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `CharacterRole` being updated. */
  patch: CharacterRolePatch;
};

/** All input for the `updateCharacterRoleByRole` mutation. */
export type UpdateCharacterRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `CharacterRole` being updated. */
  patch: CharacterRolePatch;
  role: Scalars['String'];
};

/** All input for the `updateCharacterRole` mutation. */
export type UpdateCharacterRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `CharacterRole` being updated. */
  patch: CharacterRolePatch;
};

/** The output of our update `CharacterRole` mutation. */
export type UpdateCharacterRolePayload = {
  __typename?: 'UpdateCharacterRolePayload';
  /** The `CharacterRole` that was updated by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `CharacterRole` mutation. */
export type UpdateCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: Maybe<Array<CharacterRolesOrderBy>>;
};

/** All input for the `updateGenreByGenre` mutation. */
export type UpdateGenreByGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['String'];
  /** An object where the defined keys will be set on the `Genre` being updated. */
  patch: GenrePatch;
};

/** All input for the `updateGenreByNodeId` mutation. */
export type UpdateGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Genre` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Genre` being updated. */
  patch: GenrePatch;
};

/** All input for the `updateGenre` mutation. */
export type UpdateGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Genre` being updated. */
  patch: GenrePatch;
};

/** The output of our update `Genre` mutation. */
export type UpdateGenrePayload = {
  __typename?: 'UpdateGenrePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` that was updated by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Genre` mutation. */
export type UpdateGenrePayloadGenreEdgeArgs = {
  orderBy?: Maybe<Array<GenresOrderBy>>;
};

/** All input for the `updateImageByNodeId` mutation. */
export type UpdateImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Image` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Image` being updated. */
  patch: ImagePatch;
};

/** All input for the `updateImage` mutation. */
export type UpdateImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Image` being updated. */
  patch: ImagePatch;
};

/** The output of our update `Image` mutation. */
export type UpdateImagePayload = {
  __typename?: 'UpdateImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` that was updated by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Image` mutation. */
export type UpdateImagePayloadImageEdgeArgs = {
  orderBy?: Maybe<Array<ImagesOrderBy>>;
};

/** All input for the `updateLanguageByLanguage` mutation. */
export type UpdateLanguageByLanguageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  language: Scalars['String'];
  /** An object where the defined keys will be set on the `Language` being updated. */
  patch: LanguagePatch;
};

/** All input for the `updateLanguageByNodeId` mutation. */
export type UpdateLanguageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Language` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Language` being updated. */
  patch: LanguagePatch;
};

/** All input for the `updateLanguage` mutation. */
export type UpdateLanguageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Language` being updated. */
  patch: LanguagePatch;
};

/** The output of our update `Language` mutation. */
export type UpdateLanguagePayload = {
  __typename?: 'UpdateLanguagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Language` that was updated by this mutation. */
  language?: Maybe<Language>;
  /** An edge for our `Language`. May be used by Relay 1. */
  languageEdge?: Maybe<LanguagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Language` mutation. */
export type UpdateLanguagePayloadLanguageEdgeArgs = {
  orderBy?: Maybe<Array<LanguagesOrderBy>>;
};

/** All input for the `updateLicensorByLicensor` mutation. */
export type UpdateLicensorByLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  licensor: Scalars['String'];
  /** An object where the defined keys will be set on the `Licensor` being updated. */
  patch: LicensorPatch;
};

/** All input for the `updateLicensorByNodeId` mutation. */
export type UpdateLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Licensor` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Licensor` being updated. */
  patch: LicensorPatch;
};

/** All input for the `updateLicensor` mutation. */
export type UpdateLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Licensor` being updated. */
  patch: LicensorPatch;
};

/** The output of our update `Licensor` mutation. */
export type UpdateLicensorPayload = {
  __typename?: 'UpdateLicensorPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` that was updated by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Licensor` mutation. */
export type UpdateLicensorPayloadLicensorEdgeArgs = {
  orderBy?: Maybe<Array<LicensorsOrderBy>>;
};

/** All input for the `updateMediaTypeByMediaType` mutation. */
export type UpdateMediaTypeByMediaTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mediaType: Scalars['String'];
  /** An object where the defined keys will be set on the `MediaType` being updated. */
  patch: MediaTypePatch;
};

/** All input for the `updateMediaTypeByNodeId` mutation. */
export type UpdateMediaTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `MediaType` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `MediaType` being updated. */
  patch: MediaTypePatch;
};

/** All input for the `updateMediaType` mutation. */
export type UpdateMediaTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `MediaType` being updated. */
  patch: MediaTypePatch;
};

/** The output of our update `MediaType` mutation. */
export type UpdateMediaTypePayload = {
  __typename?: 'UpdateMediaTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` that was updated by this mutation. */
  mediaType?: Maybe<MediaType>;
  /** An edge for our `MediaType`. May be used by Relay 1. */
  mediaTypeEdge?: Maybe<MediaTypesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `MediaType` mutation. */
export type UpdateMediaTypePayloadMediaTypeEdgeArgs = {
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};

/** All input for the `updatePersonByMalId` mutation. */
export type UpdatePersonByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  malId: Scalars['String'];
  /** An object where the defined keys will be set on the `Person` being updated. */
  patch: PersonPatch;
};

/** All input for the `updatePersonByNodeId` mutation. */
export type UpdatePersonByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Person` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Person` being updated. */
  patch: PersonPatch;
};

/** All input for the `updatePersonImageByNodeId` mutation. */
export type UpdatePersonImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PersonImage` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `PersonImage` being updated. */
  patch: PersonImagePatch;
};

/** All input for the `updatePersonImage` mutation. */
export type UpdatePersonImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `PersonImage` being updated. */
  patch: PersonImagePatch;
  personId: Scalars['UUID'];
};

/** The output of our update `PersonImage` mutation. */
export type UpdatePersonImagePayload = {
  __typename?: 'UpdatePersonImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was updated by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `PersonImage` mutation. */
export type UpdatePersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: Maybe<Array<PersonImagesOrderBy>>;
};

/** All input for the `updatePerson` mutation. */
export type UpdatePersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Person` being updated. */
  patch: PersonPatch;
};

/** The output of our update `Person` mutation. */
export type UpdatePersonPayload = {
  __typename?: 'UpdatePersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` that was updated by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Person` mutation. */
export type UpdatePersonPayloadPersonEdgeArgs = {
  orderBy?: Maybe<Array<PeopleOrderBy>>;
};

/** All input for the `updateProducerByNodeId` mutation. */
export type UpdateProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Producer` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Producer` being updated. */
  patch: ProducerPatch;
};

/** All input for the `updateProducerByProducer` mutation. */
export type UpdateProducerByProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Producer` being updated. */
  patch: ProducerPatch;
  producer: Scalars['String'];
};

/** All input for the `updateProducer` mutation. */
export type UpdateProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Producer` being updated. */
  patch: ProducerPatch;
};

/** The output of our update `Producer` mutation. */
export type UpdateProducerPayload = {
  __typename?: 'UpdateProducerPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` that was updated by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Producer` mutation. */
export type UpdateProducerPayloadProducerEdgeArgs = {
  orderBy?: Maybe<Array<ProducersOrderBy>>;
};

/** All input for the `updateSeasonByNodeId` mutation. */
export type UpdateSeasonByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Season` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Season` being updated. */
  patch: SeasonPatch;
};

/** All input for the `updateSeasonBySeason` mutation. */
export type UpdateSeasonBySeasonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Season` being updated. */
  patch: SeasonPatch;
  season: Scalars['String'];
};

/** All input for the `updateSeason` mutation. */
export type UpdateSeasonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Season` being updated. */
  patch: SeasonPatch;
};

/** The output of our update `Season` mutation. */
export type UpdateSeasonPayload = {
  __typename?: 'UpdateSeasonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Season` that was updated by this mutation. */
  season?: Maybe<Season>;
  /** An edge for our `Season`. May be used by Relay 1. */
  seasonEdge?: Maybe<SeasonsEdge>;
};


/** The output of our update `Season` mutation. */
export type UpdateSeasonPayloadSeasonEdgeArgs = {
  orderBy?: Maybe<Array<SeasonsOrderBy>>;
};

/** All input for the `updateSourceMaterialTypeByNodeId` mutation. */
export type UpdateSourceMaterialTypeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `SourceMaterialType` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `SourceMaterialType` being updated. */
  patch: SourceMaterialTypePatch;
};

/** All input for the `updateSourceMaterialTypeBySourceMaterialType` mutation. */
export type UpdateSourceMaterialTypeBySourceMaterialTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `SourceMaterialType` being updated. */
  patch: SourceMaterialTypePatch;
  sourceMaterialType: Scalars['String'];
};

/** All input for the `updateSourceMaterialType` mutation. */
export type UpdateSourceMaterialTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `SourceMaterialType` being updated. */
  patch: SourceMaterialTypePatch;
};

/** The output of our update `SourceMaterialType` mutation. */
export type UpdateSourceMaterialTypePayload = {
  __typename?: 'UpdateSourceMaterialTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `SourceMaterialType` that was updated by this mutation. */
  sourceMaterialType?: Maybe<SourceMaterialType>;
  /** An edge for our `SourceMaterialType`. May be used by Relay 1. */
  sourceMaterialTypeEdge?: Maybe<SourceMaterialTypesEdge>;
};


/** The output of our update `SourceMaterialType` mutation. */
export type UpdateSourceMaterialTypePayloadSourceMaterialTypeEdgeArgs = {
  orderBy?: Maybe<Array<SourceMaterialTypesOrderBy>>;
};

/** All input for the `updateStaffRoleByNodeId` mutation. */
export type UpdateStaffRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `StaffRole` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `StaffRole` being updated. */
  patch: StaffRolePatch;
};

/** All input for the `updateStaffRoleByRole` mutation. */
export type UpdateStaffRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `StaffRole` being updated. */
  patch: StaffRolePatch;
  role: Scalars['String'];
};

/** All input for the `updateStaffRole` mutation. */
export type UpdateStaffRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `StaffRole` being updated. */
  patch: StaffRolePatch;
};

/** The output of our update `StaffRole` mutation. */
export type UpdateStaffRolePayload = {
  __typename?: 'UpdateStaffRolePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was updated by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our update `StaffRole` mutation. */
export type UpdateStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: Maybe<Array<StaffRolesOrderBy>>;
};

/** All input for the `updateStudioByNodeId` mutation. */
export type UpdateStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Studio` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Studio` being updated. */
  patch: StudioPatch;
};

/** All input for the `updateStudioByStudio` mutation. */
export type UpdateStudioByStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Studio` being updated. */
  patch: StudioPatch;
  studio: Scalars['String'];
};

/** All input for the `updateStudio` mutation. */
export type UpdateStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Studio` being updated. */
  patch: StudioPatch;
};

/** The output of our update `Studio` mutation. */
export type UpdateStudioPayload = {
  __typename?: 'UpdateStudioPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was updated by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our update `Studio` mutation. */
export type UpdateStudioPayloadStudioEdgeArgs = {
  orderBy?: Maybe<Array<StudiosOrderBy>>;
};

/** All input for the `updateUserAnimeByNodeId` mutation. */
export type UpdateUserAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserAnime` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserAnime` being updated. */
  patch: UserAnimePatch;
};

/** All input for the `updateUserAnime` mutation. */
export type UpdateUserAnimeInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserAnime` being updated. */
  patch: UserAnimePatch;
  userId: Scalars['String'];
};

/** All input for the `updateUserAnimeListByAnimeListIdAndAnimeId` mutation. */
export type UpdateUserAnimeListByAnimeListIdAndAnimeIdInput = {
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserAnimeList` being updated. */
  patch: UserAnimeListPatch;
};

/** The output of our update `UserAnimeList` mutation. */
export type UpdateUserAnimeListPayload = {
  __typename?: 'UpdateUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was updated by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our update `UserAnimeList` mutation. */
export type UpdateUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};

/** The output of our update `UserAnime` mutation. */
export type UpdateUserAnimePayload = {
  __typename?: 'UpdateUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was updated by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our update `UserAnime` mutation. */
export type UpdateUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeOrderBy>>;
};

/** All input for the `updateUserByNodeId` mutation. */
export type UpdateUserByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `User` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch;
};

/** All input for the `updateUser` mutation. */
export type UpdateUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch;
};

/** The output of our update `User` mutation. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was updated by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our update `User` mutation. */
export type UpdateUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

/** All input for the `updateUserWatchStatusByNodeId` mutation. */
export type UpdateUserWatchStatusByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserWatchStatus` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserWatchStatus` being updated. */
  patch: UserWatchStatusPatch;
};

/** All input for the `updateUserWatchStatus` mutation. */
export type UpdateUserWatchStatusInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserWatchStatus` being updated. */
  patch: UserWatchStatusPatch;
  userId: Scalars['String'];
};

/** The output of our update `UserWatchStatus` mutation. */
export type UpdateUserWatchStatusPayload = {
  __typename?: 'UpdateUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was updated by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our update `UserWatchStatus` mutation. */
export type UpdateUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: Maybe<Array<UserWatchStatusesOrderBy>>;
};

/** All input for the upsert `AgeRatingType` mutation. */
export type UpsertAgeRatingTypeInput = {
  /** The `AgeRatingType` to be upserted by this mutation. */
  ageRatingType: AgeRatingTypeInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AgeRatingType` mutation. */
export type UpsertAgeRatingTypePayload = {
  __typename?: 'UpsertAgeRatingTypePayload';
  /** The `AgeRatingType` that was upserted by this mutation. */
  ageRatingType?: Maybe<AgeRatingType>;
  /** An edge for our `AgeRatingType`. May be used by Relay 1. */
  ageRatingTypeEdge?: Maybe<AgeRatingTypesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AgeRatingType` mutation. */
export type UpsertAgeRatingTypePayloadAgeRatingTypeEdgeArgs = {
  orderBy?: Maybe<Array<AgeRatingTypesOrderBy>>;
};

/** Where conditions for the upsert `AgeRatingType` mutation. */
export type UpsertAgeRatingTypeWhere = {
  ageRatingType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AiringStatusType` mutation. */
export type UpsertAiringStatusTypeInput = {
  /** The `AiringStatusType` to be upserted by this mutation. */
  airingStatusType: AiringStatusTypeInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AiringStatusType` mutation. */
export type UpsertAiringStatusTypePayload = {
  __typename?: 'UpsertAiringStatusTypePayload';
  /** The `AiringStatusType` that was upserted by this mutation. */
  airingStatusType?: Maybe<AiringStatusType>;
  /** An edge for our `AiringStatusType`. May be used by Relay 1. */
  airingStatusTypeEdge?: Maybe<AiringStatusTypesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AiringStatusType` mutation. */
export type UpsertAiringStatusTypePayloadAiringStatusTypeEdgeArgs = {
  orderBy?: Maybe<Array<AiringStatusTypesOrderBy>>;
};

/** Where conditions for the upsert `AiringStatusType` mutation. */
export type UpsertAiringStatusTypeWhere = {
  airingStatusType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNameInput = {
  /** The `AlternateAnimeName` to be upserted by this mutation. */
  alternateAnimeName: AlternateAnimeNameInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNamePayload = {
  __typename?: 'UpsertAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was upserted by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: Maybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** Where conditions for the upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNameWhere = {
  id?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterInput = {
  /** The `AnimeCharacter` to be upserted by this mutation. */
  animeCharacter: AnimeCharacterInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterPayload = {
  __typename?: 'UpsertAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was upserted by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Language` that is related to this `AnimeCharacter`. */
  language?: Maybe<Language>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: Maybe<Array<AnimeCharactersOrderBy>>;
};

/** Where conditions for the upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  characterId?: Maybe<Scalars['UUID']>;
  languageId?: Maybe<Scalars['UUID']>;
  personId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenreInput = {
  /** The `AnimeGenre` to be upserted by this mutation. */
  animeGenre: AnimeGenreInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenrePayload = {
  __typename?: 'UpsertAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was upserted by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeGenresOrderBy>>;
};

/** Where conditions for the upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenreWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  genreId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeImage` mutation. */
export type UpsertAnimeImageInput = {
  /** The `AnimeImage` to be upserted by this mutation. */
  animeImage: AnimeImageInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeImage` mutation. */
export type UpsertAnimeImagePayload = {
  __typename?: 'UpsertAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was upserted by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeImage` mutation. */
export type UpsertAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: Maybe<Array<AnimeImagesOrderBy>>;
};

/** Where conditions for the upsert `AnimeImage` mutation. */
export type UpsertAnimeImageWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  imageId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `Anime` mutation. */
export type UpsertAnimeInput = {
  /** The `Anime` to be upserted by this mutation. */
  anime: AnimeInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** All input for the upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorInput = {
  /** The `AnimeLicensor` to be upserted by this mutation. */
  animeLicensor: AnimeLicensorInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorPayload = {
  __typename?: 'UpsertAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was upserted by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: Maybe<Array<AnimeLicensorsOrderBy>>;
};

/** Where conditions for the upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  licensorId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeList` mutation. */
export type UpsertAnimeListInput = {
  /** The `AnimeList` to be upserted by this mutation. */
  animeList: AnimeListInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeList` mutation. */
export type UpsertAnimeListPayload = {
  __typename?: 'UpsertAnimeListPayload';
  /** The `AnimeList` that was upserted by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our upsert `AnimeList` mutation. */
export type UpsertAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};

/** Where conditions for the upsert `AnimeList` mutation. */
export type UpsertAnimeListWhere = {
  id?: Maybe<Scalars['UUID']>;
  title?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `Anime` mutation. */
export type UpsertAnimePayload = {
  __typename?: 'UpsertAnimePayload';
  /** Reads a single `AgeRatingType` that is related to this `Anime`. */
  ageRating?: Maybe<AgeRatingType>;
  /** Reads a single `AiringStatusType` that is related to this `Anime`. */
  airingStatus?: Maybe<AiringStatusType>;
  /** The `Anime` that was upserted by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `MediaType` that is related to this `Anime`. */
  mediaType?: Maybe<MediaType>;
  /** Reads a single `Image` that is related to this `Anime`. */
  profileImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Season` that is related to this `Anime`. */
  season?: Maybe<Season>;
  /** Reads a single `SourceMaterialType` that is related to this `Anime`. */
  sourceMaterial?: Maybe<SourceMaterialType>;
};


/** The output of our upsert `Anime` mutation. */
export type UpsertAnimePayloadAnimeEdgeArgs = {
  orderBy?: Maybe<Array<AnimeOrderBy>>;
};

/** All input for the upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerInput = {
  /** The `AnimeProducer` to be upserted by this mutation. */
  animeProducer: AnimeProducerInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerPayload = {
  __typename?: 'UpsertAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was upserted by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: Maybe<Array<AnimeProducersOrderBy>>;
};

/** Where conditions for the upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  producerId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffInput = {
  /** The `AnimeStaff` to be upserted by this mutation. */
  animeStaff: AnimeStaffInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffPayload = {
  __typename?: 'UpsertAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was upserted by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStaffOrderBy>>;
};

/** Where conditions for the upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  personId?: Maybe<Scalars['UUID']>;
  staffRoleId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioInput = {
  /** The `AnimeStudio` to be upserted by this mutation. */
  animeStudio: AnimeStudioInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioPayload = {
  __typename?: 'UpsertAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was upserted by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: Maybe<Array<AnimeStudiosOrderBy>>;
};

/** Where conditions for the upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  studioId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScoreInput = {
  /** The `AnimeUserScore` to be upserted by this mutation. */
  animeUserScore: AnimeUserScoreInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScorePayload = {
  __typename?: 'UpsertAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was upserted by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};

/** Where conditions for the upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScoreWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  userId?: Maybe<Scalars['String']>;
};

/** Where conditions for the upsert `Anime` mutation. */
export type UpsertAnimeWhere = {
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['Int']>;
};

/** All input for the upsert `CharacterImage` mutation. */
export type UpsertCharacterImageInput = {
  /** The `CharacterImage` to be upserted by this mutation. */
  characterImage: CharacterImageInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `CharacterImage` mutation. */
export type UpsertCharacterImagePayload = {
  __typename?: 'UpsertCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was upserted by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `CharacterImage` mutation. */
export type UpsertCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: Maybe<Array<CharacterImagesOrderBy>>;
};

/** Where conditions for the upsert `CharacterImage` mutation. */
export type UpsertCharacterImageWhere = {
  characterId?: Maybe<Scalars['UUID']>;
  imageId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `Character` mutation. */
export type UpsertCharacterInput = {
  /** The `Character` to be upserted by this mutation. */
  character: CharacterInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `Character` mutation. */
export type UpsertCharacterPayload = {
  __typename?: 'UpsertCharacterPayload';
  /** The `Character` that was upserted by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Character` mutation. */
export type UpsertCharacterPayloadCharacterEdgeArgs = {
  orderBy?: Maybe<Array<CharactersOrderBy>>;
};

/** All input for the upsert `CharacterRole` mutation. */
export type UpsertCharacterRoleInput = {
  /** The `CharacterRole` to be upserted by this mutation. */
  characterRole: CharacterRoleInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our upsert `CharacterRole` mutation. */
export type UpsertCharacterRolePayload = {
  __typename?: 'UpsertCharacterRolePayload';
  /** The `CharacterRole` that was upserted by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `CharacterRole` mutation. */
export type UpsertCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: Maybe<Array<CharacterRolesOrderBy>>;
};

/** Where conditions for the upsert `CharacterRole` mutation. */
export type UpsertCharacterRoleWhere = {
  id?: Maybe<Scalars['UUID']>;
  role?: Maybe<Scalars['String']>;
};

/** Where conditions for the upsert `Character` mutation. */
export type UpsertCharacterWhere = {
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['String']>;
};

/** All input for the upsert `Genre` mutation. */
export type UpsertGenreInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` to be upserted by this mutation. */
  genre: GenreInput;
};

/** The output of our upsert `Genre` mutation. */
export type UpsertGenrePayload = {
  __typename?: 'UpsertGenrePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` that was upserted by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Genre` mutation. */
export type UpsertGenrePayloadGenreEdgeArgs = {
  orderBy?: Maybe<Array<GenresOrderBy>>;
};

/** Where conditions for the upsert `Genre` mutation. */
export type UpsertGenreWhere = {
  genre?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `Image` mutation. */
export type UpsertImageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` to be upserted by this mutation. */
  image: ImageInput;
};

/** The output of our upsert `Image` mutation. */
export type UpsertImagePayload = {
  __typename?: 'UpsertImagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` that was upserted by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Image` mutation. */
export type UpsertImagePayloadImageEdgeArgs = {
  orderBy?: Maybe<Array<ImagesOrderBy>>;
};

/** Where conditions for the upsert `Image` mutation. */
export type UpsertImageWhere = {
  id?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `Language` mutation. */
export type UpsertLanguageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Language` to be upserted by this mutation. */
  language: LanguageInput;
};

/** The output of our upsert `Language` mutation. */
export type UpsertLanguagePayload = {
  __typename?: 'UpsertLanguagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Language` that was upserted by this mutation. */
  language?: Maybe<Language>;
  /** An edge for our `Language`. May be used by Relay 1. */
  languageEdge?: Maybe<LanguagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Language` mutation. */
export type UpsertLanguagePayloadLanguageEdgeArgs = {
  orderBy?: Maybe<Array<LanguagesOrderBy>>;
};

/** Where conditions for the upsert `Language` mutation. */
export type UpsertLanguageWhere = {
  id?: Maybe<Scalars['UUID']>;
  language?: Maybe<Scalars['String']>;
};

/** All input for the upsert `Licensor` mutation. */
export type UpsertLicensorInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` to be upserted by this mutation. */
  licensor: LicensorInput;
};

/** The output of our upsert `Licensor` mutation. */
export type UpsertLicensorPayload = {
  __typename?: 'UpsertLicensorPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` that was upserted by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Licensor` mutation. */
export type UpsertLicensorPayloadLicensorEdgeArgs = {
  orderBy?: Maybe<Array<LicensorsOrderBy>>;
};

/** Where conditions for the upsert `Licensor` mutation. */
export type UpsertLicensorWhere = {
  id?: Maybe<Scalars['UUID']>;
  licensor?: Maybe<Scalars['String']>;
};

/** All input for the upsert `MediaType` mutation. */
export type UpsertMediaTypeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` to be upserted by this mutation. */
  mediaType: MediaTypeInput;
};

/** The output of our upsert `MediaType` mutation. */
export type UpsertMediaTypePayload = {
  __typename?: 'UpsertMediaTypePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` that was upserted by this mutation. */
  mediaType?: Maybe<MediaType>;
  /** An edge for our `MediaType`. May be used by Relay 1. */
  mediaTypeEdge?: Maybe<MediaTypesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `MediaType` mutation. */
export type UpsertMediaTypePayloadMediaTypeEdgeArgs = {
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};

/** Where conditions for the upsert `MediaType` mutation. */
export type UpsertMediaTypeWhere = {
  id?: Maybe<Scalars['UUID']>;
  mediaType?: Maybe<Scalars['String']>;
};

/** All input for the upsert `PersonImage` mutation. */
export type UpsertPersonImageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PersonImage` to be upserted by this mutation. */
  personImage: PersonImageInput;
};

/** The output of our upsert `PersonImage` mutation. */
export type UpsertPersonImagePayload = {
  __typename?: 'UpsertPersonImagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was upserted by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `PersonImage` mutation. */
export type UpsertPersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: Maybe<Array<PersonImagesOrderBy>>;
};

/** Where conditions for the upsert `PersonImage` mutation. */
export type UpsertPersonImageWhere = {
  imageId?: Maybe<Scalars['UUID']>;
  personId?: Maybe<Scalars['UUID']>;
};

/** All input for the upsert `Person` mutation. */
export type UpsertPersonInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` to be upserted by this mutation. */
  person: PersonInput;
};

/** The output of our upsert `Person` mutation. */
export type UpsertPersonPayload = {
  __typename?: 'UpsertPersonPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` that was upserted by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Person` mutation. */
export type UpsertPersonPayloadPersonEdgeArgs = {
  orderBy?: Maybe<Array<PeopleOrderBy>>;
};

/** Where conditions for the upsert `Person` mutation. */
export type UpsertPersonWhere = {
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['String']>;
};

/** All input for the upsert `Producer` mutation. */
export type UpsertProducerInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` to be upserted by this mutation. */
  producer: ProducerInput;
};

/** The output of our upsert `Producer` mutation. */
export type UpsertProducerPayload = {
  __typename?: 'UpsertProducerPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` that was upserted by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Producer` mutation. */
export type UpsertProducerPayloadProducerEdgeArgs = {
  orderBy?: Maybe<Array<ProducersOrderBy>>;
};

/** Where conditions for the upsert `Producer` mutation. */
export type UpsertProducerWhere = {
  id?: Maybe<Scalars['UUID']>;
  producer?: Maybe<Scalars['String']>;
};

/** All input for the upsert `Season` mutation. */
export type UpsertSeasonInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Season` to be upserted by this mutation. */
  season: SeasonInput;
};

/** The output of our upsert `Season` mutation. */
export type UpsertSeasonPayload = {
  __typename?: 'UpsertSeasonPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Season` that was upserted by this mutation. */
  season?: Maybe<Season>;
  /** An edge for our `Season`. May be used by Relay 1. */
  seasonEdge?: Maybe<SeasonsEdge>;
};


/** The output of our upsert `Season` mutation. */
export type UpsertSeasonPayloadSeasonEdgeArgs = {
  orderBy?: Maybe<Array<SeasonsOrderBy>>;
};

/** Where conditions for the upsert `Season` mutation. */
export type UpsertSeasonWhere = {
  id?: Maybe<Scalars['UUID']>;
  season?: Maybe<Scalars['String']>;
};

/** All input for the upsert `SourceMaterialType` mutation. */
export type UpsertSourceMaterialTypeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SourceMaterialType` to be upserted by this mutation. */
  sourceMaterialType: SourceMaterialTypeInput;
};

/** The output of our upsert `SourceMaterialType` mutation. */
export type UpsertSourceMaterialTypePayload = {
  __typename?: 'UpsertSourceMaterialTypePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `SourceMaterialType` that was upserted by this mutation. */
  sourceMaterialType?: Maybe<SourceMaterialType>;
  /** An edge for our `SourceMaterialType`. May be used by Relay 1. */
  sourceMaterialTypeEdge?: Maybe<SourceMaterialTypesEdge>;
};


/** The output of our upsert `SourceMaterialType` mutation. */
export type UpsertSourceMaterialTypePayloadSourceMaterialTypeEdgeArgs = {
  orderBy?: Maybe<Array<SourceMaterialTypesOrderBy>>;
};

/** Where conditions for the upsert `SourceMaterialType` mutation. */
export type UpsertSourceMaterialTypeWhere = {
  id?: Maybe<Scalars['UUID']>;
  sourceMaterialType?: Maybe<Scalars['String']>;
};

/** All input for the upsert `StaffRole` mutation. */
export type UpsertStaffRoleInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StaffRole` to be upserted by this mutation. */
  staffRole: StaffRoleInput;
};

/** The output of our upsert `StaffRole` mutation. */
export type UpsertStaffRolePayload = {
  __typename?: 'UpsertStaffRolePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was upserted by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our upsert `StaffRole` mutation. */
export type UpsertStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: Maybe<Array<StaffRolesOrderBy>>;
};

/** Where conditions for the upsert `StaffRole` mutation. */
export type UpsertStaffRoleWhere = {
  id?: Maybe<Scalars['UUID']>;
  role?: Maybe<Scalars['String']>;
};

/** All input for the upsert `Studio` mutation. */
export type UpsertStudioInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Studio` to be upserted by this mutation. */
  studio: StudioInput;
};

/** The output of our upsert `Studio` mutation. */
export type UpsertStudioPayload = {
  __typename?: 'UpsertStudioPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was upserted by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our upsert `Studio` mutation. */
export type UpsertStudioPayloadStudioEdgeArgs = {
  orderBy?: Maybe<Array<StudiosOrderBy>>;
};

/** Where conditions for the upsert `Studio` mutation. */
export type UpsertStudioWhere = {
  id?: Maybe<Scalars['UUID']>;
  studio?: Maybe<Scalars['String']>;
};

/** All input for the upsert `UserAnime` mutation. */
export type UpsertUserAnimeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserAnime` to be upserted by this mutation. */
  userAnime: UserAnimeInput;
};

/** All input for the upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserAnimeList` to be upserted by this mutation. */
  userAnimeList: UserAnimeListInput;
};

/** The output of our upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListPayload = {
  __typename?: 'UpsertUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was upserted by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeListsOrderBy>>;
};

/** Where conditions for the upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  animeListId?: Maybe<Scalars['UUID']>;
};

/** The output of our upsert `UserAnime` mutation. */
export type UpsertUserAnimePayload = {
  __typename?: 'UpsertUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was upserted by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our upsert `UserAnime` mutation. */
export type UpsertUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: Maybe<Array<UserAnimeOrderBy>>;
};

/** Where conditions for the upsert `UserAnime` mutation. */
export type UpsertUserAnimeWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  userId?: Maybe<Scalars['String']>;
};

/** All input for the upsert `User` mutation. */
export type UpsertUserInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `User` to be upserted by this mutation. */
  user: UserInput;
};

/** The output of our upsert `User` mutation. */
export type UpsertUserPayload = {
  __typename?: 'UpsertUserPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was upserted by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our upsert `User` mutation. */
export type UpsertUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

/** All input for the upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserWatchStatus` to be upserted by this mutation. */
  userWatchStatus: UserWatchStatusInput;
};

/** The output of our upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusPayload = {
  __typename?: 'UpsertUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was upserted by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: Maybe<Array<UserWatchStatusesOrderBy>>;
};

/** Where conditions for the upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusWhere = {
  animeId?: Maybe<Scalars['UUID']>;
  userId?: Maybe<Scalars['String']>;
};

/** Where conditions for the upsert `User` mutation. */
export type UpsertUserWhere = {
  id?: Maybe<Scalars['String']>;
};

export type User = Node & {
  __typename?: 'User';
  /** Reads and enables pagination through a set of `AnimeList`. */
  animeLists: AnimeListsConnection;
  /** Reads and enables pagination through a set of `AnimeUserScore`. */
  animeUserScores: AnimeUserScoresConnection;
  id: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads and enables pagination through a set of `UserAnime`. */
  userAnimes: UserAnimeConnection;
  /** Reads and enables pagination through a set of `UserWatchStatus`. */
  userWatchStatuses: UserWatchStatusesConnection;
};


export type UserAnimeListsArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeListCondition>;
  filter?: Maybe<AnimeListFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeListsOrderBy>>;
};


export type UserAnimeUserScoresArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<AnimeUserScoreCondition>;
  filter?: Maybe<AnimeUserScoreFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AnimeUserScoresOrderBy>>;
};


export type UserUserAnimesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserAnimeCondition>;
  filter?: Maybe<UserAnimeFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserAnimeOrderBy>>;
};


export type UserUserWatchStatusesArgs = {
  after?: Maybe<Scalars['Cursor']>;
  before?: Maybe<Scalars['Cursor']>;
  condition?: Maybe<UserWatchStatusCondition>;
  filter?: Maybe<UserWatchStatusFilter>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserWatchStatusesOrderBy>>;
};

export type UserAnime = Node & {
  __typename?: 'UserAnime';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  userId: Scalars['String'];
};

/**
 * A condition to be used against `UserAnime` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type UserAnimeCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['String']>;
};

/** A connection to a list of `UserAnime` values. */
export type UserAnimeConnection = {
  __typename?: 'UserAnimeConnection';
  /** A list of edges which contains the `UserAnime` and cursor to aid in pagination. */
  edges: Array<UserAnimeEdge>;
  /** A list of `UserAnime` objects. */
  nodes: Array<Maybe<UserAnime>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserAnime` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserAnime` edge in the connection. */
export type UserAnimeEdge = {
  __typename?: 'UserAnimeEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserAnime` at the end of the edge. */
  node?: Maybe<UserAnime>;
};

/** A filter to be used against `UserAnime` object types. All fields are combined with a logical ‘and.’ */
export type UserAnimeFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserAnimeFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<UserAnimeFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserAnimeFilter>>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<StringFilter>;
};

/** An input for mutations affecting `UserAnime` */
export type UserAnimeInput = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};

export type UserAnimeList = {
  __typename?: 'UserAnimeList';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
};

/**
 * A condition to be used against `UserAnimeList` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserAnimeListCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `animeListId` field. */
  animeListId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `UserAnimeList` object types. All fields are combined with a logical ‘and.’ */
export type UserAnimeListFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserAnimeListFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `animeListId` field. */
  animeListId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<UserAnimeListFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserAnimeListFilter>>;
};

/** An input for mutations affecting `UserAnimeList` */
export type UserAnimeListInput = {
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
};

/** Represents an update to a `UserAnimeList`. Fields that are set will be updated. */
export type UserAnimeListPatch = {
  animeId?: Maybe<Scalars['UUID']>;
  animeListId?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `UserAnimeList` values. */
export type UserAnimeListsConnection = {
  __typename?: 'UserAnimeListsConnection';
  /** A list of edges which contains the `UserAnimeList` and cursor to aid in pagination. */
  edges: Array<UserAnimeListsEdge>;
  /** A list of `UserAnimeList` objects. */
  nodes: Array<Maybe<UserAnimeList>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserAnimeList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserAnimeList` edge in the connection. */
export type UserAnimeListsEdge = {
  __typename?: 'UserAnimeListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserAnimeList` at the end of the edge. */
  node?: Maybe<UserAnimeList>;
};

/** Methods to use when ordering `UserAnimeList`. */
export enum UserAnimeListsOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  AnimeListByAnimeListIdIdAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__ID_ASC',
  AnimeListByAnimeListIdIdDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__ID_DESC',
  AnimeListByAnimeListIdPrivacyAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__PRIVACY_ASC',
  AnimeListByAnimeListIdPrivacyDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__PRIVACY_DESC',
  AnimeListByAnimeListIdTitleAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__TITLE_ASC',
  AnimeListByAnimeListIdTitleDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__TITLE_DESC',
  AnimeListByAnimeListIdUserIdAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__USER_ID_ASC',
  AnimeListByAnimeListIdUserIdDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__USER_ID_DESC',
  AnimeListIdAsc = 'ANIME_LIST_ID_ASC',
  AnimeListIdDesc = 'ANIME_LIST_ID_DESC',
  Natural = 'NATURAL'
}

/** Methods to use when ordering `UserAnime`. */
export enum UserAnimeOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** Represents an update to a `UserAnime`. Fields that are set will be updated. */
export type UserAnimePatch = {
  animeId?: Maybe<Scalars['UUID']>;
  userId?: Maybe<Scalars['String']>;
};

/** A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['String']>;
};

/** A filter to be used against `User` object types. All fields are combined with a logical ‘and.’ */
export type UserFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<UserFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserFilter>>;
};

/** An input for mutations affecting `User` */
export type UserInput = {
  id: Scalars['String'];
};

export type UserList = {
  __typename?: 'UserList';
  animes?: Maybe<Array<Maybe<UserListAnime>>>;
  id?: Maybe<Scalars['UUID']>;
  title?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UserListAnime = {
  __typename?: 'UserListAnime';
  id?: Maybe<Scalars['UUID']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  watchStatus?: Maybe<WatchingStatusEnum>;
};

/** A filter to be used against `UserList` object types. All fields are combined with a logical ‘and.’ */
export type UserListFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserListFilter>>;
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<UserListFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserListFilter>>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<StringFilter>;
};

/** A connection to a list of `UserList` values. */
export type UserListsConnection = {
  __typename?: 'UserListsConnection';
  /** A list of edges which contains the `UserList` and cursor to aid in pagination. */
  edges: Array<UserListsEdge>;
  /** A list of `UserList` objects. */
  nodes: Array<Maybe<UserList>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserList` edge in the connection. */
export type UserListsEdge = {
  __typename?: 'UserListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserList` at the end of the edge. */
  node?: Maybe<UserList>;
};

/** Represents an update to a `User`. Fields that are set will be updated. */
export type UserPatch = {
  id?: Maybe<Scalars['String']>;
};

export type UserWatchStatus = Node & {
  __typename?: 'UserWatchStatus';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  userEpisodesWatched: Scalars['Int'];
  userId: Scalars['String'];
  watchStatus: WatchingStatusEnum;
};

/**
 * A condition to be used against `UserWatchStatus` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserWatchStatusCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `userEpisodesWatched` field. */
  userEpisodesWatched?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `watchStatus` field. */
  watchStatus?: Maybe<WatchingStatusEnum>;
};

/** A filter to be used against `UserWatchStatus` object types. All fields are combined with a logical ‘and.’ */
export type UserWatchStatusFilter = {
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserWatchStatusFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: Maybe<UuidFilter>;
  /** Negates the expression. */
  not?: Maybe<UserWatchStatusFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserWatchStatusFilter>>;
  /** Filter by the object’s `userEpisodesWatched` field. */
  userEpisodesWatched?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<StringFilter>;
  /** Filter by the object’s `watchStatus` field. */
  watchStatus?: Maybe<WatchingStatusEnumFilter>;
};

/** An input for mutations affecting `UserWatchStatus` */
export type UserWatchStatusInput = {
  animeId: Scalars['UUID'];
  userEpisodesWatched?: Maybe<Scalars['Int']>;
  userId: Scalars['String'];
  watchStatus?: Maybe<WatchingStatusEnum>;
};

/** Represents an update to a `UserWatchStatus`. Fields that are set will be updated. */
export type UserWatchStatusPatch = {
  animeId?: Maybe<Scalars['UUID']>;
  userEpisodesWatched?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['String']>;
  watchStatus?: Maybe<WatchingStatusEnum>;
};

/** A connection to a list of `UserWatchStatus` values. */
export type UserWatchStatusesConnection = {
  __typename?: 'UserWatchStatusesConnection';
  /** A list of edges which contains the `UserWatchStatus` and cursor to aid in pagination. */
  edges: Array<UserWatchStatusesEdge>;
  /** A list of `UserWatchStatus` objects. */
  nodes: Array<Maybe<UserWatchStatus>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserWatchStatus` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserWatchStatus` edge in the connection. */
export type UserWatchStatusesEdge = {
  __typename?: 'UserWatchStatusesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserWatchStatus` at the end of the edge. */
  node?: Maybe<UserWatchStatus>;
};

/** Methods to use when ordering `UserWatchStatus`. */
export enum UserWatchStatusesOrderBy {
  AnimeByAnimeIdAgeRatingIdAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_ASC',
  AnimeByAnimeIdAgeRatingIdDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_ID_DESC',
  AnimeByAnimeIdAiringStatusIdAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_ASC',
  AnimeByAnimeIdAiringStatusIdDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_ID_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeIdAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_ASC',
  AnimeByAnimeIdMediaTypeIdDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ID_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdProfileImageIdAsc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_ASC',
  AnimeByAnimeIdProfileImageIdDesc = 'ANIME_BY_ANIME_ID__PROFILE_IMAGE_ID_DESC',
  AnimeByAnimeIdSeasonIdAsc = 'ANIME_BY_ANIME_ID__SEASON_ID_ASC',
  AnimeByAnimeIdSeasonIdDesc = 'ANIME_BY_ANIME_ID__SEASON_ID_DESC',
  AnimeByAnimeIdSourceMaterialIdAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_ASC',
  AnimeByAnimeIdSourceMaterialIdDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_ID_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserEpisodesWatchedAsc = 'USER_EPISODES_WATCHED_ASC',
  UserEpisodesWatchedDesc = 'USER_EPISODES_WATCHED_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  WatchStatusAsc = 'WATCH_STATUS_ASC',
  WatchStatusDesc = 'WATCH_STATUS_DESC'
}

/** A connection to a list of `User` values. */
export type UsersConnection = {
  __typename?: 'UsersConnection';
  /** A list of edges which contains the `User` and cursor to aid in pagination. */
  edges: Array<UsersEdge>;
  /** A list of `User` objects. */
  nodes: Array<Maybe<User>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `User` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `User` edge in the connection. */
export type UsersEdge = {
  __typename?: 'UsersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `User` at the end of the edge. */
  node?: Maybe<User>;
};

/** Methods to use when ordering `User`. */
export enum UsersOrderBy {
  AnimeListsByUserIdCountAsc = 'ANIME_LISTS_BY_USER_ID__COUNT_ASC',
  AnimeListsByUserIdCountDesc = 'ANIME_LISTS_BY_USER_ID__COUNT_DESC',
  AnimeUserScoresByUserIdCountAsc = 'ANIME_USER_SCORES_BY_USER_ID__COUNT_ASC',
  AnimeUserScoresByUserIdCountDesc = 'ANIME_USER_SCORES_BY_USER_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserAnimeByUserIdCountAsc = 'USER_ANIME_BY_USER_ID__COUNT_ASC',
  UserAnimeByUserIdCountDesc = 'USER_ANIME_BY_USER_ID__COUNT_DESC',
  UserWatchStatusesByUserIdCountAsc = 'USER_WATCH_STATUSES_BY_USER_ID__COUNT_ASC',
  UserWatchStatusesByUserIdCountDesc = 'USER_WATCH_STATUSES_BY_USER_ID__COUNT_DESC'
}

export type VoiceActor = {
  __typename?: 'VoiceActor';
  actorFirstName?: Maybe<Scalars['String']>;
  actorLastName?: Maybe<Scalars['String']>;
  /** Reads a single `Character` that is related to this `VoiceActor`. */
  character?: Maybe<Character>;
  language?: Maybe<Scalars['String']>;
  personImageUrl?: Maybe<Scalars['String']>;
  voiceActorId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `VoiceActor` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type VoiceActorCondition = {
  /** Checks for equality with the object’s `actorFirstName` field. */
  actorFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `actorLastName` field. */
  actorLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `characterId` field. */
  characterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `language` field. */
  language?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `personImageUrl` field. */
  personImageUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `voiceActorId` field. */
  voiceActorId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `VoiceActor` object types. All fields are combined with a logical ‘and.’ */
export type VoiceActorFilter = {
  /** Filter by the object’s `actorFirstName` field. */
  actorFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `actorLastName` field. */
  actorLastName?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<VoiceActorFilter>>;
  /** Filter by the object’s `characterId` field. */
  characterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `language` field. */
  language?: Maybe<StringFilter>;
  /** Negates the expression. */
  not?: Maybe<VoiceActorFilter>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<VoiceActorFilter>>;
  /** Filter by the object’s `personImageUrl` field. */
  personImageUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `voiceActorId` field. */
  voiceActorId?: Maybe<UuidFilter>;
};

/** A connection to a list of `VoiceActor` values. */
export type VoiceActorsConnection = {
  __typename?: 'VoiceActorsConnection';
  /** A list of edges which contains the `VoiceActor` and cursor to aid in pagination. */
  edges: Array<VoiceActorsEdge>;
  /** A list of `VoiceActor` objects. */
  nodes: Array<Maybe<VoiceActor>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `VoiceActor` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `VoiceActor` edge in the connection. */
export type VoiceActorsEdge = {
  __typename?: 'VoiceActorsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `VoiceActor` at the end of the edge. */
  node?: Maybe<VoiceActor>;
};

/** Methods to use when ordering `VoiceActor`. */
export enum VoiceActorsOrderBy {
  ActorFirstNameAsc = 'ACTOR_FIRST_NAME_ASC',
  ActorFirstNameDesc = 'ACTOR_FIRST_NAME_DESC',
  ActorLastNameAsc = 'ACTOR_LAST_NAME_ASC',
  ActorLastNameDesc = 'ACTOR_LAST_NAME_DESC',
  CharacterByCharacterIdCharacterImageIdAsc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_ASC',
  CharacterByCharacterIdCharacterImageIdDesc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_DESC',
  CharacterByCharacterIdDescriptionAsc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_ASC',
  CharacterByCharacterIdDescriptionDesc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_DESC',
  CharacterByCharacterIdIdAsc = 'CHARACTER_BY_CHARACTER_ID__ID_ASC',
  CharacterByCharacterIdIdDesc = 'CHARACTER_BY_CHARACTER_ID__ID_DESC',
  CharacterByCharacterIdMalIdAsc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_ASC',
  CharacterByCharacterIdMalIdDesc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_DESC',
  CharacterByCharacterIdNameAsc = 'CHARACTER_BY_CHARACTER_ID__NAME_ASC',
  CharacterByCharacterIdNameDesc = 'CHARACTER_BY_CHARACTER_ID__NAME_DESC',
  CharacterIdAsc = 'CHARACTER_ID_ASC',
  CharacterIdDesc = 'CHARACTER_ID_DESC',
  LanguageAsc = 'LANGUAGE_ASC',
  LanguageDesc = 'LANGUAGE_DESC',
  Natural = 'NATURAL',
  PersonImageUrlAsc = 'PERSON_IMAGE_URL_ASC',
  PersonImageUrlDesc = 'PERSON_IMAGE_URL_DESC',
  VoiceActorIdAsc = 'VOICE_ACTOR_ID_ASC',
  VoiceActorIdDesc = 'VOICE_ACTOR_ID_DESC'
}

export enum WatchingStatusEnum {
  Completed = 'COMPLETED',
  Dropped = 'DROPPED',
  NotWatching = 'NOT_WATCHING',
  Paused = 'PAUSED',
  PlanToWatch = 'PLAN_TO_WATCH',
  Rewatching = 'REWATCHING',
  Watching = 'WATCHING'
}

/** A filter to be used against WatchingStatusEnum fields. All fields are combined with a logical ‘and.’ */
export type WatchingStatusEnumFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<WatchingStatusEnum>;
  /** Equal to the specified value. */
  equalTo?: Maybe<WatchingStatusEnum>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<WatchingStatusEnum>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<WatchingStatusEnum>;
  /** Included in the specified list. */
  in?: Maybe<Array<WatchingStatusEnum>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: Maybe<WatchingStatusEnum>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<WatchingStatusEnum>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<WatchingStatusEnum>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<WatchingStatusEnum>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<WatchingStatusEnum>>;
};

export type AllAnimesTileFragmentFragment = { __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined };

export type AnimeListFragmentFragment = { __typename?: 'AnimeList', title: string, id: any };

export type UpdateWatchStatusMutationVariables = Exact<{
  watchStatus: WatchingStatusEnum;
  userId: Scalars['String'];
  animeId: Scalars['UUID'];
}>;


export type UpdateWatchStatusMutation = { __typename?: 'Mutation', updateUserWatchStatus?: { __typename?: 'UpdateUserWatchStatusPayload', clientMutationId?: string | null | undefined } | null | undefined };

export type UpdateUserAnimeScoreMutationVariables = Exact<{
  animeId: Scalars['UUID'];
  userScore: Scalars['Int'];
}>;


export type UpdateUserAnimeScoreMutation = { __typename?: 'Mutation', insertOrUpdateAnimeUserScore?: { __typename?: 'InsertOrUpdateAnimeUserScorePayload', clientMutationId?: string | null | undefined } | null | undefined };

export type UpdateUserEpisodeCountMutationVariables = Exact<{
  animeId: Scalars['UUID'];
  userEpisodesWatched: Scalars['Int'];
  userId: Scalars['String'];
}>;


export type UpdateUserEpisodeCountMutation = { __typename?: 'Mutation', updateUserWatchStatus?: { __typename?: 'UpdateUserWatchStatusPayload', clientMutationId?: string | null | undefined, query?: { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined } | null | undefined } | null | undefined };

export type AddAnimeToUserAnimeListMutationVariables = Exact<{
  animeListId: Scalars['UUID'];
  animeId: Scalars['UUID'];
}>;


export type AddAnimeToUserAnimeListMutation = { __typename?: 'Mutation', createUserAnimeList?: { __typename?: 'CreateUserAnimeListPayload', animeList?: { __typename?: 'AnimeList', title: string, id: any } | null | undefined } | null | undefined };

export type DeleteAnimeFromListMutationVariables = Exact<{
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
}>;


export type DeleteAnimeFromListMutation = { __typename?: 'Mutation', deleteUserAnimeListByAnimeListIdAndAnimeId?: { __typename?: 'DeleteUserAnimeListPayload', clientMutationId?: string | null | undefined, deletedUserAnimeListNodeId?: string | null | undefined, query?: { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined } | null | undefined } | null | undefined };

export type AddAnimeToListMutationVariables = Exact<{
  animeId?: Maybe<Scalars['UUID']>;
  animeListId?: Maybe<Scalars['UUID']>;
}>;


export type AddAnimeToListMutation = { __typename?: 'Mutation', insertAnimeToUserList?: { __typename?: 'InsertAnimeToUserListPayload', clientMutationId?: string | null | undefined, query?: { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined } | null | undefined } | null | undefined };

export type CreateNewListMutationVariables = Exact<{
  userId: Scalars['String'];
  title: Scalars['String'];
}>;


export type CreateNewListMutation = { __typename?: 'Mutation', createAnimeList?: { __typename?: 'CreateAnimeListPayload', animeList?: { __typename?: 'AnimeList', title: string, id: any } | null | undefined } | null | undefined };

export type UpdateUserAnimeListMutationVariables = Exact<{
  animeListId: Scalars['UUID'];
  animeId: Scalars['UUID'];
}>;


export type UpdateUserAnimeListMutation = { __typename?: 'Mutation', updateUserAnimeListByAnimeListIdAndAnimeId?: { __typename?: 'UpdateUserAnimeListPayload', clientMutationId?: string | null | undefined } | null | undefined };

export type UpdateUserAnimeWatchStatusMutationVariables = Exact<{
  userId: Scalars['String'];
  animeId: Scalars['UUID'];
  watchStatus: WatchingStatusEnum;
}>;


export type UpdateUserAnimeWatchStatusMutation = { __typename?: 'Mutation', updateUserWatchStatus?: { __typename?: 'UpdateUserWatchStatusPayload', clientMutationId?: string | null | undefined } | null | undefined };

export type UpsertUserWatchStatusMutationVariables = Exact<{
  watchStatus: WatchingStatusEnum;
  userId: Scalars['String'];
  animeId: Scalars['UUID'];
}>;


export type UpsertUserWatchStatusMutation = { __typename?: 'Mutation', upsertUserWatchStatus?: { __typename?: 'UpsertUserWatchStatusPayload', clientMutationId?: string | null | undefined, query?: { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined } | null | undefined } | null | undefined };

export type CreateNewListAddAnimeMutationVariables = Exact<{
  animeidinput: Scalars['UUID'];
}>;


export type CreateNewListAddAnimeMutation = { __typename?: 'Mutation', createNewListAddAnime?: { __typename?: 'CreateNewListAddAnimePayload', clientMutationId?: string | null | undefined, user?: { __typename?: 'User', animeLists: { __typename?: 'AnimeListsConnection', nodes: Array<{ __typename?: 'AnimeList', title: string, id: any } | null | undefined> } } | null | undefined } | null | undefined };

export type WeeklyAnimesQueryVariables = Exact<{ [key: string]: never; }>;


export type WeeklyAnimesQuery = { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined };

export type UserListsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserListsQuery = { __typename?: 'Query', animeLists?: { __typename?: 'AnimeListsConnection', nodes: Array<{ __typename?: 'AnimeList', id: any, privacy: AnimeListPrivacy, title: string } | null | undefined> } | null | undefined };

export type CurrentlyAiringContinuedQueryVariables = Exact<{
  limit: Scalars['Int'];
  currentSeason: Scalars['String'];
}>;


export type CurrentlyAiringContinuedQuery = { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined };

export type CurrentlyAiringQueryVariables = Exact<{
  limit: Scalars['Int'];
  currentSeason: Scalars['String'];
}>;


export type CurrentlyAiringQuery = { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined };

export type HighestRatedAnimesQueryVariables = Exact<{
  limit: Scalars['Int'];
}>;


export type HighestRatedAnimesQuery = { __typename?: 'Query', allAnimesTiles?: { __typename?: 'AllAnimesTilesConnection', nodes: Array<{ __typename?: 'AllAnimesTile', id?: any | null | undefined, title?: string | null | undefined, url?: string | null | undefined, numberOfEpisodes?: number | null | undefined, averageWatcherRating?: any | null | undefined, userLiked?: boolean | null | undefined, userRating?: any | null | undefined, userWatchStatus?: WatchingStatusEnum | null | undefined, userEpisodeCount?: any | null | undefined, startBroadcastDatetime?: any | null | undefined, airingStatusType?: string | null | undefined } | null | undefined> } | null | undefined };

export type WatchingQueryVariables = Exact<{ [key: string]: never; }>;


export type WatchingQuery = { __typename?: 'Query', allUserAnimes?: { __typename?: 'AllUserAnimeConnection', nodes: Array<{ __typename?: 'AllUserAnime', id?: any | null | undefined, listId?: any | null | undefined, listName?: string | null | undefined, title?: string | null | undefined, url?: string | null | undefined } | null | undefined> } | null | undefined };

export type GetUserAnimeListsQueryVariables = Exact<{
  watchStatus?: Maybe<WatchingStatusEnum>;
}>;


export type GetUserAnimeListsQuery = { __typename?: 'Query', getUserAnimeLists?: { __typename?: 'UserListsConnection', nodes: Array<{ __typename?: 'UserList', id?: any | null | undefined, title?: string | null | undefined, userId?: string | null | undefined, animes?: Array<{ __typename?: 'UserListAnime', title?: string | null | undefined, url?: string | null | undefined, watchStatus?: WatchingStatusEnum | null | undefined, id?: any | null | undefined } | null | undefined> | null | undefined } | null | undefined> } | null | undefined };

export type UserWatchingListsQueryVariables = Exact<{
  watchStatus?: Maybe<WatchingStatusEnum>;
}>;


export type UserWatchingListsQuery = { __typename?: 'Query', animeLists?: { __typename?: 'AnimeListsConnection', nodes: Array<{ __typename?: 'AnimeList', id: any, title: string, userAnimeLists: { __typename?: 'UserAnimeListsConnection', nodes: Array<{ __typename?: 'UserAnimeList', anime?: { __typename?: 'Anime', id: any, title: string, profileImage?: { __typename?: 'Image', url: string } | null | undefined, userWatchStatuses: { __typename?: 'UserWatchStatusesConnection', nodes: Array<{ __typename?: 'UserWatchStatus', watchStatus: WatchingStatusEnum } | null | undefined> } } | null | undefined } | null | undefined> } } | null | undefined> } | null | undefined };

export const AllAnimesTileFragmentFragmentDoc = gql`
    fragment AllAnimesTileFragment on AllAnimesTile {
  id
  title
  url
  numberOfEpisodes
  averageWatcherRating
  userLiked
  userRating
  userWatchStatus
  userEpisodeCount
  startBroadcastDatetime
  airingStatusType
}
    `;
export const AnimeListFragmentFragmentDoc = gql`
    fragment AnimeListFragment on AnimeList {
  title
  id
}
    `;
export const UpdateWatchStatusDocument = gql`
    mutation UpdateWatchStatus($watchStatus: WatchingStatusEnum!, $userId: String!, $animeId: UUID!) {
  updateUserWatchStatus(
    input: {patch: {animeId: $animeId, userId: $userId, watchStatus: $watchStatus}, userId: $userId, animeId: $animeId, clientMutationId: "UpdatedWatchStatus"}
  ) {
    clientMutationId
  }
}
    `;

export function useUpdateWatchStatusMutation() {
  return Urql.useMutation<UpdateWatchStatusMutation, UpdateWatchStatusMutationVariables>(UpdateWatchStatusDocument);
};
export const UpdateUserAnimeScoreDocument = gql`
    mutation UpdateUserAnimeScore($animeId: UUID!, $userScore: Int!) {
  insertOrUpdateAnimeUserScore(
    input: {inputAnimeId: $animeId, inputUserScore: $userScore, clientMutationId: "test"}
  ) {
    clientMutationId
  }
}
    `;

export function useUpdateUserAnimeScoreMutation() {
  return Urql.useMutation<UpdateUserAnimeScoreMutation, UpdateUserAnimeScoreMutationVariables>(UpdateUserAnimeScoreDocument);
};
export const UpdateUserEpisodeCountDocument = gql`
    mutation UpdateUserEpisodeCount($animeId: UUID!, $userEpisodesWatched: Int!, $userId: String!) {
  updateUserWatchStatus(
    input: {patch: {userEpisodesWatched: $userEpisodesWatched}, userId: $userId, animeId: $animeId, clientMutationId: "UpdatedUserEpisodeCount"}
  ) {
    query {
      allAnimesTiles(filter: {id: {equalTo: $animeId}}) {
        nodes {
          ...AllAnimesTileFragment
        }
      }
    }
    clientMutationId
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useUpdateUserEpisodeCountMutation() {
  return Urql.useMutation<UpdateUserEpisodeCountMutation, UpdateUserEpisodeCountMutationVariables>(UpdateUserEpisodeCountDocument);
};
export const AddAnimeToUserAnimeListDocument = gql`
    mutation AddAnimeToUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  createUserAnimeList(
    input: {userAnimeList: {animeListId: $animeListId, animeId: $animeId}}
  ) {
    animeList {
      ...AnimeListFragment
    }
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useAddAnimeToUserAnimeListMutation() {
  return Urql.useMutation<AddAnimeToUserAnimeListMutation, AddAnimeToUserAnimeListMutationVariables>(AddAnimeToUserAnimeListDocument);
};
export const DeleteAnimeFromListDocument = gql`
    mutation DeleteAnimeFromList($animeId: UUID!, $animeListId: UUID!) {
  deleteUserAnimeListByAnimeListIdAndAnimeId(
    input: {animeListId: $animeListId, animeId: $animeId, clientMutationId: "SuccessfulDelete"}
  ) {
    clientMutationId
    deletedUserAnimeListNodeId
    query {
      allAnimesTiles(condition: {id: $animeId}) {
        nodes {
          ...AllAnimesTileFragment
        }
      }
    }
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useDeleteAnimeFromListMutation() {
  return Urql.useMutation<DeleteAnimeFromListMutation, DeleteAnimeFromListMutationVariables>(DeleteAnimeFromListDocument);
};
export const AddAnimeToListDocument = gql`
    mutation AddAnimeToList($animeId: UUID, $animeListId: UUID) {
  insertAnimeToUserList(
    input: {animeId: $animeId, animeListId: $animeListId, clientMutationId: "AnimeAddedToList"}
  ) {
    clientMutationId
    query {
      allAnimesTiles(condition: {id: $animeId}) {
        nodes {
          ...AllAnimesTileFragment
        }
      }
    }
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useAddAnimeToListMutation() {
  return Urql.useMutation<AddAnimeToListMutation, AddAnimeToListMutationVariables>(AddAnimeToListDocument);
};
export const CreateNewListDocument = gql`
    mutation CreateNewList($userId: String!, $title: String!) {
  createAnimeList(input: {animeList: {userId: $userId, title: $title}}) {
    animeList {
      ...AnimeListFragment
    }
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useCreateNewListMutation() {
  return Urql.useMutation<CreateNewListMutation, CreateNewListMutationVariables>(CreateNewListDocument);
};
export const UpdateUserAnimeListDocument = gql`
    mutation updateUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  updateUserAnimeListByAnimeListIdAndAnimeId(
    input: {patch: {animeListId: $animeListId}, animeListId: $animeListId, animeId: $animeId, clientMutationId: "UpdateAnimeList"}
  ) {
    clientMutationId
  }
}
    `;

export function useUpdateUserAnimeListMutation() {
  return Urql.useMutation<UpdateUserAnimeListMutation, UpdateUserAnimeListMutationVariables>(UpdateUserAnimeListDocument);
};
export const UpdateUserAnimeWatchStatusDocument = gql`
    mutation updateUserAnimeWatchStatus($userId: String!, $animeId: UUID!, $watchStatus: WatchingStatusEnum!) {
  updateUserWatchStatus(
    input: {patch: {watchStatus: $watchStatus}, userId: $userId, animeId: $animeId, clientMutationId: "ChangeAnimeWatchStatus"}
  ) {
    clientMutationId
  }
}
    `;

export function useUpdateUserAnimeWatchStatusMutation() {
  return Urql.useMutation<UpdateUserAnimeWatchStatusMutation, UpdateUserAnimeWatchStatusMutationVariables>(UpdateUserAnimeWatchStatusDocument);
};
export const UpsertUserWatchStatusDocument = gql`
    mutation UpsertUserWatchStatus($watchStatus: WatchingStatusEnum!, $userId: String!, $animeId: UUID!) {
  upsertUserWatchStatus(
    input: {userWatchStatus: {userId: $userId, animeId: $animeId, watchStatus: $watchStatus}, clientMutationId: "upsertUserWatchStatus"}
  ) {
    clientMutationId
    query {
      allAnimesTiles(filter: {id: {equalTo: $animeId}}) {
        nodes {
          ...AllAnimesTileFragment
        }
      }
    }
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useUpsertUserWatchStatusMutation() {
  return Urql.useMutation<UpsertUserWatchStatusMutation, UpsertUserWatchStatusMutationVariables>(UpsertUserWatchStatusDocument);
};
export const CreateNewListAddAnimeDocument = gql`
    mutation CreateNewListAddAnime($animeidinput: UUID!) {
  createNewListAddAnime(
    input: {animeidinput: $animeidinput, clientMutationId: "NewListCreatedAndAnimeAdded"}
  ) {
    user {
      animeLists {
        nodes {
          ...AnimeListFragment
        }
      }
    }
    clientMutationId
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useCreateNewListAddAnimeMutation() {
  return Urql.useMutation<CreateNewListAddAnimeMutation, CreateNewListAddAnimeMutationVariables>(CreateNewListAddAnimeDocument);
};
export const WeeklyAnimesDocument = gql`
    query WeeklyAnimes {
  allAnimesTiles(filter: {airingStatusType: {equalTo: "Currently Airing"}}) {
    nodes {
      ...AllAnimesTileFragment
    }
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useWeeklyAnimesQuery(options: Omit<Urql.UseQueryArgs<WeeklyAnimesQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<WeeklyAnimesQuery>({ query: WeeklyAnimesDocument, ...options });
};
export const UserListsDocument = gql`
    query userLists {
  animeLists {
    nodes {
      id
      privacy
      title
    }
  }
}
    `;

export function useUserListsQuery(options: Omit<Urql.UseQueryArgs<UserListsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<UserListsQuery>({ query: UserListsDocument, ...options });
};
export const CurrentlyAiringContinuedDocument = gql`
    query CurrentlyAiringContinued($limit: Int!, $currentSeason: String!) {
  allAnimesTiles(
    first: $limit
    filter: {airingStatusType: {equalTo: "Currently Airing"}, and: {season: {notEqualTo: $currentSeason}}}
  ) {
    nodes {
      ...AllAnimesTileFragment
    }
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useCurrentlyAiringContinuedQuery(options: Omit<Urql.UseQueryArgs<CurrentlyAiringContinuedQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<CurrentlyAiringContinuedQuery>({ query: CurrentlyAiringContinuedDocument, ...options });
};
export const CurrentlyAiringDocument = gql`
    query CurrentlyAiring($limit: Int!, $currentSeason: String!) {
  allAnimesTiles(
    first: $limit
    filter: {airingStatusType: {equalTo: "Currently Airing"}, and: {season: {equalTo: $currentSeason}}}
  ) {
    nodes {
      ...AllAnimesTileFragment
    }
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useCurrentlyAiringQuery(options: Omit<Urql.UseQueryArgs<CurrentlyAiringQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<CurrentlyAiringQuery>({ query: CurrentlyAiringDocument, ...options });
};
export const HighestRatedAnimesDocument = gql`
    query HighestRatedAnimes($limit: Int!) {
  allAnimesTiles(first: $limit) {
    nodes {
      ...AllAnimesTileFragment
    }
  }
}
    ${AllAnimesTileFragmentFragmentDoc}`;

export function useHighestRatedAnimesQuery(options: Omit<Urql.UseQueryArgs<HighestRatedAnimesQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<HighestRatedAnimesQuery>({ query: HighestRatedAnimesDocument, ...options });
};
export const WatchingDocument = gql`
    query Watching {
  allUserAnimes {
    nodes {
      id
      listId
      listName
      title
      url
    }
  }
}
    `;

export function useWatchingQuery(options: Omit<Urql.UseQueryArgs<WatchingQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<WatchingQuery>({ query: WatchingDocument, ...options });
};
export const GetUserAnimeListsDocument = gql`
    query GetUserAnimeLists($watchStatus: WatchingStatusEnum) {
  getUserAnimeLists(watchStatusInput: $watchStatus) {
    nodes {
      id
      title
      userId
      animes {
        title
        url
        watchStatus
        id
      }
    }
  }
}
    `;

export function useGetUserAnimeListsQuery(options: Omit<Urql.UseQueryArgs<GetUserAnimeListsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<GetUserAnimeListsQuery>({ query: GetUserAnimeListsDocument, ...options });
};
export const UserWatchingListsDocument = gql`
    query UserWatchingLists($watchStatus: WatchingStatusEnum) {
  animeLists {
    nodes {
      id
      title
      userAnimeLists {
        nodes {
          anime {
            id
            title
            profileImage {
              url
            }
            userWatchStatuses(condition: {watchStatus: $watchStatus}) {
              nodes {
                watchStatus
              }
            }
          }
        }
      }
    }
  }
}
    `;

export function useUserWatchingListsQuery(options: Omit<Urql.UseQueryArgs<UserWatchingListsQueryVariables>, 'query'> = {}) {
  return Urql.useQuery<UserWatchingListsQuery>({ query: UserWatchingListsDocument, ...options });
};
import { IntrospectionQuery } from 'graphql';
export default {
  "__schema": {
    "queryType": {
      "name": "Query"
    },
    "mutationType": {
      "name": "Mutation"
    },
    "subscriptionType": null,
    "types": [
      {
        "kind": "OBJECT",
        "name": "AddAnimeToListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AgeRatingType",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "animeByAgeRatingId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AgeRatingTypesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AgeRatingTypesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AgeRatingType",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AgeRatingTypesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AiringStatusType",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "animeByAiringStatusId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AiringStatusTypesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AiringStatusTypesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AiringStatusType",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AiringStatusTypesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AllAnimesTile",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genres",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "likes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "studios",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userEpisodeCount",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userLiked",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AllAnimesTilesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AllAnimesTilesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AllAnimesTile",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AllAnimesTilesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AllAnimesTile",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AllUserAnime",
        "fields": [
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genres",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "listId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "listName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AllUserAnimeConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AllUserAnimeEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AllUserAnime",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AllUserAnimeEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AllUserAnime",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AlternateAnimeName",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AlternateAnimeNamesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AlternateAnimeNamesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AlternateAnimeName",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AlternateAnimeNamesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Anime",
        "fields": [
          {
            "name": "ageRating",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatus",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNames",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AlternateAnimeNamesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenres",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeGenresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeLicensorsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducers",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeProducersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStaffConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudios",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStudiosConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScores",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeUserScoresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterPreview",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "StaffResultsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "duration",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "endBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "profileImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterial",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "startBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userAnimeLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeListsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userEpisodeCount",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userLiked",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userWatchStatuses",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserWatchStatusesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeCharacter",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeCharactersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeCharactersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeCharacter",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeCharactersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Anime",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeGenre",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeGenresConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeGenresEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeGenre",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeGenresEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeImage",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeImage",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeInfo",
        "fields": [
          {
            "name": "ageRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "airingStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeProfileImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "duration",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "endBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeInfosConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeInfosEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeInfo",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeInfosEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeInfo",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeLicensor",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeLicensorsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeLicensorsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeLicensor",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeLicensorsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeList",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "privacy",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeListsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeListsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeListsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeList",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeListsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeProducer",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeProducersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeProducersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeProducer",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeProducersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStaff",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStaffConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStaffEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeStaff",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStaffEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStudio",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStudiosConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStudiosEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeStudio",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStudiosEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeUserScore",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userScore",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeUserScoresConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeUserScoresEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "AnimeUserScore",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeUserScoresEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Character",
        "fields": [
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterAnimePreviews",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharacterAnimePreviewsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharacterImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "voiceActors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "VoiceActorsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "CharacterAnimePreview",
        "fields": [
          {
            "name": "animeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeImageUrl",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageUrl",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterAnimePreviewsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterAnimePreviewsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "CharacterAnimePreview",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterAnimePreviewsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterAnimePreview",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterByAnime",
        "fields": [
          {
            "name": "actorFirstName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorLastName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "role",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterByAnimeConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterByAnimeEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "CharacterByAnime",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterByAnimeEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterByAnime",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterImage",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "CharacterImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "CharacterImage",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterRole",
        "fields": [
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "role",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "CharacterRolesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterRolesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "CharacterRole",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterRolesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharactersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharactersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Character",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharactersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAgeRatingTypePayload",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "ageRatingTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAiringStatusTypePayload",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatusTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimePayload",
        "fields": [
          {
            "name": "ageRating",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatus",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "profileImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterial",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateLanguagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "languageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LanguagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateMediaTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "mediaTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "MediaTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateNewListAddAnimePayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreatePersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreatePersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateSeasonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "seasonEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SeasonsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateSourceMaterialTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAgeRatingTypePayload",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "ageRatingTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAgeRatingTypeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAiringStatusTypePayload",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatusTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAiringStatusTypeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAlternateAnimeNameNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeCharacterNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeGenreNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeLicensorNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeListNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimePayload",
        "fields": [
          {
            "name": "ageRating",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatus",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "profileImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterial",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeProducerNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeStaffNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeStudioNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeUserScoreNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedCharacterImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedCharacterNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedCharacterRoleNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedGenreNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteLanguagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedLanguageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "languageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LanguagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedLicensorNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteMediaTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedMediaTypeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "mediaTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "MediaTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeletePersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedPersonImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeletePersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedPersonNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedProducerNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteSeasonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedSeasonNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "seasonEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SeasonsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteSourceMaterialTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedSourceMaterialTypeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedStaffRoleNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedStudioNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserAnimeListNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserAnimeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserWatchStatusNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Genre",
        "fields": [
          {
            "name": "animeGenres",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeGenresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "genre",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "GenresConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "GenresEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Genre",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "GenresEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Image",
        "fields": [
          {
            "name": "animeByProfileImageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharacterImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "charactersByCharacterImageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "peopleByPersonImageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PeopleConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PersonImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "ImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Image",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "InsertAnimeToUserListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "InsertOrUpdateAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Language",
        "fields": [
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "LanguagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "LanguagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Language",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "LanguagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Licensor",
        "fields": [
          {
            "name": "animeLicensors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeLicensorsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "LicensorsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "LicensorsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Licensor",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "LicensorsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "MediaType",
        "fields": [
          {
            "name": "animes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "MediaTypesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "MediaTypesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "MediaType",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "MediaTypesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Mutation",
        "fields": [
          {
            "name": "addAnimeToList",
            "type": {
              "kind": "OBJECT",
              "name": "AddAnimeToListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAgeRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAiringStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnime",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "CreateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreateCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CreateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createGenre",
            "type": {
              "kind": "OBJECT",
              "name": "CreateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreateImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createLanguage",
            "type": {
              "kind": "OBJECT",
              "name": "CreateLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "CreateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createMediaType",
            "type": {
              "kind": "OBJECT",
              "name": "CreateMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createNewListAddAnime",
            "type": {
              "kind": "OBJECT",
              "name": "CreateNewListAddAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createPerson",
            "type": {
              "kind": "OBJECT",
              "name": "CreatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createPersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreatePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createProducer",
            "type": {
              "kind": "OBJECT",
              "name": "CreateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createSeason",
            "type": {
              "kind": "OBJECT",
              "name": "CreateSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createSourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "CreateSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "CreateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createStudio",
            "type": {
              "kind": "OBJECT",
              "name": "CreateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUser",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUserAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAgeRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAgeRatingTypeByAgeRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAgeRatingTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAiringStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAiringStatusTypeByAiringStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAiringStatusTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAlternateAnimeNameByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnime",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeListByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeListByUserIdAndTitle",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStaffByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeUserScoreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteGenre",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteGenreByGenre",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLanguage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLanguageByLanguage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLanguageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLicensorByLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteMediaType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteMediaTypeByMediaType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteMediaTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePerson",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteProducer",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteProducerByProducer",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteSeason",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteSeasonByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteSeasonBySeason",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteSourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteSourceMaterialTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteSourceMaterialTypeBySourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStaffRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStaffRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStudio",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStudioByStudio",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUser",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserAnimeListByAnimeListIdAndAnimeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserWatchStatusByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "insertAnimeToUserList",
            "type": {
              "kind": "OBJECT",
              "name": "InsertAnimeToUserListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "insertOrUpdateAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "InsertOrUpdateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "registerUser",
            "type": {
              "kind": "OBJECT",
              "name": "RegisterUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAgeRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAgeRatingTypeByAgeRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAgeRatingTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAiringStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAiringStatusTypeByAiringStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAiringStatusTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAlternateAnimeNameByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeListByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeListByUserIdAndTitle",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStaffByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeUserScoreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateGenreByGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLanguage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLanguageByLanguage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLanguageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLicensorByLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateMediaType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateMediaTypeByMediaType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateMediaTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePerson",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateProducerByProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateSeason",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateSeasonByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateSeasonBySeason",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateSourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateSourceMaterialTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateSourceMaterialTypeBySourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStaffRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStaffRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStudioByStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUser",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserAnimeListByAnimeListIdAndAnimeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserWatchStatusByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "upsertAgeRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAgeRatingTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAiringStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAiringStatusTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertLanguage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertLanguagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertMediaType",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertMediaTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertPerson",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertPersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertPersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertPersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertSeason",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertSeasonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertSourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertSourceMaterialTypePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUser",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUserAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "INTERFACE",
        "name": "Node",
        "fields": [
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [],
        "possibleTypes": [
          {
            "kind": "OBJECT",
            "name": "AgeRatingType"
          },
          {
            "kind": "OBJECT",
            "name": "AiringStatusType"
          },
          {
            "kind": "OBJECT",
            "name": "AlternateAnimeName"
          },
          {
            "kind": "OBJECT",
            "name": "Anime"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeGenre"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeImage"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeLicensor"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeList"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeProducer"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeStaff"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeStudio"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeUserScore"
          },
          {
            "kind": "OBJECT",
            "name": "Character"
          },
          {
            "kind": "OBJECT",
            "name": "CharacterImage"
          },
          {
            "kind": "OBJECT",
            "name": "CharacterRole"
          },
          {
            "kind": "OBJECT",
            "name": "Genre"
          },
          {
            "kind": "OBJECT",
            "name": "Image"
          },
          {
            "kind": "OBJECT",
            "name": "Language"
          },
          {
            "kind": "OBJECT",
            "name": "Licensor"
          },
          {
            "kind": "OBJECT",
            "name": "MediaType"
          },
          {
            "kind": "OBJECT",
            "name": "Person"
          },
          {
            "kind": "OBJECT",
            "name": "PersonImage"
          },
          {
            "kind": "OBJECT",
            "name": "Producer"
          },
          {
            "kind": "OBJECT",
            "name": "Query"
          },
          {
            "kind": "OBJECT",
            "name": "Season"
          },
          {
            "kind": "OBJECT",
            "name": "SourceMaterialType"
          },
          {
            "kind": "OBJECT",
            "name": "StaffRole"
          },
          {
            "kind": "OBJECT",
            "name": "Studio"
          },
          {
            "kind": "OBJECT",
            "name": "User"
          },
          {
            "kind": "OBJECT",
            "name": "UserAnime"
          },
          {
            "kind": "OBJECT",
            "name": "UserWatchStatus"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "PageInfo",
        "fields": [
          {
            "name": "endCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "hasNextPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "hasPreviousPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "startCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PeopleConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PeopleEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Person",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PeopleEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Person",
        "fields": [
          {
            "name": "alternateNames",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStaffConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "firstName",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "lastName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nativeName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PersonImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "PersonImage",
        "fields": [
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "PersonImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PersonImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "PersonImage",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PersonImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Producer",
        "fields": [
          {
            "name": "animeProducers",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeProducersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "ProducersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ProducersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Producer",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ProducersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Query",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "ageRatingTypeByAgeRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": [
              {
                "name": "ageRatingType",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "ageRatingTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "ageRatingTypes",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingTypesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "airingStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "airingStatusTypeByAiringStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": [
              {
                "name": "airingStatusType",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "airingStatusTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "airingStatusTypes",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusTypesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "allAnimesTiles",
            "type": {
              "kind": "OBJECT",
              "name": "AllAnimesTilesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "allUserAnimes",
            "type": {
              "kind": "OBJECT",
              "name": "AllUserAnimeConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "alternateAnimeNameByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "alternateAnimeNames",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": [
              {
                "name": "malId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeCharacterByAnimeIdAndCharacterIdAndLanguageIdAndPersonId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "characterId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "languageId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "personId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeCharacters",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "genreId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenres",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "imageId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeImages",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeInfos",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeInfosConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "licensorId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensors",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeListByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeListByUserIdAndTitle",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": [
              {
                "name": "title",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeLists",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "producerId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducers",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "personId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "staffRoleId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffs",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "studioId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudios",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScoreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScores",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animes",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterAnimePreviews",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterAnimePreviewsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterByAnimes",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterByAnimeConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": [
              {
                "name": "malId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": [
              {
                "name": "characterId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "imageId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterImages",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": [
              {
                "name": "role",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterRoles",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characters",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "currentRole",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "currentUser",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "genreByGenre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": [
              {
                "name": "genre",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "genreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "genres",
            "type": {
              "kind": "OBJECT",
              "name": "GenresConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "getUser",
            "type": {
              "kind": "OBJECT",
              "name": "SmallUser",
              "ofType": null
            },
            "args": [
              {
                "name": "uId",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "getUserAnimeLists",
            "type": {
              "kind": "OBJECT",
              "name": "UserListsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "watchStatusInput",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "imageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "images",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "languageByLanguage",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": [
              {
                "name": "language",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "languageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "languages",
            "type": {
              "kind": "OBJECT",
              "name": "LanguagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "licensorByLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": [
              {
                "name": "licensor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "licensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "licensors",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "mediaTypeByMediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": [
              {
                "name": "mediaType",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "mediaTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "mediaTypes",
            "type": {
              "kind": "OBJECT",
              "name": "MediaTypesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "node",
            "type": {
              "kind": "INTERFACE",
              "name": "Node",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "people",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": [
              {
                "name": "malId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": [
              {
                "name": "imageId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "personId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personImages",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "producerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "producerByProducer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": [
              {
                "name": "producer",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "producers",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Query",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "seasonByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "seasonBySeason",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": [
              {
                "name": "season",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "seasons",
            "type": {
              "kind": "OBJECT",
              "name": "SeasonsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "sourceMaterialTypeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "sourceMaterialTypeBySourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": [
              {
                "name": "sourceMaterialType",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "sourceMaterialTypes",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialTypesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": [
              {
                "name": "role",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffRoles",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "studioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "studioByStudio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": [
              {
                "name": "studio",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "studios",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimeListByAnimeListIdAndAnimeId",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "animeListId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimeLists",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimes",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatusByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatuses",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "users",
            "type": {
              "kind": "OBJECT",
              "name": "UsersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "voiceActors",
            "type": {
              "kind": "OBJECT",
              "name": "VoiceActorsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "RegisterUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Season",
        "fields": [
          {
            "name": "animes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "SeasonsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SeasonsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Season",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SeasonsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SmallUser",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "username",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SourceMaterialType",
        "fields": [
          {
            "name": "animeBySourceMaterialId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "SourceMaterialTypesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SourceMaterialTypesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "SourceMaterialType",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SourceMaterialTypesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffResult",
        "fields": [
          {
            "name": "actorFirstName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorLastName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "personId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffResultsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StaffResultsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "StaffResult",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffResultsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "StaffResult",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffRole",
        "fields": [
          {
            "name": "animeStaffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStaffConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "role",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "StaffRolesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StaffRolesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "StaffRole",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffRolesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Studio",
        "fields": [
          {
            "name": "animeStudios",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStudiosConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "StudiosConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StudiosEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Studio",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StudiosEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAgeRatingTypePayload",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "ageRatingTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAiringStatusTypePayload",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatusTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimePayload",
        "fields": [
          {
            "name": "ageRating",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatus",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "profileImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterial",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateLanguagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "languageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LanguagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateMediaTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "mediaTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "MediaTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdatePersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdatePersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateSeasonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "seasonEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SeasonsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateSourceMaterialTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAgeRatingTypePayload",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "ageRatingTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAiringStatusTypePayload",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatusTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimePayload",
        "fields": [
          {
            "name": "ageRating",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "airingStatus",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "profileImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterial",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertLanguagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "Language",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "languageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LanguagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertMediaTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "OBJECT",
              "name": "MediaType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "mediaTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "MediaTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertPersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertPersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertSeasonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "OBJECT",
              "name": "Season",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "seasonEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SeasonsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertSourceMaterialTypePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sourceMaterialTypeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialTypesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "User",
        "fields": [
          {
            "name": "animeLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeListsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScores",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeUserScoresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userAnimes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatuses",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserWatchStatusesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "UserAnime",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnimeEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "UserAnime",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeList",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeListsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnimeListsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "UserAnimeList",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeListsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserList",
        "fields": [
          {
            "name": "animes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserListAnime",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserListAnime",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "watchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserListsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserListsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "UserList",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserListsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "UserList",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserWatchStatus",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEpisodesWatched",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "watchStatus",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "UserWatchStatusesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserWatchStatusesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "UserWatchStatus",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserWatchStatusesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UsersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UsersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "User",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UsersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "VoiceActor",
        "fields": [
          {
            "name": "actorFirstName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorLastName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "personImageUrl",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "voiceActorId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "VoiceActorsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "VoiceActorsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "VoiceActor",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "VoiceActorsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "OBJECT",
              "name": "VoiceActor",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "SCALAR",
        "name": "Any"
      }
    ],
    "directives": []
  }
} as unknown as IntrospectionQuery;