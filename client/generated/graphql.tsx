import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A floating point number that requires more precision than IEEE 754 binary 64 */
  BigFloat: any;
  /**
   * A signed eight-byte integer. The upper big integer values are greater than the
   * max value for a JavaScript number. Therefore all big integers will be output as
   * strings and not numbers.
   */
  BigInt: any;
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any;
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
   */
  Datetime: any;
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: any;
};

/** All input for the `addAnimeToList` mutation. */
export type AddAnimeToListInput = {
  animeId?: InputMaybe<Scalars['UUID']>;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  privacy?: InputMaybe<AnimeListPrivacy>;
  title?: InputMaybe<Scalars['String']>;
  userId?: InputMaybe<Scalars['String']>;
  watchStatus?: InputMaybe<Scalars['String']>;
};

/** The output of our `addAnimeToList` mutation. */
export type AddAnimeToListPayload = {
  __typename?: 'AddAnimeToListPayload';
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our `addAnimeToList` mutation. */
export type AddAnimeToListPayloadAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};

export type AgeRating = {
  __typename?: 'AgeRating';
  ageRatingType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['BigInt']>;
};

/**
 * A condition to be used against `AgeRating` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AgeRatingCondition = {
  /** Checks for equality with the object’s `ageRatingType` field. */
  ageRatingType?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
};

/** A filter to be used against `AgeRating` object types. All fields are combined with a logical ‘and.’ */
export type AgeRatingFilter = {
  /** Filter by the object’s `ageRatingType` field. */
  ageRatingType?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AgeRatingFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AgeRatingFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AgeRatingFilter>>;
};

export enum AgeRatingTypes {
  GAllAges = 'G_ALL_AGES',
  Pg_13Teens_13OrOlder = 'PG_13_TEENS_13_OR_OLDER',
  PgChildren = 'PG_CHILDREN',
  R_17ViolenceProfanity = 'R_17_VIOLENCE_PROFANITY_',
  RMildNudity = 'R_MILD_NUDITY'
}

/** A filter to be used against AgeRatingTypes fields. All fields are combined with a logical ‘and.’ */
export type AgeRatingTypesFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<AgeRatingTypes>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<AgeRatingTypes>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<AgeRatingTypes>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<AgeRatingTypes>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<AgeRatingTypes>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<AgeRatingTypes>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<AgeRatingTypes>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<AgeRatingTypes>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<AgeRatingTypes>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<AgeRatingTypes>>;
};

/** A connection to a list of `AgeRating` values. */
export type AgeRatingsConnection = {
  __typename?: 'AgeRatingsConnection';
  /** A list of edges which contains the `AgeRating` and cursor to aid in pagination. */
  edges: Array<AgeRatingsEdge>;
  /** A list of `AgeRating` objects. */
  nodes: Array<AgeRating>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AgeRating` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AgeRating` edge in the connection. */
export type AgeRatingsEdge = {
  __typename?: 'AgeRatingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AgeRating` at the end of the edge. */
  node: AgeRating;
};

/** Methods to use when ordering `AgeRating`. */
export enum AgeRatingsOrderBy {
  AgeRatingTypeAsc = 'AGE_RATING_TYPE_ASC',
  AgeRatingTypeDesc = 'AGE_RATING_TYPE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL'
}

export type AiringStatus = {
  __typename?: 'AiringStatus';
  airingStatusType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['BigInt']>;
};

/**
 * A condition to be used against `AiringStatus` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AiringStatusCondition = {
  /** Checks for equality with the object’s `airingStatusType` field. */
  airingStatusType?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
};

/** A filter to be used against `AiringStatus` object types. All fields are combined with a logical ‘and.’ */
export type AiringStatusFilter = {
  /** Filter by the object’s `airingStatusType` field. */
  airingStatusType?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AiringStatusFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AiringStatusFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AiringStatusFilter>>;
};

export enum AiringStatusTypes {
  CurrentlyAiring = 'CURRENTLY_AIRING',
  FinishedAiring = 'FINISHED_AIRING'
}

/** A filter to be used against AiringStatusTypes fields. All fields are combined with a logical ‘and.’ */
export type AiringStatusTypesFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<AiringStatusTypes>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<AiringStatusTypes>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<AiringStatusTypes>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<AiringStatusTypes>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<AiringStatusTypes>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<AiringStatusTypes>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<AiringStatusTypes>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<AiringStatusTypes>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<AiringStatusTypes>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<AiringStatusTypes>>;
};

/** A connection to a list of `AiringStatus` values. */
export type AiringStatusesConnection = {
  __typename?: 'AiringStatusesConnection';
  /** A list of edges which contains the `AiringStatus` and cursor to aid in pagination. */
  edges: Array<AiringStatusesEdge>;
  /** A list of `AiringStatus` objects. */
  nodes: Array<AiringStatus>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AiringStatus` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AiringStatus` edge in the connection. */
export type AiringStatusesEdge = {
  __typename?: 'AiringStatusesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AiringStatus` at the end of the edge. */
  node: AiringStatus;
};

/** Methods to use when ordering `AiringStatus`. */
export enum AiringStatusesOrderBy {
  AiringStatusTypeAsc = 'AIRING_STATUS_TYPE_ASC',
  AiringStatusTypeDesc = 'AIRING_STATUS_TYPE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL'
}

export type AlternateAnimeName = Node & {
  __typename?: 'AlternateAnimeName';
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  id: Scalars['UUID'];
  name: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AlternateAnimeName` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AlternateAnimeNameCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `AlternateAnimeName` object types. All fields are combined with a logical ‘and.’ */
export type AlternateAnimeNameFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AlternateAnimeNameFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AlternateAnimeNameFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AlternateAnimeNameFilter>>;
};

/** An input for mutations affecting `AlternateAnimeName` */
export type AlternateAnimeNameInput = {
  animeId: Scalars['UUID'];
  id?: InputMaybe<Scalars['UUID']>;
  name: Scalars['String'];
};

/** Represents an update to a `AlternateAnimeName`. Fields that are set will be updated. */
export type AlternateAnimeNamePatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  id?: InputMaybe<Scalars['UUID']>;
  name?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `AlternateAnimeName` values. */
export type AlternateAnimeNamesConnection = {
  __typename?: 'AlternateAnimeNamesConnection';
  /** A list of edges which contains the `AlternateAnimeName` and cursor to aid in pagination. */
  edges: Array<AlternateAnimeNamesEdge>;
  /** A list of `AlternateAnimeName` objects. */
  nodes: Array<AlternateAnimeName>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AlternateAnimeName` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AlternateAnimeName` edge in the connection. */
export type AlternateAnimeNamesEdge = {
  __typename?: 'AlternateAnimeNamesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AlternateAnimeName` at the end of the edge. */
  node: AlternateAnimeName;
};

/** Methods to use when ordering `AlternateAnimeName`. */
export enum AlternateAnimeNamesOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Anime = Node & {
  __typename?: 'Anime';
  ageRatingType?: Maybe<AgeRatingTypes>;
  airingStatusType?: Maybe<AiringStatusTypes>;
  allNamesString?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `AlternateAnimeName`. */
  alternateAnimeNames: AlternateAnimeNamesConnection;
  /** Reads and enables pagination through a set of `AlternateAnimeName`. */
  alternateNames: AlternateAnimeNamesConnection;
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  /** Reads and enables pagination through a set of `AnimeGenre`. */
  animeGenres: AnimeGenresConnection;
  /** Reads and enables pagination through a set of `AnimeImage`. */
  animeImages: AnimeImagesConnection;
  /** Reads and enables pagination through a set of `AnimeLicensor`. */
  animeLicensors: AnimeLicensorsConnection;
  /** Reads and enables pagination through a set of `AnimeProducer`. */
  animeProducers: AnimeProducersConnection;
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs: AnimeStaffConnection;
  /** Reads and enables pagination through a set of `AnimeStreamingOn`. */
  animeStreamingOns: AnimeStreamingOnsConnection;
  /** Reads and enables pagination through a set of `AnimeStudio`. */
  animeStudios: AnimeStudiosConnection;
  /** Reads and enables pagination through a set of `AnimeUserScore`. */
  animeUserScores: AnimeUserScoresConnection;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  /** Reads and enables pagination through a set of `StaffResult`. */
  characterPreview: StaffResultsConnection;
  coverImage?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  /** Reads and enables pagination through a set of `Genre`. */
  genreList: GenresConnection;
  id: Scalars['UUID'];
  /** Reads and enables pagination through a set of `Licensor`. */
  licensorList: LicensorsConnection;
  malId?: Maybe<Scalars['Int']>;
  mediaType?: Maybe<MediaTypes>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  officialWebsite?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `Producer`. */
  producerList: ProducersConnection;
  season?: Maybe<Season>;
  seasonYear?: Maybe<Scalars['Int']>;
  sourceMaterialType?: Maybe<SourceMaterialTypes>;
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  /** Reads and enables pagination through a set of `Studio`. */
  studioList: StudiosConnection;
  title: Scalars['String'];
  twitterHandle?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `UserAnimeList`. */
  userAnimeLists: UserAnimeListsConnection;
  /** Reads and enables pagination through a set of `UserAnime`. */
  userAnimes: UserAnimeConnection;
  userEpisodeCount?: Maybe<Scalars['BigFloat']>;
  userLiked?: Maybe<Scalars['Boolean']>;
  userRating?: Maybe<Scalars['BigFloat']>;
  userWatchStatus?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `UserWatchStatus`. */
  userWatchStatuses: UserWatchStatusesConnection;
  youtubeTrailerId?: Maybe<Scalars['String']>;
};


export type AnimeAlternateAnimeNamesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AlternateAnimeNameCondition>;
  filter?: InputMaybe<AlternateAnimeNameFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AlternateAnimeNamesOrderBy>>;
};


export type AnimeAlternateNamesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<AlternateAnimeNameFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type AnimeAnimeCharactersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeCharacterCondition>;
  filter?: InputMaybe<AnimeCharacterFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};


export type AnimeAnimeGenresArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeGenreCondition>;
  filter?: InputMaybe<AnimeGenreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeGenresOrderBy>>;
};


export type AnimeAnimeImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeImageCondition>;
  filter?: InputMaybe<AnimeImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeImagesOrderBy>>;
};


export type AnimeAnimeLicensorsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeLicensorCondition>;
  filter?: InputMaybe<AnimeLicensorFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeLicensorsOrderBy>>;
};


export type AnimeAnimeProducersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeProducerCondition>;
  filter?: InputMaybe<AnimeProducerFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeProducersOrderBy>>;
};


export type AnimeAnimeStaffsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStaffCondition>;
  filter?: InputMaybe<AnimeStaffFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};


export type AnimeAnimeStreamingOnsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStreamingOnCondition>;
  filter?: InputMaybe<AnimeStreamingOnFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStreamingOnsOrderBy>>;
};


export type AnimeAnimeStudiosArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStudioCondition>;
  filter?: InputMaybe<AnimeStudioFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStudiosOrderBy>>;
};


export type AnimeAnimeUserScoresArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeUserScoreCondition>;
  filter?: InputMaybe<AnimeUserScoreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};


export type AnimeCharacterPreviewArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<StaffResultFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type AnimeGenreListArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<GenreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type AnimeLicensorListArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<LicensorFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type AnimeProducerListArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<ProducerFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type AnimeStudioListArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<StudioFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type AnimeUserAnimeListsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserAnimeListCondition>;
  filter?: InputMaybe<UserAnimeListFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};


export type AnimeUserAnimesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserAnimeCondition>;
  filter?: InputMaybe<UserAnimeFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserAnimeOrderBy>>;
};


export type AnimeUserWatchStatusesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserWatchStatusCondition>;
  filter?: InputMaybe<UserWatchStatusFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserWatchStatusesOrderBy>>;
};

export type AnimeCharacter = Node & {
  __typename?: 'AnimeCharacter';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  characterId: Scalars['UUID'];
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  characterRoleId: Scalars['UUID'];
  language: LanguageType;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  personId: Scalars['UUID'];
};

/**
 * A condition to be used against `AnimeCharacter` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeCharacterCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `characterId` field. */
  characterId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `characterRoleId` field. */
  characterRoleId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `language` field. */
  language?: InputMaybe<LanguageType>;
  /** Checks for equality with the object’s `personId` field. */
  personId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeCharacter` object types. All fields are combined with a logical ‘and.’ */
export type AnimeCharacterFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeCharacterFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `characterId` field. */
  characterId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `characterRoleId` field. */
  characterRoleId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `language` field. */
  language?: InputMaybe<LanguageTypeFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeCharacterFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeCharacterFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: InputMaybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeCharacter` */
export type AnimeCharacterInput = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  characterRoleId: Scalars['UUID'];
  language: LanguageType;
  personId: Scalars['UUID'];
};

/** Represents an update to a `AnimeCharacter`. Fields that are set will be updated. */
export type AnimeCharacterPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  characterId?: InputMaybe<Scalars['UUID']>;
  characterRoleId?: InputMaybe<Scalars['UUID']>;
  language?: InputMaybe<LanguageType>;
  personId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeCharacter` values. */
export type AnimeCharactersConnection = {
  __typename?: 'AnimeCharactersConnection';
  /** A list of edges which contains the `AnimeCharacter` and cursor to aid in pagination. */
  edges: Array<AnimeCharactersEdge>;
  /** A list of `AnimeCharacter` objects. */
  nodes: Array<AnimeCharacter>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeCharacter` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeCharacter` edge in the connection. */
export type AnimeCharactersEdge = {
  __typename?: 'AnimeCharactersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeCharacter` at the end of the edge. */
  node: AnimeCharacter;
};

/** Methods to use when ordering `AnimeCharacter`. */
export enum AnimeCharactersOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  CharacterByCharacterIdCharacterImageIdAsc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_ASC',
  CharacterByCharacterIdCharacterImageIdDesc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_DESC',
  CharacterByCharacterIdDescriptionAsc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_ASC',
  CharacterByCharacterIdDescriptionDesc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_DESC',
  CharacterByCharacterIdIdAsc = 'CHARACTER_BY_CHARACTER_ID__ID_ASC',
  CharacterByCharacterIdIdDesc = 'CHARACTER_BY_CHARACTER_ID__ID_DESC',
  CharacterByCharacterIdMalIdAsc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_ASC',
  CharacterByCharacterIdMalIdDesc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_DESC',
  CharacterByCharacterIdNameAsc = 'CHARACTER_BY_CHARACTER_ID__NAME_ASC',
  CharacterByCharacterIdNameDesc = 'CHARACTER_BY_CHARACTER_ID__NAME_DESC',
  CharacterIdAsc = 'CHARACTER_ID_ASC',
  CharacterIdDesc = 'CHARACTER_ID_DESC',
  CharacterRoleByCharacterRoleIdIdAsc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ID_ASC',
  CharacterRoleByCharacterRoleIdIdDesc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ID_DESC',
  CharacterRoleByCharacterRoleIdRoleAsc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ROLE_ASC',
  CharacterRoleByCharacterRoleIdRoleDesc = 'CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ROLE_DESC',
  CharacterRoleIdAsc = 'CHARACTER_ROLE_ID_ASC',
  CharacterRoleIdDesc = 'CHARACTER_ROLE_ID_DESC',
  LanguageAsc = 'LANGUAGE_ASC',
  LanguageDesc = 'LANGUAGE_DESC',
  Natural = 'NATURAL',
  PersonByPersonIdAlternateNamesAsc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_ASC',
  PersonByPersonIdAlternateNamesDesc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_DESC',
  PersonByPersonIdDescriptionAsc = 'PERSON_BY_PERSON_ID__DESCRIPTION_ASC',
  PersonByPersonIdDescriptionDesc = 'PERSON_BY_PERSON_ID__DESCRIPTION_DESC',
  PersonByPersonIdFirstNameAsc = 'PERSON_BY_PERSON_ID__FIRST_NAME_ASC',
  PersonByPersonIdFirstNameDesc = 'PERSON_BY_PERSON_ID__FIRST_NAME_DESC',
  PersonByPersonIdIdAsc = 'PERSON_BY_PERSON_ID__ID_ASC',
  PersonByPersonIdIdDesc = 'PERSON_BY_PERSON_ID__ID_DESC',
  PersonByPersonIdLastNameAsc = 'PERSON_BY_PERSON_ID__LAST_NAME_ASC',
  PersonByPersonIdLastNameDesc = 'PERSON_BY_PERSON_ID__LAST_NAME_DESC',
  PersonByPersonIdMalIdAsc = 'PERSON_BY_PERSON_ID__MAL_ID_ASC',
  PersonByPersonIdMalIdDesc = 'PERSON_BY_PERSON_ID__MAL_ID_DESC',
  PersonByPersonIdNativeNameAsc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_ASC',
  PersonByPersonIdNativeNameDesc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_DESC',
  PersonByPersonIdPersonImageIdAsc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_ASC',
  PersonByPersonIdPersonImageIdDesc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_DESC',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Anime` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type AnimeCondition = {
  /** Checks for equality with the object’s `ageRatingType` field. */
  ageRatingType?: InputMaybe<AgeRatingTypes>;
  /** Checks for equality with the object’s `airingStatusType` field. */
  airingStatusType?: InputMaybe<AiringStatusTypes>;
  /** Checks for equality with the object’s `averageWatcherRating` field. */
  averageWatcherRating?: InputMaybe<Scalars['BigFloat']>;
  /** Checks for equality with the object’s `coverImage` field. */
  coverImage?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `duration` field. */
  duration?: InputMaybe<Scalars['Int']>;
  /** Checks for equality with the object’s `endBroadcastDatetime` field. */
  endBroadcastDatetime?: InputMaybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `malId` field. */
  malId?: InputMaybe<Scalars['Int']>;
  /** Checks for equality with the object’s `mediaType` field. */
  mediaType?: InputMaybe<MediaTypes>;
  /** Checks for equality with the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: InputMaybe<Scalars['Int']>;
  /** Checks for equality with the object’s `officialWebsite` field. */
  officialWebsite?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `season` field. */
  season?: InputMaybe<Season>;
  /** Checks for equality with the object’s `seasonYear` field. */
  seasonYear?: InputMaybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceMaterialType` field. */
  sourceMaterialType?: InputMaybe<SourceMaterialTypes>;
  /** Checks for equality with the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: InputMaybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `twitterHandle` field. */
  twitterHandle?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `youtubeTrailerId` field. */
  youtubeTrailerId?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `Anime` values. */
export type AnimeConnection = {
  __typename?: 'AnimeConnection';
  /** A list of edges which contains the `Anime` and cursor to aid in pagination. */
  edges: Array<AnimeEdge>;
  /** A list of `Anime` objects. */
  nodes: Array<Anime>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Anime` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Anime` edge in the connection. */
export type AnimeEdge = {
  __typename?: 'AnimeEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Anime` at the end of the edge. */
  node: Anime;
};

/** A filter to be used against `Anime` object types. All fields are combined with a logical ‘and.’ */
export type AnimeFilter = {
  /** Filter by the object’s `ageRatingType` field. */
  ageRatingType?: InputMaybe<AgeRatingTypesFilter>;
  /** Filter by the object’s `airingStatusType` field. */
  airingStatusType?: InputMaybe<AiringStatusTypesFilter>;
  /** Filter by the object’s `allNamesString` field. */
  allNamesString?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeFilter>>;
  /** Filter by the object’s `averageWatcherRating` field. */
  averageWatcherRating?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `coverImage` field. */
  coverImage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `duration` field. */
  duration?: InputMaybe<IntFilter>;
  /** Filter by the object’s `endBroadcastDatetime` field. */
  endBroadcastDatetime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: InputMaybe<MediaTypesFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeFilter>;
  /** Filter by the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: InputMaybe<IntFilter>;
  /** Filter by the object’s `officialWebsite` field. */
  officialWebsite?: InputMaybe<StringFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeFilter>>;
  /** Filter by the object’s `season` field. */
  season?: InputMaybe<SeasonFilter>;
  /** Filter by the object’s `seasonYear` field. */
  seasonYear?: InputMaybe<IntFilter>;
  /** Filter by the object’s `sourceMaterialType` field. */
  sourceMaterialType?: InputMaybe<SourceMaterialTypesFilter>;
  /** Filter by the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `twitterHandle` field. */
  twitterHandle?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userEpisodeCount` field. */
  userEpisodeCount?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `userLiked` field. */
  userLiked?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `userRating` field. */
  userRating?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `userWatchStatus` field. */
  userWatchStatus?: InputMaybe<StringFilter>;
  /** Filter by the object’s `youtubeTrailerId` field. */
  youtubeTrailerId?: InputMaybe<StringFilter>;
};

export type AnimeGenre = Node & {
  __typename?: 'AnimeGenre';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  genreId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AnimeGenre` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeGenreCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `genreId` field. */
  genreId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeGenre` object types. All fields are combined with a logical ‘and.’ */
export type AnimeGenreFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeGenreFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `genreId` field. */
  genreId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeGenreFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeGenreFilter>>;
};

/** An input for mutations affecting `AnimeGenre` */
export type AnimeGenreInput = {
  animeId: Scalars['UUID'];
  genreId: Scalars['UUID'];
};

/** Represents an update to a `AnimeGenre`. Fields that are set will be updated. */
export type AnimeGenrePatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  genreId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeGenre` values. */
export type AnimeGenresConnection = {
  __typename?: 'AnimeGenresConnection';
  /** A list of edges which contains the `AnimeGenre` and cursor to aid in pagination. */
  edges: Array<AnimeGenresEdge>;
  /** A list of `AnimeGenre` objects. */
  nodes: Array<AnimeGenre>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeGenre` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeGenre` edge in the connection. */
export type AnimeGenresEdge = {
  __typename?: 'AnimeGenresEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeGenre` at the end of the edge. */
  node: AnimeGenre;
};

/** Methods to use when ordering `AnimeGenre`. */
export enum AnimeGenresOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  GenreByGenreIdGenreAsc = 'GENRE_BY_GENRE_ID__GENRE_ASC',
  GenreByGenreIdGenreDesc = 'GENRE_BY_GENRE_ID__GENRE_DESC',
  GenreByGenreIdIdAsc = 'GENRE_BY_GENRE_ID__ID_ASC',
  GenreByGenreIdIdDesc = 'GENRE_BY_GENRE_ID__ID_DESC',
  GenreIdAsc = 'GENRE_ID_ASC',
  GenreIdDesc = 'GENRE_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AnimeImage = Node & {
  __typename?: 'AnimeImage';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  imageId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AnimeImage` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeImageCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `imageId` field. */
  imageId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeImage` object types. All fields are combined with a logical ‘and.’ */
export type AnimeImageFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeImageFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `imageId` field. */
  imageId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeImageFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeImageFilter>>;
};

/** An input for mutations affecting `AnimeImage` */
export type AnimeImageInput = {
  animeId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};

/** Represents an update to a `AnimeImage`. Fields that are set will be updated. */
export type AnimeImagePatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  imageId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeImage` values. */
export type AnimeImagesConnection = {
  __typename?: 'AnimeImagesConnection';
  /** A list of edges which contains the `AnimeImage` and cursor to aid in pagination. */
  edges: Array<AnimeImagesEdge>;
  /** A list of `AnimeImage` objects. */
  nodes: Array<AnimeImage>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeImage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeImage` edge in the connection. */
export type AnimeImagesEdge = {
  __typename?: 'AnimeImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeImage` at the end of the edge. */
  node: AnimeImage;
};

/** Methods to use when ordering `AnimeImage`. */
export enum AnimeImagesOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  ImageByImageIdIdAsc = 'IMAGE_BY_IMAGE_ID__ID_ASC',
  ImageByImageIdIdDesc = 'IMAGE_BY_IMAGE_ID__ID_DESC',
  ImageByImageIdTitleAsc = 'IMAGE_BY_IMAGE_ID__TITLE_ASC',
  ImageByImageIdTitleDesc = 'IMAGE_BY_IMAGE_ID__TITLE_DESC',
  ImageByImageIdUrlAsc = 'IMAGE_BY_IMAGE_ID__URL_ASC',
  ImageByImageIdUrlDesc = 'IMAGE_BY_IMAGE_ID__URL_DESC',
  ImageIdAsc = 'IMAGE_ID_ASC',
  ImageIdDesc = 'IMAGE_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** An input for mutations affecting `Anime` */
export type AnimeInput = {
  ageRatingType?: InputMaybe<AgeRatingTypes>;
  airingStatusType?: InputMaybe<AiringStatusTypes>;
  averageWatcherRating?: InputMaybe<Scalars['BigFloat']>;
  coverImage?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['Int']>;
  endBroadcastDatetime?: InputMaybe<Scalars['Datetime']>;
  id?: InputMaybe<Scalars['UUID']>;
  malId?: InputMaybe<Scalars['Int']>;
  mediaType?: InputMaybe<MediaTypes>;
  numberOfEpisodes?: InputMaybe<Scalars['Int']>;
  officialWebsite?: InputMaybe<Scalars['String']>;
  season?: InputMaybe<Season>;
  seasonYear?: InputMaybe<Scalars['Int']>;
  sourceMaterialType?: InputMaybe<SourceMaterialTypes>;
  startBroadcastDatetime?: InputMaybe<Scalars['Datetime']>;
  title: Scalars['String'];
  twitterHandle?: InputMaybe<Scalars['String']>;
  youtubeTrailerId?: InputMaybe<Scalars['String']>;
};

export type AnimeLicensor = Node & {
  __typename?: 'AnimeLicensor';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  licensorId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `AnimeLicensor` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeLicensorCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `licensorId` field. */
  licensorId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeLicensor` object types. All fields are combined with a logical ‘and.’ */
export type AnimeLicensorFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeLicensorFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `licensorId` field. */
  licensorId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeLicensorFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeLicensorFilter>>;
};

/** An input for mutations affecting `AnimeLicensor` */
export type AnimeLicensorInput = {
  animeId: Scalars['UUID'];
  licensorId: Scalars['UUID'];
};

/** Represents an update to a `AnimeLicensor`. Fields that are set will be updated. */
export type AnimeLicensorPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  licensorId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeLicensor` values. */
export type AnimeLicensorsConnection = {
  __typename?: 'AnimeLicensorsConnection';
  /** A list of edges which contains the `AnimeLicensor` and cursor to aid in pagination. */
  edges: Array<AnimeLicensorsEdge>;
  /** A list of `AnimeLicensor` objects. */
  nodes: Array<AnimeLicensor>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeLicensor` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeLicensor` edge in the connection. */
export type AnimeLicensorsEdge = {
  __typename?: 'AnimeLicensorsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeLicensor` at the end of the edge. */
  node: AnimeLicensor;
};

/** Methods to use when ordering `AnimeLicensor`. */
export enum AnimeLicensorsOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  LicensorByLicensorIdIdAsc = 'LICENSOR_BY_LICENSOR_ID__ID_ASC',
  LicensorByLicensorIdIdDesc = 'LICENSOR_BY_LICENSOR_ID__ID_DESC',
  LicensorByLicensorIdLicensorAsc = 'LICENSOR_BY_LICENSOR_ID__LICENSOR_ASC',
  LicensorByLicensorIdLicensorDesc = 'LICENSOR_BY_LICENSOR_ID__LICENSOR_DESC',
  LicensorIdAsc = 'LICENSOR_ID_ASC',
  LicensorIdDesc = 'LICENSOR_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AnimeList = Node & {
  __typename?: 'AnimeList';
  createdAt?: Maybe<Scalars['Datetime']>;
  id: Scalars['UUID'];
  isDefault?: Maybe<Scalars['Boolean']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  privacy: AnimeListPrivacy;
  title: Scalars['String'];
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
  /** Reads and enables pagination through a set of `UserAnimeList`. */
  userAnimeLists: UserAnimeListsConnection;
};


export type AnimeListUserAnimeListsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserAnimeListCondition>;
  filter?: InputMaybe<UserAnimeListFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};

/**
 * A condition to be used against `AnimeList` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeListCondition = {
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: InputMaybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `isDefault` field. */
  isDefault?: InputMaybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `privacy` field. */
  privacy?: InputMaybe<AnimeListPrivacy>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `AnimeList` object types. All fields are combined with a logical ‘and.’ */
export type AnimeListFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeListFilter>>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `isDefault` field. */
  isDefault?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeListFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeListFilter>>;
  /** Filter by the object’s `privacy` field. */
  privacy?: InputMaybe<AnimeListPrivacyFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `AnimeList` */
export type AnimeListInput = {
  createdAt?: InputMaybe<Scalars['Datetime']>;
  id?: InputMaybe<Scalars['UUID']>;
  isDefault?: InputMaybe<Scalars['Boolean']>;
  privacy?: InputMaybe<AnimeListPrivacy>;
  title?: InputMaybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** Represents an update to a `AnimeList`. Fields that are set will be updated. */
export type AnimeListPatch = {
  createdAt?: InputMaybe<Scalars['Datetime']>;
  id?: InputMaybe<Scalars['UUID']>;
  isDefault?: InputMaybe<Scalars['Boolean']>;
  privacy?: InputMaybe<AnimeListPrivacy>;
  title?: InputMaybe<Scalars['String']>;
  userId?: InputMaybe<Scalars['String']>;
};

export enum AnimeListPrivacy {
  FriendsOnly = 'FRIENDS_ONLY',
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

/** A filter to be used against AnimeListPrivacy fields. All fields are combined with a logical ‘and.’ */
export type AnimeListPrivacyFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<AnimeListPrivacy>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<AnimeListPrivacy>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<AnimeListPrivacy>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<AnimeListPrivacy>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<AnimeListPrivacy>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<AnimeListPrivacy>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<AnimeListPrivacy>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<AnimeListPrivacy>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<AnimeListPrivacy>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<AnimeListPrivacy>>;
};

/** A connection to a list of `AnimeList` values. */
export type AnimeListsConnection = {
  __typename?: 'AnimeListsConnection';
  /** A list of edges which contains the `AnimeList` and cursor to aid in pagination. */
  edges: Array<AnimeListsEdge>;
  /** A list of `AnimeList` objects. */
  nodes: Array<AnimeList>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeList` edge in the connection. */
export type AnimeListsEdge = {
  __typename?: 'AnimeListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeList` at the end of the edge. */
  node: AnimeList;
};

/** Methods to use when ordering `AnimeList`. */
export enum AnimeListsOrderBy {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsDefaultAsc = 'IS_DEFAULT_ASC',
  IsDefaultDesc = 'IS_DEFAULT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  PrivacyAsc = 'PRIVACY_ASC',
  PrivacyDesc = 'PRIVACY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UserAnimeListsByAnimeListIdCountAsc = 'USER_ANIME_LISTS_BY_ANIME_LIST_ID__COUNT_ASC',
  UserAnimeListsByAnimeListIdCountDesc = 'USER_ANIME_LISTS_BY_ANIME_LIST_ID__COUNT_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** Methods to use when ordering `Anime`. */
export enum AnimeOrderBy {
  AgeRatingTypeAsc = 'AGE_RATING_TYPE_ASC',
  AgeRatingTypeDesc = 'AGE_RATING_TYPE_DESC',
  AiringStatusTypeAsc = 'AIRING_STATUS_TYPE_ASC',
  AiringStatusTypeDesc = 'AIRING_STATUS_TYPE_DESC',
  AlternateAnimeNamesByAnimeIdCountAsc = 'ALTERNATE_ANIME_NAMES_BY_ANIME_ID__COUNT_ASC',
  AlternateAnimeNamesByAnimeIdCountDesc = 'ALTERNATE_ANIME_NAMES_BY_ANIME_ID__COUNT_DESC',
  AnimeCharactersByAnimeIdCountAsc = 'ANIME_CHARACTERS_BY_ANIME_ID__COUNT_ASC',
  AnimeCharactersByAnimeIdCountDesc = 'ANIME_CHARACTERS_BY_ANIME_ID__COUNT_DESC',
  AnimeGenresByAnimeIdCountAsc = 'ANIME_GENRES_BY_ANIME_ID__COUNT_ASC',
  AnimeGenresByAnimeIdCountDesc = 'ANIME_GENRES_BY_ANIME_ID__COUNT_DESC',
  AnimeImagesByAnimeIdCountAsc = 'ANIME_IMAGES_BY_ANIME_ID__COUNT_ASC',
  AnimeImagesByAnimeIdCountDesc = 'ANIME_IMAGES_BY_ANIME_ID__COUNT_DESC',
  AnimeLicensorsByAnimeIdCountAsc = 'ANIME_LICENSORS_BY_ANIME_ID__COUNT_ASC',
  AnimeLicensorsByAnimeIdCountDesc = 'ANIME_LICENSORS_BY_ANIME_ID__COUNT_DESC',
  AnimeProducersByAnimeIdCountAsc = 'ANIME_PRODUCERS_BY_ANIME_ID__COUNT_ASC',
  AnimeProducersByAnimeIdCountDesc = 'ANIME_PRODUCERS_BY_ANIME_ID__COUNT_DESC',
  AnimeStaffByAnimeIdCountAsc = 'ANIME_STAFF_BY_ANIME_ID__COUNT_ASC',
  AnimeStaffByAnimeIdCountDesc = 'ANIME_STAFF_BY_ANIME_ID__COUNT_DESC',
  AnimeStreamingOnsByAnimeIdCountAsc = 'ANIME_STREAMING_ONS_BY_ANIME_ID__COUNT_ASC',
  AnimeStreamingOnsByAnimeIdCountDesc = 'ANIME_STREAMING_ONS_BY_ANIME_ID__COUNT_DESC',
  AnimeStudiosByAnimeIdCountAsc = 'ANIME_STUDIOS_BY_ANIME_ID__COUNT_ASC',
  AnimeStudiosByAnimeIdCountDesc = 'ANIME_STUDIOS_BY_ANIME_ID__COUNT_DESC',
  AnimeUserScoresByAnimeIdCountAsc = 'ANIME_USER_SCORES_BY_ANIME_ID__COUNT_ASC',
  AnimeUserScoresByAnimeIdCountDesc = 'ANIME_USER_SCORES_BY_ANIME_ID__COUNT_DESC',
  AverageWatcherRatingAsc = 'AVERAGE_WATCHER_RATING_ASC',
  AverageWatcherRatingDesc = 'AVERAGE_WATCHER_RATING_DESC',
  CoverImageAsc = 'COVER_IMAGE_ASC',
  CoverImageDesc = 'COVER_IMAGE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EndBroadcastDatetimeAsc = 'END_BROADCAST_DATETIME_ASC',
  EndBroadcastDatetimeDesc = 'END_BROADCAST_DATETIME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  MalIdAsc = 'MAL_ID_ASC',
  MalIdDesc = 'MAL_ID_DESC',
  MediaTypeAsc = 'MEDIA_TYPE_ASC',
  MediaTypeDesc = 'MEDIA_TYPE_DESC',
  Natural = 'NATURAL',
  NumberOfEpisodesAsc = 'NUMBER_OF_EPISODES_ASC',
  NumberOfEpisodesDesc = 'NUMBER_OF_EPISODES_DESC',
  OfficialWebsiteAsc = 'OFFICIAL_WEBSITE_ASC',
  OfficialWebsiteDesc = 'OFFICIAL_WEBSITE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SeasonAsc = 'SEASON_ASC',
  SeasonDesc = 'SEASON_DESC',
  SeasonYearAsc = 'SEASON_YEAR_ASC',
  SeasonYearDesc = 'SEASON_YEAR_DESC',
  SourceMaterialTypeAsc = 'SOURCE_MATERIAL_TYPE_ASC',
  SourceMaterialTypeDesc = 'SOURCE_MATERIAL_TYPE_DESC',
  StartBroadcastDatetimeAsc = 'START_BROADCAST_DATETIME_ASC',
  StartBroadcastDatetimeDesc = 'START_BROADCAST_DATETIME_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TwitterHandleAsc = 'TWITTER_HANDLE_ASC',
  TwitterHandleDesc = 'TWITTER_HANDLE_DESC',
  UserAnimeByAnimeIdCountAsc = 'USER_ANIME_BY_ANIME_ID__COUNT_ASC',
  UserAnimeByAnimeIdCountDesc = 'USER_ANIME_BY_ANIME_ID__COUNT_DESC',
  UserAnimeListsByAnimeIdCountAsc = 'USER_ANIME_LISTS_BY_ANIME_ID__COUNT_ASC',
  UserAnimeListsByAnimeIdCountDesc = 'USER_ANIME_LISTS_BY_ANIME_ID__COUNT_DESC',
  UserWatchStatusesByAnimeIdCountAsc = 'USER_WATCH_STATUSES_BY_ANIME_ID__COUNT_ASC',
  UserWatchStatusesByAnimeIdCountDesc = 'USER_WATCH_STATUSES_BY_ANIME_ID__COUNT_DESC',
  YoutubeTrailerIdAsc = 'YOUTUBE_TRAILER_ID_ASC',
  YoutubeTrailerIdDesc = 'YOUTUBE_TRAILER_ID_DESC'
}

/** Represents an update to a `Anime`. Fields that are set will be updated. */
export type AnimePatch = {
  ageRatingType?: InputMaybe<AgeRatingTypes>;
  airingStatusType?: InputMaybe<AiringStatusTypes>;
  averageWatcherRating?: InputMaybe<Scalars['BigFloat']>;
  coverImage?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['Int']>;
  endBroadcastDatetime?: InputMaybe<Scalars['Datetime']>;
  id?: InputMaybe<Scalars['UUID']>;
  malId?: InputMaybe<Scalars['Int']>;
  mediaType?: InputMaybe<MediaTypes>;
  numberOfEpisodes?: InputMaybe<Scalars['Int']>;
  officialWebsite?: InputMaybe<Scalars['String']>;
  season?: InputMaybe<Season>;
  seasonYear?: InputMaybe<Scalars['Int']>;
  sourceMaterialType?: InputMaybe<SourceMaterialTypes>;
  startBroadcastDatetime?: InputMaybe<Scalars['Datetime']>;
  title?: InputMaybe<Scalars['String']>;
  twitterHandle?: InputMaybe<Scalars['String']>;
  youtubeTrailerId?: InputMaybe<Scalars['String']>;
};

export type AnimeProducer = Node & {
  __typename?: 'AnimeProducer';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  producerId: Scalars['UUID'];
};

/**
 * A condition to be used against `AnimeProducer` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeProducerCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `producerId` field. */
  producerId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeProducer` object types. All fields are combined with a logical ‘and.’ */
export type AnimeProducerFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeProducerFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeProducerFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeProducerFilter>>;
  /** Filter by the object’s `producerId` field. */
  producerId?: InputMaybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeProducer` */
export type AnimeProducerInput = {
  animeId: Scalars['UUID'];
  producerId: Scalars['UUID'];
};

/** Represents an update to a `AnimeProducer`. Fields that are set will be updated. */
export type AnimeProducerPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  producerId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeProducer` values. */
export type AnimeProducersConnection = {
  __typename?: 'AnimeProducersConnection';
  /** A list of edges which contains the `AnimeProducer` and cursor to aid in pagination. */
  edges: Array<AnimeProducersEdge>;
  /** A list of `AnimeProducer` objects. */
  nodes: Array<AnimeProducer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeProducer` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeProducer` edge in the connection. */
export type AnimeProducersEdge = {
  __typename?: 'AnimeProducersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeProducer` at the end of the edge. */
  node: AnimeProducer;
};

/** Methods to use when ordering `AnimeProducer`. */
export enum AnimeProducersOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProducerByProducerIdIdAsc = 'PRODUCER_BY_PRODUCER_ID__ID_ASC',
  ProducerByProducerIdIdDesc = 'PRODUCER_BY_PRODUCER_ID__ID_DESC',
  ProducerByProducerIdProducerAsc = 'PRODUCER_BY_PRODUCER_ID__PRODUCER_ASC',
  ProducerByProducerIdProducerDesc = 'PRODUCER_BY_PRODUCER_ID__PRODUCER_DESC',
  ProducerIdAsc = 'PRODUCER_ID_ASC',
  ProducerIdDesc = 'PRODUCER_ID_DESC'
}

export type AnimeStaff = Node & {
  __typename?: 'AnimeStaff';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  personId: Scalars['UUID'];
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
  staffRoleId: Scalars['UUID'];
};

/**
 * A condition to be used against `AnimeStaff` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeStaffCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personId` field. */
  personId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `staffRoleId` field. */
  staffRoleId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeStaff` values. */
export type AnimeStaffConnection = {
  __typename?: 'AnimeStaffConnection';
  /** A list of edges which contains the `AnimeStaff` and cursor to aid in pagination. */
  edges: Array<AnimeStaffEdge>;
  /** A list of `AnimeStaff` objects. */
  nodes: Array<AnimeStaff>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeStaff` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeStaff` edge in the connection. */
export type AnimeStaffEdge = {
  __typename?: 'AnimeStaffEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeStaff` at the end of the edge. */
  node: AnimeStaff;
};

/** A filter to be used against `AnimeStaff` object types. All fields are combined with a logical ‘and.’ */
export type AnimeStaffFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeStaffFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeStaffFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeStaffFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `staffRoleId` field. */
  staffRoleId?: InputMaybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeStaff` */
export type AnimeStaffInput = {
  animeId: Scalars['UUID'];
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};

/** Methods to use when ordering `AnimeStaff`. */
export enum AnimeStaffOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PersonByPersonIdAlternateNamesAsc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_ASC',
  PersonByPersonIdAlternateNamesDesc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_DESC',
  PersonByPersonIdDescriptionAsc = 'PERSON_BY_PERSON_ID__DESCRIPTION_ASC',
  PersonByPersonIdDescriptionDesc = 'PERSON_BY_PERSON_ID__DESCRIPTION_DESC',
  PersonByPersonIdFirstNameAsc = 'PERSON_BY_PERSON_ID__FIRST_NAME_ASC',
  PersonByPersonIdFirstNameDesc = 'PERSON_BY_PERSON_ID__FIRST_NAME_DESC',
  PersonByPersonIdIdAsc = 'PERSON_BY_PERSON_ID__ID_ASC',
  PersonByPersonIdIdDesc = 'PERSON_BY_PERSON_ID__ID_DESC',
  PersonByPersonIdLastNameAsc = 'PERSON_BY_PERSON_ID__LAST_NAME_ASC',
  PersonByPersonIdLastNameDesc = 'PERSON_BY_PERSON_ID__LAST_NAME_DESC',
  PersonByPersonIdMalIdAsc = 'PERSON_BY_PERSON_ID__MAL_ID_ASC',
  PersonByPersonIdMalIdDesc = 'PERSON_BY_PERSON_ID__MAL_ID_DESC',
  PersonByPersonIdNativeNameAsc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_ASC',
  PersonByPersonIdNativeNameDesc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_DESC',
  PersonByPersonIdPersonImageIdAsc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_ASC',
  PersonByPersonIdPersonImageIdDesc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_DESC',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StaffRoleByStaffRoleIdIdAsc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ID_ASC',
  StaffRoleByStaffRoleIdIdDesc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ID_DESC',
  StaffRoleByStaffRoleIdRoleAsc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ROLE_ASC',
  StaffRoleByStaffRoleIdRoleDesc = 'STAFF_ROLE_BY_STAFF_ROLE_ID__ROLE_DESC',
  StaffRoleIdAsc = 'STAFF_ROLE_ID_ASC',
  StaffRoleIdDesc = 'STAFF_ROLE_ID_DESC'
}

/** Represents an update to a `AnimeStaff`. Fields that are set will be updated. */
export type AnimeStaffPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  personId?: InputMaybe<Scalars['UUID']>;
  staffRoleId?: InputMaybe<Scalars['UUID']>;
};

export type AnimeStreamingOn = Node & {
  __typename?: 'AnimeStreamingOn';
  /** Reads a single `Anime` that is related to this `AnimeStreamingOn`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  streamServiceId: StreamingServices;
  url?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `AnimeStreamingOn` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeStreamingOnCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `streamServiceId` field. */
  streamServiceId?: InputMaybe<StreamingServices>;
  /** Checks for equality with the object’s `url` field. */
  url?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `AnimeStreamingOn` object types. All fields are combined with a logical ‘and.’ */
export type AnimeStreamingOnFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeStreamingOnFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeStreamingOnFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeStreamingOnFilter>>;
  /** Filter by the object’s `streamServiceId` field. */
  streamServiceId?: InputMaybe<StreamingServicesFilter>;
  /** Filter by the object’s `url` field. */
  url?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `AnimeStreamingOn` */
export type AnimeStreamingOnInput = {
  animeId: Scalars['UUID'];
  streamServiceId: StreamingServices;
  url?: InputMaybe<Scalars['String']>;
};

/** Represents an update to a `AnimeStreamingOn`. Fields that are set will be updated. */
export type AnimeStreamingOnPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  streamServiceId?: InputMaybe<StreamingServices>;
  url?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `AnimeStreamingOn` values. */
export type AnimeStreamingOnsConnection = {
  __typename?: 'AnimeStreamingOnsConnection';
  /** A list of edges which contains the `AnimeStreamingOn` and cursor to aid in pagination. */
  edges: Array<AnimeStreamingOnsEdge>;
  /** A list of `AnimeStreamingOn` objects. */
  nodes: Array<AnimeStreamingOn>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeStreamingOn` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeStreamingOn` edge in the connection. */
export type AnimeStreamingOnsEdge = {
  __typename?: 'AnimeStreamingOnsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeStreamingOn` at the end of the edge. */
  node: AnimeStreamingOn;
};

/** Methods to use when ordering `AnimeStreamingOn`. */
export enum AnimeStreamingOnsOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StreamServiceIdAsc = 'STREAM_SERVICE_ID_ASC',
  StreamServiceIdDesc = 'STREAM_SERVICE_ID_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

export type AnimeStudio = Node & {
  __typename?: 'AnimeStudio';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
  studioId: Scalars['UUID'];
};

/**
 * A condition to be used against `AnimeStudio` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type AnimeStudioCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `studioId` field. */
  studioId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `AnimeStudio` object types. All fields are combined with a logical ‘and.’ */
export type AnimeStudioFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeStudioFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeStudioFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeStudioFilter>>;
  /** Filter by the object’s `studioId` field. */
  studioId?: InputMaybe<UuidFilter>;
};

/** An input for mutations affecting `AnimeStudio` */
export type AnimeStudioInput = {
  animeId: Scalars['UUID'];
  studioId: Scalars['UUID'];
};

/** Represents an update to a `AnimeStudio`. Fields that are set will be updated. */
export type AnimeStudioPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  studioId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `AnimeStudio` values. */
export type AnimeStudiosConnection = {
  __typename?: 'AnimeStudiosConnection';
  /** A list of edges which contains the `AnimeStudio` and cursor to aid in pagination. */
  edges: Array<AnimeStudiosEdge>;
  /** A list of `AnimeStudio` objects. */
  nodes: Array<AnimeStudio>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeStudio` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeStudio` edge in the connection. */
export type AnimeStudiosEdge = {
  __typename?: 'AnimeStudiosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeStudio` at the end of the edge. */
  node: AnimeStudio;
};

/** Methods to use when ordering `AnimeStudio`. */
export enum AnimeStudiosOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StudioByStudioIdIdAsc = 'STUDIO_BY_STUDIO_ID__ID_ASC',
  StudioByStudioIdIdDesc = 'STUDIO_BY_STUDIO_ID__ID_DESC',
  StudioByStudioIdStudioAsc = 'STUDIO_BY_STUDIO_ID__STUDIO_ASC',
  StudioByStudioIdStudioDesc = 'STUDIO_BY_STUDIO_ID__STUDIO_DESC',
  StudioIdAsc = 'STUDIO_ID_ASC',
  StudioIdDesc = 'STUDIO_ID_DESC'
}

export type AnimeUserScore = Node & {
  __typename?: 'AnimeUserScore';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
  userId: Scalars['String'];
  userScore: Scalars['BigFloat'];
};

/**
 * A condition to be used against `AnimeUserScore` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AnimeUserScoreCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `userScore` field. */
  userScore?: InputMaybe<Scalars['BigFloat']>;
};

/** A filter to be used against `AnimeUserScore` object types. All fields are combined with a logical ‘and.’ */
export type AnimeUserScoreFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AnimeUserScoreFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AnimeUserScoreFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AnimeUserScoreFilter>>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userScore` field. */
  userScore?: InputMaybe<BigFloatFilter>;
};

/** An input for mutations affecting `AnimeUserScore` */
export type AnimeUserScoreInput = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
  userScore: Scalars['BigFloat'];
};

/** Represents an update to a `AnimeUserScore`. Fields that are set will be updated. */
export type AnimeUserScorePatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  userId?: InputMaybe<Scalars['String']>;
  userScore?: InputMaybe<Scalars['BigFloat']>;
};

/** A connection to a list of `AnimeUserScore` values. */
export type AnimeUserScoresConnection = {
  __typename?: 'AnimeUserScoresConnection';
  /** A list of edges which contains the `AnimeUserScore` and cursor to aid in pagination. */
  edges: Array<AnimeUserScoresEdge>;
  /** A list of `AnimeUserScore` objects. */
  nodes: Array<AnimeUserScore>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AnimeUserScore` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AnimeUserScore` edge in the connection. */
export type AnimeUserScoresEdge = {
  __typename?: 'AnimeUserScoresEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AnimeUserScore` at the end of the edge. */
  node: AnimeUserScore;
};

/** Methods to use when ordering `AnimeUserScore`. */
export enum AnimeUserScoresOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  UserScoreAsc = 'USER_SCORE_ASC',
  UserScoreDesc = 'USER_SCORE_DESC'
}

export type AvailableLanguage = {
  __typename?: 'AvailableLanguage';
  id?: Maybe<Scalars['BigInt']>;
  language?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `AvailableLanguage` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AvailableLanguageCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `language` field. */
  language?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `AvailableLanguage` object types. All fields are combined with a logical ‘and.’ */
export type AvailableLanguageFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AvailableLanguageFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `language` field. */
  language?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AvailableLanguageFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AvailableLanguageFilter>>;
};

/** A connection to a list of `AvailableLanguage` values. */
export type AvailableLanguagesConnection = {
  __typename?: 'AvailableLanguagesConnection';
  /** A list of edges which contains the `AvailableLanguage` and cursor to aid in pagination. */
  edges: Array<AvailableLanguagesEdge>;
  /** A list of `AvailableLanguage` objects. */
  nodes: Array<AvailableLanguage>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AvailableLanguage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AvailableLanguage` edge in the connection. */
export type AvailableLanguagesEdge = {
  __typename?: 'AvailableLanguagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AvailableLanguage` at the end of the edge. */
  node: AvailableLanguage;
};

/** Methods to use when ordering `AvailableLanguage`. */
export enum AvailableLanguagesOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LanguageAsc = 'LANGUAGE_ASC',
  LanguageDesc = 'LANGUAGE_DESC',
  Natural = 'NATURAL'
}

/** A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’ */
export type BigFloatFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['BigFloat']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['BigFloat']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['BigFloat']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['BigFloat']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['BigFloat']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['BigFloat']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['BigFloat']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['BigFloat']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['BigFloat']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['BigFloat']>>;
};

/** A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’ */
export type BigIntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['BigInt']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['BigInt']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['BigInt']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['BigInt']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['BigInt']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['BigInt']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['BigInt']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['BigInt']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['BigInt']>>;
};

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Boolean']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Boolean']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Boolean']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Boolean']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Boolean']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Boolean']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Boolean']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Boolean']>>;
};

/** All input for the `changeUsername` mutation. */
export type ChangeUsernameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  usernameInput: Scalars['String'];
};

/** The output of our `changeUsername` mutation. */
export type ChangeUsernamePayload = {
  __typename?: 'ChangeUsernamePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  string?: Maybe<Scalars['String']>;
};

export type Character = Node & {
  __typename?: 'Character';
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /** Reads and enables pagination through a set of `CharacterImage`. */
  characterImages: CharacterImagesConnection;
  description?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  malId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type CharacterAnimeCharactersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeCharacterCondition>;
  filter?: InputMaybe<AnimeCharacterFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};


export type CharacterCharacterImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<CharacterImageCondition>;
  filter?: InputMaybe<CharacterImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<CharacterImagesOrderBy>>;
};

/**
 * A condition to be used against `Character` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type CharacterCondition = {
  /** Checks for equality with the object’s `characterImageId` field. */
  characterImageId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `malId` field. */
  malId?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `Character` object types. All fields are combined with a logical ‘and.’ */
export type CharacterFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<CharacterFilter>>;
  /** Filter by the object’s `characterImageId` field. */
  characterImageId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<CharacterFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<CharacterFilter>>;
};

export type CharacterImage = Node & {
  __typename?: 'CharacterImage';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  characterId: Scalars['UUID'];
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  imageId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/**
 * A condition to be used against `CharacterImage` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type CharacterImageCondition = {
  /** Checks for equality with the object’s `characterId` field. */
  characterId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `imageId` field. */
  imageId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `CharacterImage` object types. All fields are combined with a logical ‘and.’ */
export type CharacterImageFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<CharacterImageFilter>>;
  /** Filter by the object’s `characterId` field. */
  characterId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `imageId` field. */
  imageId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<CharacterImageFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<CharacterImageFilter>>;
};

/** An input for mutations affecting `CharacterImage` */
export type CharacterImageInput = {
  characterId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};

/** Represents an update to a `CharacterImage`. Fields that are set will be updated. */
export type CharacterImagePatch = {
  characterId?: InputMaybe<Scalars['UUID']>;
  imageId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `CharacterImage` values. */
export type CharacterImagesConnection = {
  __typename?: 'CharacterImagesConnection';
  /** A list of edges which contains the `CharacterImage` and cursor to aid in pagination. */
  edges: Array<CharacterImagesEdge>;
  /** A list of `CharacterImage` objects. */
  nodes: Array<CharacterImage>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CharacterImage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CharacterImage` edge in the connection. */
export type CharacterImagesEdge = {
  __typename?: 'CharacterImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CharacterImage` at the end of the edge. */
  node: CharacterImage;
};

/** Methods to use when ordering `CharacterImage`. */
export enum CharacterImagesOrderBy {
  CharacterByCharacterIdCharacterImageIdAsc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_ASC',
  CharacterByCharacterIdCharacterImageIdDesc = 'CHARACTER_BY_CHARACTER_ID__CHARACTER_IMAGE_ID_DESC',
  CharacterByCharacterIdDescriptionAsc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_ASC',
  CharacterByCharacterIdDescriptionDesc = 'CHARACTER_BY_CHARACTER_ID__DESCRIPTION_DESC',
  CharacterByCharacterIdIdAsc = 'CHARACTER_BY_CHARACTER_ID__ID_ASC',
  CharacterByCharacterIdIdDesc = 'CHARACTER_BY_CHARACTER_ID__ID_DESC',
  CharacterByCharacterIdMalIdAsc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_ASC',
  CharacterByCharacterIdMalIdDesc = 'CHARACTER_BY_CHARACTER_ID__MAL_ID_DESC',
  CharacterByCharacterIdNameAsc = 'CHARACTER_BY_CHARACTER_ID__NAME_ASC',
  CharacterByCharacterIdNameDesc = 'CHARACTER_BY_CHARACTER_ID__NAME_DESC',
  CharacterIdAsc = 'CHARACTER_ID_ASC',
  CharacterIdDesc = 'CHARACTER_ID_DESC',
  ImageByImageIdIdAsc = 'IMAGE_BY_IMAGE_ID__ID_ASC',
  ImageByImageIdIdDesc = 'IMAGE_BY_IMAGE_ID__ID_DESC',
  ImageByImageIdTitleAsc = 'IMAGE_BY_IMAGE_ID__TITLE_ASC',
  ImageByImageIdTitleDesc = 'IMAGE_BY_IMAGE_ID__TITLE_DESC',
  ImageByImageIdUrlAsc = 'IMAGE_BY_IMAGE_ID__URL_ASC',
  ImageByImageIdUrlDesc = 'IMAGE_BY_IMAGE_ID__URL_DESC',
  ImageIdAsc = 'IMAGE_ID_ASC',
  ImageIdDesc = 'IMAGE_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** An input for mutations affecting `Character` */
export type CharacterInput = {
  characterImageId?: InputMaybe<Scalars['UUID']>;
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['UUID']>;
  malId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Represents an update to a `Character`. Fields that are set will be updated. */
export type CharacterPatch = {
  characterImageId?: InputMaybe<Scalars['UUID']>;
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['UUID']>;
  malId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type CharacterRole = Node & {
  __typename?: 'CharacterRole';
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  role: Scalars['String'];
};


export type CharacterRoleAnimeCharactersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeCharacterCondition>;
  filter?: InputMaybe<AnimeCharacterFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};

/**
 * A condition to be used against `CharacterRole` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type CharacterRoleCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `role` field. */
  role?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `CharacterRole` object types. All fields are combined with a logical ‘and.’ */
export type CharacterRoleFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<CharacterRoleFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<CharacterRoleFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<CharacterRoleFilter>>;
  /** Filter by the object’s `role` field. */
  role?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `CharacterRole` */
export type CharacterRoleInput = {
  id?: InputMaybe<Scalars['UUID']>;
  role: Scalars['String'];
};

/** Represents an update to a `CharacterRole`. Fields that are set will be updated. */
export type CharacterRolePatch = {
  id?: InputMaybe<Scalars['UUID']>;
  role?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `CharacterRole` values. */
export type CharacterRolesConnection = {
  __typename?: 'CharacterRolesConnection';
  /** A list of edges which contains the `CharacterRole` and cursor to aid in pagination. */
  edges: Array<CharacterRolesEdge>;
  /** A list of `CharacterRole` objects. */
  nodes: Array<CharacterRole>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CharacterRole` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CharacterRole` edge in the connection. */
export type CharacterRolesEdge = {
  __typename?: 'CharacterRolesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CharacterRole` at the end of the edge. */
  node: CharacterRole;
};

/** Methods to use when ordering `CharacterRole`. */
export enum CharacterRolesOrderBy {
  AnimeCharactersByCharacterRoleIdCountAsc = 'ANIME_CHARACTERS_BY_CHARACTER_ROLE_ID__COUNT_ASC',
  AnimeCharactersByCharacterRoleIdCountDesc = 'ANIME_CHARACTERS_BY_CHARACTER_ROLE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RoleAsc = 'ROLE_ASC',
  RoleDesc = 'ROLE_DESC'
}

/** A connection to a list of `Character` values. */
export type CharactersConnection = {
  __typename?: 'CharactersConnection';
  /** A list of edges which contains the `Character` and cursor to aid in pagination. */
  edges: Array<CharactersEdge>;
  /** A list of `Character` objects. */
  nodes: Array<Character>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Character` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Character` edge in the connection. */
export type CharactersEdge = {
  __typename?: 'CharactersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Character` at the end of the edge. */
  node: Character;
};

/** Methods to use when ordering `Character`. */
export enum CharactersOrderBy {
  AnimeCharactersByCharacterIdCountAsc = 'ANIME_CHARACTERS_BY_CHARACTER_ID__COUNT_ASC',
  AnimeCharactersByCharacterIdCountDesc = 'ANIME_CHARACTERS_BY_CHARACTER_ID__COUNT_DESC',
  CharacterImagesByCharacterIdCountAsc = 'CHARACTER_IMAGES_BY_CHARACTER_ID__COUNT_ASC',
  CharacterImagesByCharacterIdCountDesc = 'CHARACTER_IMAGES_BY_CHARACTER_ID__COUNT_DESC',
  CharacterImageIdAsc = 'CHARACTER_IMAGE_ID_ASC',
  CharacterImageIdDesc = 'CHARACTER_IMAGE_ID_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ImageByCharacterImageIdIdAsc = 'IMAGE_BY_CHARACTER_IMAGE_ID__ID_ASC',
  ImageByCharacterImageIdIdDesc = 'IMAGE_BY_CHARACTER_IMAGE_ID__ID_DESC',
  ImageByCharacterImageIdTitleAsc = 'IMAGE_BY_CHARACTER_IMAGE_ID__TITLE_ASC',
  ImageByCharacterImageIdTitleDesc = 'IMAGE_BY_CHARACTER_IMAGE_ID__TITLE_DESC',
  ImageByCharacterImageIdUrlAsc = 'IMAGE_BY_CHARACTER_IMAGE_ID__URL_ASC',
  ImageByCharacterImageIdUrlDesc = 'IMAGE_BY_CHARACTER_IMAGE_ID__URL_DESC',
  MalIdAsc = 'MAL_ID_ASC',
  MalIdDesc = 'MAL_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** All input for the create `AlternateAnimeName` mutation. */
export type CreateAlternateAnimeNameInput = {
  /** The `AlternateAnimeName` to be created by this mutation. */
  alternateAnimeName: AlternateAnimeNameInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AlternateAnimeName` mutation. */
export type CreateAlternateAnimeNamePayload = {
  __typename?: 'CreateAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was created by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AlternateAnimeName` mutation. */
export type CreateAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: InputMaybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** All input for the create `AnimeCharacter` mutation. */
export type CreateAnimeCharacterInput = {
  /** The `AnimeCharacter` to be created by this mutation. */
  animeCharacter: AnimeCharacterInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeCharacter` mutation. */
export type CreateAnimeCharacterPayload = {
  __typename?: 'CreateAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was created by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeCharacter` mutation. */
export type CreateAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};

/** All input for the create `AnimeGenre` mutation. */
export type CreateAnimeGenreInput = {
  /** The `AnimeGenre` to be created by this mutation. */
  animeGenre: AnimeGenreInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeGenre` mutation. */
export type CreateAnimeGenrePayload = {
  __typename?: 'CreateAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was created by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeGenre` mutation. */
export type CreateAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeGenresOrderBy>>;
};

/** All input for the create `AnimeImage` mutation. */
export type CreateAnimeImageInput = {
  /** The `AnimeImage` to be created by this mutation. */
  animeImage: AnimeImageInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeImage` mutation. */
export type CreateAnimeImagePayload = {
  __typename?: 'CreateAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was created by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeImage` mutation. */
export type CreateAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeImagesOrderBy>>;
};

/** All input for the create `Anime` mutation. */
export type CreateAnimeInput = {
  /** The `Anime` to be created by this mutation. */
  anime: AnimeInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** All input for the create `AnimeLicensor` mutation. */
export type CreateAnimeLicensorInput = {
  /** The `AnimeLicensor` to be created by this mutation. */
  animeLicensor: AnimeLicensorInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeLicensor` mutation. */
export type CreateAnimeLicensorPayload = {
  __typename?: 'CreateAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was created by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeLicensor` mutation. */
export type CreateAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeLicensorsOrderBy>>;
};

/** All input for the create `AnimeList` mutation. */
export type CreateAnimeListInput = {
  /** The `AnimeList` to be created by this mutation. */
  animeList: AnimeListInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeList` mutation. */
export type CreateAnimeListPayload = {
  __typename?: 'CreateAnimeListPayload';
  /** The `AnimeList` that was created by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our create `AnimeList` mutation. */
export type CreateAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};

/** The output of our create `Anime` mutation. */
export type CreateAnimePayload = {
  __typename?: 'CreateAnimePayload';
  /** The `Anime` that was created by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Anime` mutation. */
export type CreateAnimePayloadAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeOrderBy>>;
};

/** All input for the create `AnimeProducer` mutation. */
export type CreateAnimeProducerInput = {
  /** The `AnimeProducer` to be created by this mutation. */
  animeProducer: AnimeProducerInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeProducer` mutation. */
export type CreateAnimeProducerPayload = {
  __typename?: 'CreateAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was created by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeProducer` mutation. */
export type CreateAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeProducersOrderBy>>;
};

/** All input for the create `AnimeStaff` mutation. */
export type CreateAnimeStaffInput = {
  /** The `AnimeStaff` to be created by this mutation. */
  animeStaff: AnimeStaffInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeStaff` mutation. */
export type CreateAnimeStaffPayload = {
  __typename?: 'CreateAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was created by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our create `AnimeStaff` mutation. */
export type CreateAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};

/** All input for the create `AnimeStreamingOn` mutation. */
export type CreateAnimeStreamingOnInput = {
  /** The `AnimeStreamingOn` to be created by this mutation. */
  animeStreamingOn: AnimeStreamingOnInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeStreamingOn` mutation. */
export type CreateAnimeStreamingOnPayload = {
  __typename?: 'CreateAnimeStreamingOnPayload';
  /** Reads a single `Anime` that is related to this `AnimeStreamingOn`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStreamingOn` that was created by this mutation. */
  animeStreamingOn?: Maybe<AnimeStreamingOn>;
  /** An edge for our `AnimeStreamingOn`. May be used by Relay 1. */
  animeStreamingOnEdge?: Maybe<AnimeStreamingOnsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AnimeStreamingOn` mutation. */
export type CreateAnimeStreamingOnPayloadAnimeStreamingOnEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStreamingOnsOrderBy>>;
};

/** All input for the create `AnimeStudio` mutation. */
export type CreateAnimeStudioInput = {
  /** The `AnimeStudio` to be created by this mutation. */
  animeStudio: AnimeStudioInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeStudio` mutation. */
export type CreateAnimeStudioPayload = {
  __typename?: 'CreateAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was created by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our create `AnimeStudio` mutation. */
export type CreateAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStudiosOrderBy>>;
};

/** All input for the create `AnimeUserScore` mutation. */
export type CreateAnimeUserScoreInput = {
  /** The `AnimeUserScore` to be created by this mutation. */
  animeUserScore: AnimeUserScoreInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `AnimeUserScore` mutation. */
export type CreateAnimeUserScorePayload = {
  __typename?: 'CreateAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was created by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our create `AnimeUserScore` mutation. */
export type CreateAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};

/** All input for the create `CharacterImage` mutation. */
export type CreateCharacterImageInput = {
  /** The `CharacterImage` to be created by this mutation. */
  characterImage: CharacterImageInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `CharacterImage` mutation. */
export type CreateCharacterImagePayload = {
  __typename?: 'CreateCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was created by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `CharacterImage` mutation. */
export type CreateCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterImagesOrderBy>>;
};

/** All input for the create `Character` mutation. */
export type CreateCharacterInput = {
  /** The `Character` to be created by this mutation. */
  character: CharacterInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `Character` mutation. */
export type CreateCharacterPayload = {
  __typename?: 'CreateCharacterPayload';
  /** The `Character` that was created by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Character` mutation. */
export type CreateCharacterPayloadCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<CharactersOrderBy>>;
};

/** All input for the create `CharacterRole` mutation. */
export type CreateCharacterRoleInput = {
  /** The `CharacterRole` to be created by this mutation. */
  characterRole: CharacterRoleInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our create `CharacterRole` mutation. */
export type CreateCharacterRolePayload = {
  __typename?: 'CreateCharacterRolePayload';
  /** The `CharacterRole` that was created by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `CharacterRole` mutation. */
export type CreateCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterRolesOrderBy>>;
};

/** All input for the create `Genre` mutation. */
export type CreateGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Genre` to be created by this mutation. */
  genre: GenreInput;
};

/** The output of our create `Genre` mutation. */
export type CreateGenrePayload = {
  __typename?: 'CreateGenrePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` that was created by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Genre` mutation. */
export type CreateGenrePayloadGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<GenresOrderBy>>;
};

/** All input for the create `Image` mutation. */
export type CreateImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Image` to be created by this mutation. */
  image: ImageInput;
};

/** The output of our create `Image` mutation. */
export type CreateImagePayload = {
  __typename?: 'CreateImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` that was created by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Image` mutation. */
export type CreateImagePayloadImageEdgeArgs = {
  orderBy?: InputMaybe<Array<ImagesOrderBy>>;
};

/** All input for the create `Licensor` mutation. */
export type CreateLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Licensor` to be created by this mutation. */
  licensor: LicensorInput;
};

/** The output of our create `Licensor` mutation. */
export type CreateLicensorPayload = {
  __typename?: 'CreateLicensorPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` that was created by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Licensor` mutation. */
export type CreateLicensorPayloadLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<LicensorsOrderBy>>;
};

/** All input for the `createNewListAddAnime` mutation. */
export type CreateNewListAddAnimeInput = {
  animeidinput: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our `createNewListAddAnime` mutation. */
export type CreateNewListAddAnimePayload = {
  __typename?: 'CreateNewListAddAnimePayload';
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our `createNewListAddAnime` mutation. */
export type CreateNewListAddAnimePayloadAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};

/** All input for the create `PersonImage` mutation. */
export type CreatePersonImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `PersonImage` to be created by this mutation. */
  personImage: PersonImageInput;
};

/** The output of our create `PersonImage` mutation. */
export type CreatePersonImagePayload = {
  __typename?: 'CreatePersonImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was created by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `PersonImage` mutation. */
export type CreatePersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: InputMaybe<Array<PersonImagesOrderBy>>;
};

/** All input for the create `Person` mutation. */
export type CreatePersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Person` to be created by this mutation. */
  person: PersonInput;
};

/** The output of our create `Person` mutation. */
export type CreatePersonPayload = {
  __typename?: 'CreatePersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` that was created by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Person` mutation. */
export type CreatePersonPayloadPersonEdgeArgs = {
  orderBy?: InputMaybe<Array<PeopleOrderBy>>;
};

/** All input for the create `Producer` mutation. */
export type CreateProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Producer` to be created by this mutation. */
  producer: ProducerInput;
};

/** The output of our create `Producer` mutation. */
export type CreateProducerPayload = {
  __typename?: 'CreateProducerPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` that was created by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Producer` mutation. */
export type CreateProducerPayloadProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<ProducersOrderBy>>;
};

/** All input for the create `StaffRole` mutation. */
export type CreateStaffRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `StaffRole` to be created by this mutation. */
  staffRole: StaffRoleInput;
};

/** The output of our create `StaffRole` mutation. */
export type CreateStaffRolePayload = {
  __typename?: 'CreateStaffRolePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was created by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our create `StaffRole` mutation. */
export type CreateStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<StaffRolesOrderBy>>;
};

/** All input for the create `Studio` mutation. */
export type CreateStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Studio` to be created by this mutation. */
  studio: StudioInput;
};

/** The output of our create `Studio` mutation. */
export type CreateStudioPayload = {
  __typename?: 'CreateStudioPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was created by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our create `Studio` mutation. */
export type CreateStudioPayloadStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<StudiosOrderBy>>;
};

/** All input for the create `UserAnime` mutation. */
export type CreateUserAnimeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserAnime` to be created by this mutation. */
  userAnime: UserAnimeInput;
};

/** All input for the create `UserAnimeList` mutation. */
export type CreateUserAnimeListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserAnimeList` to be created by this mutation. */
  userAnimeList: UserAnimeListInput;
};

/** The output of our create `UserAnimeList` mutation. */
export type CreateUserAnimeListPayload = {
  __typename?: 'CreateUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was created by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our create `UserAnimeList` mutation. */
export type CreateUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};

/** The output of our create `UserAnime` mutation. */
export type CreateUserAnimePayload = {
  __typename?: 'CreateUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was created by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our create `UserAnime` mutation. */
export type CreateUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeOrderBy>>;
};

/** All input for the create `User` mutation. */
export type CreateUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `User` to be created by this mutation. */
  user: UserInput;
};

/** All input for the create `UserNotification` mutation. */
export type CreateUserNotificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserNotification` to be created by this mutation. */
  userNotification: UserNotificationInput;
};

/** The output of our create `UserNotification` mutation. */
export type CreateUserNotificationPayload = {
  __typename?: 'CreateUserNotificationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserNotification`. */
  user?: Maybe<User>;
  /** The `UserNotification` that was created by this mutation. */
  userNotification?: Maybe<UserNotification>;
  /** An edge for our `UserNotification`. May be used by Relay 1. */
  userNotificationEdge?: Maybe<UserNotificationsEdge>;
};


/** The output of our create `UserNotification` mutation. */
export type CreateUserNotificationPayloadUserNotificationEdgeArgs = {
  orderBy?: InputMaybe<Array<UserNotificationsOrderBy>>;
};

/** The output of our create `User` mutation. */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was created by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our create `User` mutation. */
export type CreateUserPayloadUserEdgeArgs = {
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};

/** All input for the create `UserWatchStatus` mutation. */
export type CreateUserWatchStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserWatchStatus` to be created by this mutation. */
  userWatchStatus: UserWatchStatusInput;
};

/** The output of our create `UserWatchStatus` mutation. */
export type CreateUserWatchStatusPayload = {
  __typename?: 'CreateUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was created by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our create `UserWatchStatus` mutation. */
export type CreateUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: InputMaybe<Array<UserWatchStatusesOrderBy>>;
};

export type CustomAnimeList = {
  __typename?: 'CustomAnimeList';
  animeId?: Maybe<Scalars['UUID']>;
  animeIndex?: Maybe<Scalars['String']>;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  id?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  listName?: Maybe<Scalars['String']>;
  mediaType?: Maybe<Scalars['String']>;
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  userEpisodesWatched?: Maybe<Scalars['Int']>;
  userScore?: Maybe<Scalars['BigFloat']>;
  watchStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `CustomAnimeList` object types. All fields are combined with a logical ‘and.’ */
export type CustomAnimeListFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<CustomAnimeListFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `animeIndex` field. */
  animeIndex?: InputMaybe<StringFilter>;
  /** Filter by the object’s `averageWatcherRating` field. */
  averageWatcherRating?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `imageUrl` field. */
  imageUrl?: InputMaybe<StringFilter>;
  /** Filter by the object’s `listName` field. */
  listName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<CustomAnimeListFilter>;
  /** Filter by the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: InputMaybe<IntFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<CustomAnimeListFilter>>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userEpisodesWatched` field. */
  userEpisodesWatched?: InputMaybe<IntFilter>;
  /** Filter by the object’s `userScore` field. */
  userScore?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `watchStatus` field. */
  watchStatus?: InputMaybe<StringFilter>;
};

/** A connection to a list of `CustomAnimeList` values. */
export type CustomAnimeListsConnection = {
  __typename?: 'CustomAnimeListsConnection';
  /** A list of edges which contains the `CustomAnimeList` and cursor to aid in pagination. */
  edges: Array<CustomAnimeListsEdge>;
  /** A list of `CustomAnimeList` objects. */
  nodes: Array<CustomAnimeList>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CustomAnimeList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CustomAnimeList` edge in the connection. */
export type CustomAnimeListsEdge = {
  __typename?: 'CustomAnimeListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CustomAnimeList` at the end of the edge. */
  node: CustomAnimeList;
};

/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Datetime']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Datetime']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Datetime']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Datetime']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Datetime']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Datetime']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Datetime']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Datetime']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Datetime']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Datetime']>>;
};

/** All input for the `deleteAlternateAnimeNameByNodeId` mutation. */
export type DeleteAlternateAnimeNameByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AlternateAnimeName` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAlternateAnimeName` mutation. */
export type DeleteAlternateAnimeNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `AlternateAnimeName` mutation. */
export type DeleteAlternateAnimeNamePayload = {
  __typename?: 'DeleteAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was deleted by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAlternateAnimeNameNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AlternateAnimeName` mutation. */
export type DeleteAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: InputMaybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** All input for the `deleteAnimeByMalId` mutation. */
export type DeleteAnimeByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  malId: Scalars['Int'];
};

/** All input for the `deleteAnimeByNodeId` mutation. */
export type DeleteAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Anime` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeCharacterByNodeId` mutation. */
export type DeleteAnimeCharacterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeCharacter` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeCharacter` mutation. */
export type DeleteAnimeCharacterInput = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  characterRoleId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  language: LanguageType;
  personId: Scalars['UUID'];
};

/** The output of our delete `AnimeCharacter` mutation. */
export type DeleteAnimeCharacterPayload = {
  __typename?: 'DeleteAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was deleted by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeCharacterNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeCharacter` mutation. */
export type DeleteAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};

/** All input for the `deleteAnimeGenreByNodeId` mutation. */
export type DeleteAnimeGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeGenre` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeGenre` mutation. */
export type DeleteAnimeGenreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  genreId: Scalars['UUID'];
};

/** The output of our delete `AnimeGenre` mutation. */
export type DeleteAnimeGenrePayload = {
  __typename?: 'DeleteAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was deleted by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeGenreNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeGenre` mutation. */
export type DeleteAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeGenresOrderBy>>;
};

/** All input for the `deleteAnimeImageByNodeId` mutation. */
export type DeleteAnimeImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeImage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeImage` mutation. */
export type DeleteAnimeImageInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  imageId: Scalars['UUID'];
};

/** The output of our delete `AnimeImage` mutation. */
export type DeleteAnimeImagePayload = {
  __typename?: 'DeleteAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was deleted by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeImageNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeImage` mutation. */
export type DeleteAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeImagesOrderBy>>;
};

/** All input for the `deleteAnime` mutation. */
export type DeleteAnimeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** All input for the `deleteAnimeLicensorByNodeId` mutation. */
export type DeleteAnimeLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeLicensor` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeLicensor` mutation. */
export type DeleteAnimeLicensorInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  licensorId: Scalars['UUID'];
};

/** The output of our delete `AnimeLicensor` mutation. */
export type DeleteAnimeLicensorPayload = {
  __typename?: 'DeleteAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was deleted by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeLicensorNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeLicensor` mutation. */
export type DeleteAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeLicensorsOrderBy>>;
};

/** All input for the `deleteAnimeListByNodeId` mutation. */
export type DeleteAnimeListByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeList` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeList` mutation. */
export type DeleteAnimeListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `AnimeList` mutation. */
export type DeleteAnimeListPayload = {
  __typename?: 'DeleteAnimeListPayload';
  /** The `AnimeList` that was deleted by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeListNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our delete `AnimeList` mutation. */
export type DeleteAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};

/** The output of our delete `Anime` mutation. */
export type DeleteAnimePayload = {
  __typename?: 'DeleteAnimePayload';
  /** The `Anime` that was deleted by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Anime` mutation. */
export type DeleteAnimePayloadAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeOrderBy>>;
};

/** All input for the `deleteAnimeProducerByNodeId` mutation. */
export type DeleteAnimeProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeProducer` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeProducer` mutation. */
export type DeleteAnimeProducerInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  producerId: Scalars['UUID'];
};

/** The output of our delete `AnimeProducer` mutation. */
export type DeleteAnimeProducerPayload = {
  __typename?: 'DeleteAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was deleted by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeProducerNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeProducer` mutation. */
export type DeleteAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeProducersOrderBy>>;
};

/** All input for the `deleteAnimeStaffByNodeId` mutation. */
export type DeleteAnimeStaffByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStaff` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeStaff` mutation. */
export type DeleteAnimeStaffInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};

/** The output of our delete `AnimeStaff` mutation. */
export type DeleteAnimeStaffPayload = {
  __typename?: 'DeleteAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was deleted by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeStaffNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our delete `AnimeStaff` mutation. */
export type DeleteAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};

/** All input for the `deleteAnimeStreamingOnByNodeId` mutation. */
export type DeleteAnimeStreamingOnByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStreamingOn` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeStreamingOn` mutation. */
export type DeleteAnimeStreamingOnInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  streamServiceId: StreamingServices;
};

/** The output of our delete `AnimeStreamingOn` mutation. */
export type DeleteAnimeStreamingOnPayload = {
  __typename?: 'DeleteAnimeStreamingOnPayload';
  /** Reads a single `Anime` that is related to this `AnimeStreamingOn`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStreamingOn` that was deleted by this mutation. */
  animeStreamingOn?: Maybe<AnimeStreamingOn>;
  /** An edge for our `AnimeStreamingOn`. May be used by Relay 1. */
  animeStreamingOnEdge?: Maybe<AnimeStreamingOnsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeStreamingOnNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `AnimeStreamingOn` mutation. */
export type DeleteAnimeStreamingOnPayloadAnimeStreamingOnEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStreamingOnsOrderBy>>;
};

/** All input for the `deleteAnimeStudioByNodeId` mutation. */
export type DeleteAnimeStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStudio` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeStudio` mutation. */
export type DeleteAnimeStudioInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  studioId: Scalars['UUID'];
};

/** The output of our delete `AnimeStudio` mutation. */
export type DeleteAnimeStudioPayload = {
  __typename?: 'DeleteAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was deleted by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeStudioNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our delete `AnimeStudio` mutation. */
export type DeleteAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStudiosOrderBy>>;
};

/** All input for the `deleteAnimeUserScoreByNodeId` mutation. */
export type DeleteAnimeUserScoreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeUserScore` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteAnimeUserScore` mutation. */
export type DeleteAnimeUserScoreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** The output of our delete `AnimeUserScore` mutation. */
export type DeleteAnimeUserScorePayload = {
  __typename?: 'DeleteAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was deleted by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedAnimeUserScoreNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our delete `AnimeUserScore` mutation. */
export type DeleteAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};

/** All input for the `deleteCharacterByMalId` mutation. */
export type DeleteCharacterByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  malId: Scalars['String'];
};

/** All input for the `deleteCharacterByNodeId` mutation. */
export type DeleteCharacterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Character` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteCharacterImageByNodeId` mutation. */
export type DeleteCharacterImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterImage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteCharacterImage` mutation. */
export type DeleteCharacterImageInput = {
  characterId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  imageId: Scalars['UUID'];
};

/** The output of our delete `CharacterImage` mutation. */
export type DeleteCharacterImagePayload = {
  __typename?: 'DeleteCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was deleted by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedCharacterImageNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `CharacterImage` mutation. */
export type DeleteCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterImagesOrderBy>>;
};

/** All input for the `deleteCharacter` mutation. */
export type DeleteCharacterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Character` mutation. */
export type DeleteCharacterPayload = {
  __typename?: 'DeleteCharacterPayload';
  /** The `Character` that was deleted by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedCharacterNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Character` mutation. */
export type DeleteCharacterPayloadCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<CharactersOrderBy>>;
};

/** All input for the `deleteCharacterRoleByNodeId` mutation. */
export type DeleteCharacterRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterRole` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteCharacterRoleByRole` mutation. */
export type DeleteCharacterRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  role: Scalars['String'];
};

/** All input for the `deleteCharacterRole` mutation. */
export type DeleteCharacterRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `CharacterRole` mutation. */
export type DeleteCharacterRolePayload = {
  __typename?: 'DeleteCharacterRolePayload';
  /** The `CharacterRole` that was deleted by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedCharacterRoleNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `CharacterRole` mutation. */
export type DeleteCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterRolesOrderBy>>;
};

/** All input for the `deleteGenreByGenre` mutation. */
export type DeleteGenreByGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  genre: Scalars['String'];
};

/** All input for the `deleteGenreByNodeId` mutation. */
export type DeleteGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Genre` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteGenre` mutation. */
export type DeleteGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Genre` mutation. */
export type DeleteGenrePayload = {
  __typename?: 'DeleteGenrePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedGenreNodeId?: Maybe<Scalars['ID']>;
  /** The `Genre` that was deleted by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Genre` mutation. */
export type DeleteGenrePayloadGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<GenresOrderBy>>;
};

/** All input for the `deleteImageByNodeId` mutation. */
export type DeleteImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Image` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteImage` mutation. */
export type DeleteImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Image` mutation. */
export type DeleteImagePayload = {
  __typename?: 'DeleteImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedImageNodeId?: Maybe<Scalars['ID']>;
  /** The `Image` that was deleted by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Image` mutation. */
export type DeleteImagePayloadImageEdgeArgs = {
  orderBy?: InputMaybe<Array<ImagesOrderBy>>;
};

/** All input for the `deleteLicensorByLicensor` mutation. */
export type DeleteLicensorByLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  licensor: Scalars['String'];
};

/** All input for the `deleteLicensorByNodeId` mutation. */
export type DeleteLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Licensor` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteLicensor` mutation. */
export type DeleteLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Licensor` mutation. */
export type DeleteLicensorPayload = {
  __typename?: 'DeleteLicensorPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedLicensorNodeId?: Maybe<Scalars['ID']>;
  /** The `Licensor` that was deleted by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Licensor` mutation. */
export type DeleteLicensorPayloadLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<LicensorsOrderBy>>;
};

/** All input for the `deletePersonByMalId` mutation. */
export type DeletePersonByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  malId: Scalars['String'];
};

/** All input for the `deletePersonByNodeId` mutation. */
export type DeletePersonByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Person` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deletePersonImageByNodeId` mutation. */
export type DeletePersonImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PersonImage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deletePersonImage` mutation. */
export type DeletePersonImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};

/** The output of our delete `PersonImage` mutation. */
export type DeletePersonImagePayload = {
  __typename?: 'DeletePersonImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedPersonImageNodeId?: Maybe<Scalars['ID']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was deleted by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `PersonImage` mutation. */
export type DeletePersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: InputMaybe<Array<PersonImagesOrderBy>>;
};

/** All input for the `deletePerson` mutation. */
export type DeletePersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Person` mutation. */
export type DeletePersonPayload = {
  __typename?: 'DeletePersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedPersonNodeId?: Maybe<Scalars['ID']>;
  /** The `Person` that was deleted by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Person` mutation. */
export type DeletePersonPayloadPersonEdgeArgs = {
  orderBy?: InputMaybe<Array<PeopleOrderBy>>;
};

/** All input for the `deleteProducerByNodeId` mutation. */
export type DeleteProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Producer` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteProducerByProducer` mutation. */
export type DeleteProducerByProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  producer: Scalars['String'];
};

/** All input for the `deleteProducer` mutation. */
export type DeleteProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Producer` mutation. */
export type DeleteProducerPayload = {
  __typename?: 'DeleteProducerPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedProducerNodeId?: Maybe<Scalars['ID']>;
  /** The `Producer` that was deleted by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Producer` mutation. */
export type DeleteProducerPayloadProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<ProducersOrderBy>>;
};

/** All input for the `deleteStaffRoleByNodeId` mutation. */
export type DeleteStaffRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `StaffRole` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteStaffRoleByRole` mutation. */
export type DeleteStaffRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  role: Scalars['String'];
};

/** All input for the `deleteStaffRole` mutation. */
export type DeleteStaffRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `StaffRole` mutation. */
export type DeleteStaffRolePayload = {
  __typename?: 'DeleteStaffRolePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedStaffRoleNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was deleted by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our delete `StaffRole` mutation. */
export type DeleteStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<StaffRolesOrderBy>>;
};

/** All input for the `deleteStudioByNodeId` mutation. */
export type DeleteStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Studio` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteStudioByStudio` mutation. */
export type DeleteStudioByStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  studio: Scalars['String'];
};

/** All input for the `deleteStudio` mutation. */
export type DeleteStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `Studio` mutation. */
export type DeleteStudioPayload = {
  __typename?: 'DeleteStudioPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedStudioNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was deleted by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our delete `Studio` mutation. */
export type DeleteStudioPayloadStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<StudiosOrderBy>>;
};

/** All input for the `deleteUserAnimeByNodeId` mutation. */
export type DeleteUserAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserAnime` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUserAnime` mutation. */
export type DeleteUserAnimeInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** All input for the `deleteUserAnimeListByAnimeListIdAndAnimeId` mutation. */
export type DeleteUserAnimeListByAnimeListIdAndAnimeIdInput = {
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our delete `UserAnimeList` mutation. */
export type DeleteUserAnimeListPayload = {
  __typename?: 'DeleteUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserAnimeListNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was deleted by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our delete `UserAnimeList` mutation. */
export type DeleteUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};

/** The output of our delete `UserAnime` mutation. */
export type DeleteUserAnimePayload = {
  __typename?: 'DeleteUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserAnimeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was deleted by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our delete `UserAnime` mutation. */
export type DeleteUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeOrderBy>>;
};

/** All input for the `deleteUserByNodeId` mutation. */
export type DeleteUserByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `User` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUser` mutation. */
export type DeleteUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
};

/** All input for the `deleteUserNotificationByNodeId` mutation. */
export type DeleteUserNotificationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserNotification` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUserNotification` mutation. */
export type DeleteUserNotificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `UserNotification` mutation. */
export type DeleteUserNotificationPayload = {
  __typename?: 'DeleteUserNotificationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserNotificationNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserNotification`. */
  user?: Maybe<User>;
  /** The `UserNotification` that was deleted by this mutation. */
  userNotification?: Maybe<UserNotification>;
  /** An edge for our `UserNotification`. May be used by Relay 1. */
  userNotificationEdge?: Maybe<UserNotificationsEdge>;
};


/** The output of our delete `UserNotification` mutation. */
export type DeleteUserNotificationPayloadUserNotificationEdgeArgs = {
  orderBy?: InputMaybe<Array<UserNotificationsOrderBy>>;
};

/** The output of our delete `User` mutation. */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was deleted by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our delete `User` mutation. */
export type DeleteUserPayloadUserEdgeArgs = {
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};

/** All input for the `deleteUserWatchStatusByNodeId` mutation. */
export type DeleteUserWatchStatusByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserWatchStatus` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUserWatchStatus` mutation. */
export type DeleteUserWatchStatusInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  userId: Scalars['String'];
};

/** The output of our delete `UserWatchStatus` mutation. */
export type DeleteUserWatchStatusPayload = {
  __typename?: 'DeleteUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedUserWatchStatusNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was deleted by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our delete `UserWatchStatus` mutation. */
export type DeleteUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: InputMaybe<Array<UserWatchStatusesOrderBy>>;
};

export type Genre = Node & {
  __typename?: 'Genre';
  /** Reads and enables pagination through a set of `AnimeGenre`. */
  animeGenres: AnimeGenresConnection;
  genre: Scalars['String'];
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type GenreAnimeGenresArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeGenreCondition>;
  filter?: InputMaybe<AnimeGenreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeGenresOrderBy>>;
};

/** A condition to be used against `Genre` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type GenreCondition = {
  /** Checks for equality with the object’s `genre` field. */
  genre?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `Genre` object types. All fields are combined with a logical ‘and.’ */
export type GenreFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<GenreFilter>>;
  /** Filter by the object’s `genre` field. */
  genre?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<GenreFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<GenreFilter>>;
};

/** An input for mutations affecting `Genre` */
export type GenreInput = {
  genre: Scalars['String'];
  id?: InputMaybe<Scalars['UUID']>;
};

/** Represents an update to a `Genre`. Fields that are set will be updated. */
export type GenrePatch = {
  genre?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `Genre` values. */
export type GenresConnection = {
  __typename?: 'GenresConnection';
  /** A list of edges which contains the `Genre` and cursor to aid in pagination. */
  edges: Array<GenresEdge>;
  /** A list of `Genre` objects. */
  nodes: Array<Genre>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Genre` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Genre` edge in the connection. */
export type GenresEdge = {
  __typename?: 'GenresEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Genre` at the end of the edge. */
  node: Genre;
};

/** Methods to use when ordering `Genre`. */
export enum GenresOrderBy {
  AnimeGenresByGenreIdCountAsc = 'ANIME_GENRES_BY_GENRE_ID__COUNT_ASC',
  AnimeGenresByGenreIdCountDesc = 'ANIME_GENRES_BY_GENRE_ID__COUNT_DESC',
  GenreAsc = 'GENRE_ASC',
  GenreDesc = 'GENRE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Image = Node & {
  __typename?: 'Image';
  /** Reads and enables pagination through a set of `AnimeImage`. */
  animeImages: AnimeImagesConnection;
  /** Reads and enables pagination through a set of `CharacterImage`. */
  characterImages: CharacterImagesConnection;
  /** Reads and enables pagination through a set of `Character`. */
  charactersByCharacterImageId: CharactersConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads and enables pagination through a set of `Person`. */
  peopleByPersonImageId: PeopleConnection;
  /** Reads and enables pagination through a set of `PersonImage`. */
  personImages: PersonImagesConnection;
  title: Scalars['String'];
  url: Scalars['String'];
};


export type ImageAnimeImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeImageCondition>;
  filter?: InputMaybe<AnimeImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeImagesOrderBy>>;
};


export type ImageCharacterImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<CharacterImageCondition>;
  filter?: InputMaybe<CharacterImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<CharacterImagesOrderBy>>;
};


export type ImageCharactersByCharacterImageIdArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<CharacterCondition>;
  filter?: InputMaybe<CharacterFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<CharactersOrderBy>>;
};


export type ImagePeopleByPersonImageIdArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<PersonCondition>;
  filter?: InputMaybe<PersonFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PeopleOrderBy>>;
};


export type ImagePersonImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<PersonImageCondition>;
  filter?: InputMaybe<PersonImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PersonImagesOrderBy>>;
};

/** A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ImageCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `url` field. */
  url?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `Image` object types. All fields are combined with a logical ‘and.’ */
export type ImageFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ImageFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ImageFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ImageFilter>>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `url` field. */
  url?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `Image` */
export type ImageInput = {
  id?: InputMaybe<Scalars['UUID']>;
  title: Scalars['String'];
  url: Scalars['String'];
};

/** Represents an update to a `Image`. Fields that are set will be updated. */
export type ImagePatch = {
  id?: InputMaybe<Scalars['UUID']>;
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `Image` values. */
export type ImagesConnection = {
  __typename?: 'ImagesConnection';
  /** A list of edges which contains the `Image` and cursor to aid in pagination. */
  edges: Array<ImagesEdge>;
  /** A list of `Image` objects. */
  nodes: Array<Image>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Image` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Image` edge in the connection. */
export type ImagesEdge = {
  __typename?: 'ImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Image` at the end of the edge. */
  node: Image;
};

/** Methods to use when ordering `Image`. */
export enum ImagesOrderBy {
  AnimeImagesByImageIdCountAsc = 'ANIME_IMAGES_BY_IMAGE_ID__COUNT_ASC',
  AnimeImagesByImageIdCountDesc = 'ANIME_IMAGES_BY_IMAGE_ID__COUNT_DESC',
  CharactersByCharacterImageIdCountAsc = 'CHARACTERS_BY_CHARACTER_IMAGE_ID__COUNT_ASC',
  CharactersByCharacterImageIdCountDesc = 'CHARACTERS_BY_CHARACTER_IMAGE_ID__COUNT_DESC',
  CharacterImagesByImageIdCountAsc = 'CHARACTER_IMAGES_BY_IMAGE_ID__COUNT_ASC',
  CharacterImagesByImageIdCountDesc = 'CHARACTER_IMAGES_BY_IMAGE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PeopleByPersonImageIdCountAsc = 'PEOPLE_BY_PERSON_IMAGE_ID__COUNT_ASC',
  PeopleByPersonImageIdCountDesc = 'PEOPLE_BY_PERSON_IMAGE_ID__COUNT_DESC',
  PersonImagesByImageIdCountAsc = 'PERSON_IMAGES_BY_IMAGE_ID__COUNT_ASC',
  PersonImagesByImageIdCountDesc = 'PERSON_IMAGES_BY_IMAGE_ID__COUNT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

/** All input for the `insertAnimeToUserList` mutation. */
export type InsertAnimeToUserListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  inputAnimeId?: InputMaybe<Scalars['UUID']>;
  inputAnimeIndex?: InputMaybe<Scalars['String']>;
  inputAnimeListId?: InputMaybe<Scalars['UUID']>;
  inputWatchStatus?: InputMaybe<Scalars['String']>;
};

/** The output of our `insertAnimeToUserList` mutation. */
export type InsertAnimeToUserListPayload = {
  __typename?: 'InsertAnimeToUserListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our `insertAnimeToUserList` mutation. */
export type InsertAnimeToUserListPayloadUserAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};

/** All input for the `insertOrUpdateAnimeUserScore` mutation. */
export type InsertOrUpdateAnimeUserScoreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  inputAnimeId: Scalars['UUID'];
  inputUserScore: Scalars['Int'];
};

/** The output of our `insertOrUpdateAnimeUserScore` mutation. */
export type InsertOrUpdateAnimeUserScorePayload = {
  __typename?: 'InsertOrUpdateAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our `insertOrUpdateAnimeUserScore` mutation. */
export type InsertOrUpdateAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};

/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */
export type IntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Int']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Int']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Int']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Int']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Int']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Int']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Int']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Int']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Int']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export enum LanguageType {
  English = 'ENGLISH',
  French = 'FRENCH',
  German = 'GERMAN',
  Italian = 'ITALIAN',
  Japanese = 'JAPANESE',
  Korean = 'KOREAN',
  Mandarin = 'MANDARIN',
  PortugueseBr = 'PORTUGUESE_BR_',
  Spanish = 'SPANISH'
}

/** A filter to be used against LanguageType fields. All fields are combined with a logical ‘and.’ */
export type LanguageTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<LanguageType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<LanguageType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<LanguageType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<LanguageType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<LanguageType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<LanguageType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<LanguageType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<LanguageType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<LanguageType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<LanguageType>>;
};

export type Licensor = Node & {
  __typename?: 'Licensor';
  /** Reads and enables pagination through a set of `AnimeLicensor`. */
  animeLicensors: AnimeLicensorsConnection;
  id: Scalars['UUID'];
  licensor: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


export type LicensorAnimeLicensorsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeLicensorCondition>;
  filter?: InputMaybe<AnimeLicensorFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeLicensorsOrderBy>>;
};

/**
 * A condition to be used against `Licensor` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type LicensorCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `licensor` field. */
  licensor?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `Licensor` object types. All fields are combined with a logical ‘and.’ */
export type LicensorFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<LicensorFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `licensor` field. */
  licensor?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<LicensorFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<LicensorFilter>>;
};

/** An input for mutations affecting `Licensor` */
export type LicensorInput = {
  id?: InputMaybe<Scalars['UUID']>;
  licensor: Scalars['String'];
};

/** Represents an update to a `Licensor`. Fields that are set will be updated. */
export type LicensorPatch = {
  id?: InputMaybe<Scalars['UUID']>;
  licensor?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `Licensor` values. */
export type LicensorsConnection = {
  __typename?: 'LicensorsConnection';
  /** A list of edges which contains the `Licensor` and cursor to aid in pagination. */
  edges: Array<LicensorsEdge>;
  /** A list of `Licensor` objects. */
  nodes: Array<Licensor>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Licensor` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Licensor` edge in the connection. */
export type LicensorsEdge = {
  __typename?: 'LicensorsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Licensor` at the end of the edge. */
  node: Licensor;
};

/** Methods to use when ordering `Licensor`. */
export enum LicensorsOrderBy {
  AnimeLicensorsByLicensorIdCountAsc = 'ANIME_LICENSORS_BY_LICENSOR_ID__COUNT_ASC',
  AnimeLicensorsByLicensorIdCountDesc = 'ANIME_LICENSORS_BY_LICENSOR_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LicensorAsc = 'LICENSOR_ASC',
  LicensorDesc = 'LICENSOR_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type MeType = {
  __typename?: 'MeType';
  email?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type MediaFormat = {
  __typename?: 'MediaFormat';
  id?: Maybe<Scalars['BigInt']>;
  mediaType?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MediaFormat` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type MediaFormatCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `mediaType` field. */
  mediaType?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `MediaFormat` object types. All fields are combined with a logical ‘and.’ */
export type MediaFormatFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<MediaFormatFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<MediaFormatFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<MediaFormatFilter>>;
};

/** A connection to a list of `MediaFormat` values. */
export type MediaFormatsConnection = {
  __typename?: 'MediaFormatsConnection';
  /** A list of edges which contains the `MediaFormat` and cursor to aid in pagination. */
  edges: Array<MediaFormatsEdge>;
  /** A list of `MediaFormat` objects. */
  nodes: Array<MediaFormat>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MediaFormat` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MediaFormat` edge in the connection. */
export type MediaFormatsEdge = {
  __typename?: 'MediaFormatsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MediaFormat` at the end of the edge. */
  node: MediaFormat;
};

/** Methods to use when ordering `MediaFormat`. */
export enum MediaFormatsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  MediaTypeAsc = 'MEDIA_TYPE_ASC',
  MediaTypeDesc = 'MEDIA_TYPE_DESC',
  Natural = 'NATURAL'
}

export enum MediaTypes {
  Movie = 'MOVIE',
  Ona = 'ONA',
  Ova = 'OVA',
  Special = 'SPECIAL',
  Tv = 'TV'
}

/** A filter to be used against MediaTypes fields. All fields are combined with a logical ‘and.’ */
export type MediaTypesFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<MediaTypes>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<MediaTypes>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<MediaTypes>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<MediaTypes>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<MediaTypes>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<MediaTypes>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<MediaTypes>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<MediaTypes>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<MediaTypes>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<MediaTypes>>;
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation';
  addAnimeToList?: Maybe<AddAnimeToListPayload>;
  changeUsername?: Maybe<ChangeUsernamePayload>;
  /** Creates a single `AlternateAnimeName`. */
  createAlternateAnimeName?: Maybe<CreateAlternateAnimeNamePayload>;
  /** Creates a single `Anime`. */
  createAnime?: Maybe<CreateAnimePayload>;
  /** Creates a single `AnimeCharacter`. */
  createAnimeCharacter?: Maybe<CreateAnimeCharacterPayload>;
  /** Creates a single `AnimeGenre`. */
  createAnimeGenre?: Maybe<CreateAnimeGenrePayload>;
  /** Creates a single `AnimeImage`. */
  createAnimeImage?: Maybe<CreateAnimeImagePayload>;
  /** Creates a single `AnimeLicensor`. */
  createAnimeLicensor?: Maybe<CreateAnimeLicensorPayload>;
  /** Creates a single `AnimeList`. */
  createAnimeList?: Maybe<CreateAnimeListPayload>;
  /** Creates a single `AnimeProducer`. */
  createAnimeProducer?: Maybe<CreateAnimeProducerPayload>;
  /** Creates a single `AnimeStaff`. */
  createAnimeStaff?: Maybe<CreateAnimeStaffPayload>;
  /** Creates a single `AnimeStreamingOn`. */
  createAnimeStreamingOn?: Maybe<CreateAnimeStreamingOnPayload>;
  /** Creates a single `AnimeStudio`. */
  createAnimeStudio?: Maybe<CreateAnimeStudioPayload>;
  /** Creates a single `AnimeUserScore`. */
  createAnimeUserScore?: Maybe<CreateAnimeUserScorePayload>;
  /** Creates a single `Character`. */
  createCharacter?: Maybe<CreateCharacterPayload>;
  /** Creates a single `CharacterImage`. */
  createCharacterImage?: Maybe<CreateCharacterImagePayload>;
  /** Creates a single `CharacterRole`. */
  createCharacterRole?: Maybe<CreateCharacterRolePayload>;
  /** Creates a single `Genre`. */
  createGenre?: Maybe<CreateGenrePayload>;
  /** Creates a single `Image`. */
  createImage?: Maybe<CreateImagePayload>;
  /** Creates a single `Licensor`. */
  createLicensor?: Maybe<CreateLicensorPayload>;
  createNewListAddAnime?: Maybe<CreateNewListAddAnimePayload>;
  /** Creates a single `Person`. */
  createPerson?: Maybe<CreatePersonPayload>;
  /** Creates a single `PersonImage`. */
  createPersonImage?: Maybe<CreatePersonImagePayload>;
  /** Creates a single `Producer`. */
  createProducer?: Maybe<CreateProducerPayload>;
  /** Creates a single `StaffRole`. */
  createStaffRole?: Maybe<CreateStaffRolePayload>;
  /** Creates a single `Studio`. */
  createStudio?: Maybe<CreateStudioPayload>;
  /** Creates a single `User`. */
  createUser?: Maybe<CreateUserPayload>;
  /** Creates a single `UserAnime`. */
  createUserAnime?: Maybe<CreateUserAnimePayload>;
  /** Creates a single `UserAnimeList`. */
  createUserAnimeList?: Maybe<CreateUserAnimeListPayload>;
  /** Creates a single `UserNotification`. */
  createUserNotification?: Maybe<CreateUserNotificationPayload>;
  /** Creates a single `UserWatchStatus`. */
  createUserWatchStatus?: Maybe<CreateUserWatchStatusPayload>;
  /** Deletes a single `AlternateAnimeName` using a unique key. */
  deleteAlternateAnimeName?: Maybe<DeleteAlternateAnimeNamePayload>;
  /** Deletes a single `AlternateAnimeName` using its globally unique id. */
  deleteAlternateAnimeNameByNodeId?: Maybe<DeleteAlternateAnimeNamePayload>;
  /** Deletes a single `Anime` using a unique key. */
  deleteAnime?: Maybe<DeleteAnimePayload>;
  /** Deletes a single `Anime` using a unique key. */
  deleteAnimeByMalId?: Maybe<DeleteAnimePayload>;
  /** Deletes a single `Anime` using its globally unique id. */
  deleteAnimeByNodeId?: Maybe<DeleteAnimePayload>;
  /** Deletes a single `AnimeCharacter` using a unique key. */
  deleteAnimeCharacter?: Maybe<DeleteAnimeCharacterPayload>;
  /** Deletes a single `AnimeCharacter` using its globally unique id. */
  deleteAnimeCharacterByNodeId?: Maybe<DeleteAnimeCharacterPayload>;
  /** Deletes a single `AnimeGenre` using a unique key. */
  deleteAnimeGenre?: Maybe<DeleteAnimeGenrePayload>;
  /** Deletes a single `AnimeGenre` using its globally unique id. */
  deleteAnimeGenreByNodeId?: Maybe<DeleteAnimeGenrePayload>;
  /** Deletes a single `AnimeImage` using a unique key. */
  deleteAnimeImage?: Maybe<DeleteAnimeImagePayload>;
  /** Deletes a single `AnimeImage` using its globally unique id. */
  deleteAnimeImageByNodeId?: Maybe<DeleteAnimeImagePayload>;
  /** Deletes a single `AnimeLicensor` using a unique key. */
  deleteAnimeLicensor?: Maybe<DeleteAnimeLicensorPayload>;
  /** Deletes a single `AnimeLicensor` using its globally unique id. */
  deleteAnimeLicensorByNodeId?: Maybe<DeleteAnimeLicensorPayload>;
  /** Deletes a single `AnimeList` using a unique key. */
  deleteAnimeList?: Maybe<DeleteAnimeListPayload>;
  /** Deletes a single `AnimeList` using its globally unique id. */
  deleteAnimeListByNodeId?: Maybe<DeleteAnimeListPayload>;
  /** Deletes a single `AnimeProducer` using a unique key. */
  deleteAnimeProducer?: Maybe<DeleteAnimeProducerPayload>;
  /** Deletes a single `AnimeProducer` using its globally unique id. */
  deleteAnimeProducerByNodeId?: Maybe<DeleteAnimeProducerPayload>;
  /** Deletes a single `AnimeStaff` using a unique key. */
  deleteAnimeStaff?: Maybe<DeleteAnimeStaffPayload>;
  /** Deletes a single `AnimeStaff` using its globally unique id. */
  deleteAnimeStaffByNodeId?: Maybe<DeleteAnimeStaffPayload>;
  /** Deletes a single `AnimeStreamingOn` using a unique key. */
  deleteAnimeStreamingOn?: Maybe<DeleteAnimeStreamingOnPayload>;
  /** Deletes a single `AnimeStreamingOn` using its globally unique id. */
  deleteAnimeStreamingOnByNodeId?: Maybe<DeleteAnimeStreamingOnPayload>;
  /** Deletes a single `AnimeStudio` using a unique key. */
  deleteAnimeStudio?: Maybe<DeleteAnimeStudioPayload>;
  /** Deletes a single `AnimeStudio` using its globally unique id. */
  deleteAnimeStudioByNodeId?: Maybe<DeleteAnimeStudioPayload>;
  /** Deletes a single `AnimeUserScore` using a unique key. */
  deleteAnimeUserScore?: Maybe<DeleteAnimeUserScorePayload>;
  /** Deletes a single `AnimeUserScore` using its globally unique id. */
  deleteAnimeUserScoreByNodeId?: Maybe<DeleteAnimeUserScorePayload>;
  /** Deletes a single `Character` using a unique key. */
  deleteCharacter?: Maybe<DeleteCharacterPayload>;
  /** Deletes a single `Character` using a unique key. */
  deleteCharacterByMalId?: Maybe<DeleteCharacterPayload>;
  /** Deletes a single `Character` using its globally unique id. */
  deleteCharacterByNodeId?: Maybe<DeleteCharacterPayload>;
  /** Deletes a single `CharacterImage` using a unique key. */
  deleteCharacterImage?: Maybe<DeleteCharacterImagePayload>;
  /** Deletes a single `CharacterImage` using its globally unique id. */
  deleteCharacterImageByNodeId?: Maybe<DeleteCharacterImagePayload>;
  /** Deletes a single `CharacterRole` using a unique key. */
  deleteCharacterRole?: Maybe<DeleteCharacterRolePayload>;
  /** Deletes a single `CharacterRole` using its globally unique id. */
  deleteCharacterRoleByNodeId?: Maybe<DeleteCharacterRolePayload>;
  /** Deletes a single `CharacterRole` using a unique key. */
  deleteCharacterRoleByRole?: Maybe<DeleteCharacterRolePayload>;
  /** Deletes a single `Genre` using a unique key. */
  deleteGenre?: Maybe<DeleteGenrePayload>;
  /** Deletes a single `Genre` using a unique key. */
  deleteGenreByGenre?: Maybe<DeleteGenrePayload>;
  /** Deletes a single `Genre` using its globally unique id. */
  deleteGenreByNodeId?: Maybe<DeleteGenrePayload>;
  /** Deletes a single `Image` using a unique key. */
  deleteImage?: Maybe<DeleteImagePayload>;
  /** Deletes a single `Image` using its globally unique id. */
  deleteImageByNodeId?: Maybe<DeleteImagePayload>;
  /** Deletes a single `Licensor` using a unique key. */
  deleteLicensor?: Maybe<DeleteLicensorPayload>;
  /** Deletes a single `Licensor` using a unique key. */
  deleteLicensorByLicensor?: Maybe<DeleteLicensorPayload>;
  /** Deletes a single `Licensor` using its globally unique id. */
  deleteLicensorByNodeId?: Maybe<DeleteLicensorPayload>;
  /** Deletes a single `Person` using a unique key. */
  deletePerson?: Maybe<DeletePersonPayload>;
  /** Deletes a single `Person` using a unique key. */
  deletePersonByMalId?: Maybe<DeletePersonPayload>;
  /** Deletes a single `Person` using its globally unique id. */
  deletePersonByNodeId?: Maybe<DeletePersonPayload>;
  /** Deletes a single `PersonImage` using a unique key. */
  deletePersonImage?: Maybe<DeletePersonImagePayload>;
  /** Deletes a single `PersonImage` using its globally unique id. */
  deletePersonImageByNodeId?: Maybe<DeletePersonImagePayload>;
  /** Deletes a single `Producer` using a unique key. */
  deleteProducer?: Maybe<DeleteProducerPayload>;
  /** Deletes a single `Producer` using its globally unique id. */
  deleteProducerByNodeId?: Maybe<DeleteProducerPayload>;
  /** Deletes a single `Producer` using a unique key. */
  deleteProducerByProducer?: Maybe<DeleteProducerPayload>;
  /** Deletes a single `StaffRole` using a unique key. */
  deleteStaffRole?: Maybe<DeleteStaffRolePayload>;
  /** Deletes a single `StaffRole` using its globally unique id. */
  deleteStaffRoleByNodeId?: Maybe<DeleteStaffRolePayload>;
  /** Deletes a single `StaffRole` using a unique key. */
  deleteStaffRoleByRole?: Maybe<DeleteStaffRolePayload>;
  /** Deletes a single `Studio` using a unique key. */
  deleteStudio?: Maybe<DeleteStudioPayload>;
  /** Deletes a single `Studio` using its globally unique id. */
  deleteStudioByNodeId?: Maybe<DeleteStudioPayload>;
  /** Deletes a single `Studio` using a unique key. */
  deleteStudioByStudio?: Maybe<DeleteStudioPayload>;
  /** Deletes a single `User` using a unique key. */
  deleteUser?: Maybe<DeleteUserPayload>;
  /** Deletes a single `UserAnime` using a unique key. */
  deleteUserAnime?: Maybe<DeleteUserAnimePayload>;
  /** Deletes a single `UserAnime` using its globally unique id. */
  deleteUserAnimeByNodeId?: Maybe<DeleteUserAnimePayload>;
  /** Deletes a single `UserAnimeList` using a unique key. */
  deleteUserAnimeListByAnimeListIdAndAnimeId?: Maybe<DeleteUserAnimeListPayload>;
  /** Deletes a single `User` using its globally unique id. */
  deleteUserByNodeId?: Maybe<DeleteUserPayload>;
  /** Deletes a single `UserNotification` using a unique key. */
  deleteUserNotification?: Maybe<DeleteUserNotificationPayload>;
  /** Deletes a single `UserNotification` using its globally unique id. */
  deleteUserNotificationByNodeId?: Maybe<DeleteUserNotificationPayload>;
  /** Deletes a single `UserWatchStatus` using a unique key. */
  deleteUserWatchStatus?: Maybe<DeleteUserWatchStatusPayload>;
  /** Deletes a single `UserWatchStatus` using its globally unique id. */
  deleteUserWatchStatusByNodeId?: Maybe<DeleteUserWatchStatusPayload>;
  insertAnimeToUserList?: Maybe<InsertAnimeToUserListPayload>;
  insertOrUpdateAnimeUserScore?: Maybe<InsertOrUpdateAnimeUserScorePayload>;
  registerUser?: Maybe<RegisterUserPayload>;
  /** Updates a single `AlternateAnimeName` using a unique key and a patch. */
  updateAlternateAnimeName?: Maybe<UpdateAlternateAnimeNamePayload>;
  /** Updates a single `AlternateAnimeName` using its globally unique id and a patch. */
  updateAlternateAnimeNameByNodeId?: Maybe<UpdateAlternateAnimeNamePayload>;
  /** Updates a single `Anime` using a unique key and a patch. */
  updateAnime?: Maybe<UpdateAnimePayload>;
  /** Updates a single `Anime` using a unique key and a patch. */
  updateAnimeByMalId?: Maybe<UpdateAnimePayload>;
  /** Updates a single `Anime` using its globally unique id and a patch. */
  updateAnimeByNodeId?: Maybe<UpdateAnimePayload>;
  /** Updates a single `AnimeCharacter` using a unique key and a patch. */
  updateAnimeCharacter?: Maybe<UpdateAnimeCharacterPayload>;
  /** Updates a single `AnimeCharacter` using its globally unique id and a patch. */
  updateAnimeCharacterByNodeId?: Maybe<UpdateAnimeCharacterPayload>;
  /** Updates a single `AnimeGenre` using a unique key and a patch. */
  updateAnimeGenre?: Maybe<UpdateAnimeGenrePayload>;
  /** Updates a single `AnimeGenre` using its globally unique id and a patch. */
  updateAnimeGenreByNodeId?: Maybe<UpdateAnimeGenrePayload>;
  /** Updates a single `AnimeImage` using a unique key and a patch. */
  updateAnimeImage?: Maybe<UpdateAnimeImagePayload>;
  /** Updates a single `AnimeImage` using its globally unique id and a patch. */
  updateAnimeImageByNodeId?: Maybe<UpdateAnimeImagePayload>;
  /** Updates a single `AnimeLicensor` using a unique key and a patch. */
  updateAnimeLicensor?: Maybe<UpdateAnimeLicensorPayload>;
  /** Updates a single `AnimeLicensor` using its globally unique id and a patch. */
  updateAnimeLicensorByNodeId?: Maybe<UpdateAnimeLicensorPayload>;
  /** Updates a single `AnimeList` using a unique key and a patch. */
  updateAnimeList?: Maybe<UpdateAnimeListPayload>;
  /** Updates a single `AnimeList` using its globally unique id and a patch. */
  updateAnimeListByNodeId?: Maybe<UpdateAnimeListPayload>;
  /** Updates a single `AnimeProducer` using a unique key and a patch. */
  updateAnimeProducer?: Maybe<UpdateAnimeProducerPayload>;
  /** Updates a single `AnimeProducer` using its globally unique id and a patch. */
  updateAnimeProducerByNodeId?: Maybe<UpdateAnimeProducerPayload>;
  /** Updates a single `AnimeStaff` using a unique key and a patch. */
  updateAnimeStaff?: Maybe<UpdateAnimeStaffPayload>;
  /** Updates a single `AnimeStaff` using its globally unique id and a patch. */
  updateAnimeStaffByNodeId?: Maybe<UpdateAnimeStaffPayload>;
  /** Updates a single `AnimeStreamingOn` using a unique key and a patch. */
  updateAnimeStreamingOn?: Maybe<UpdateAnimeStreamingOnPayload>;
  /** Updates a single `AnimeStreamingOn` using its globally unique id and a patch. */
  updateAnimeStreamingOnByNodeId?: Maybe<UpdateAnimeStreamingOnPayload>;
  /** Updates a single `AnimeStudio` using a unique key and a patch. */
  updateAnimeStudio?: Maybe<UpdateAnimeStudioPayload>;
  /** Updates a single `AnimeStudio` using its globally unique id and a patch. */
  updateAnimeStudioByNodeId?: Maybe<UpdateAnimeStudioPayload>;
  /** Updates a single `AnimeUserScore` using a unique key and a patch. */
  updateAnimeUserScore?: Maybe<UpdateAnimeUserScorePayload>;
  /** Updates a single `AnimeUserScore` using its globally unique id and a patch. */
  updateAnimeUserScoreByNodeId?: Maybe<UpdateAnimeUserScorePayload>;
  /** Updates a single `Character` using a unique key and a patch. */
  updateCharacter?: Maybe<UpdateCharacterPayload>;
  /** Updates a single `Character` using a unique key and a patch. */
  updateCharacterByMalId?: Maybe<UpdateCharacterPayload>;
  /** Updates a single `Character` using its globally unique id and a patch. */
  updateCharacterByNodeId?: Maybe<UpdateCharacterPayload>;
  /** Updates a single `CharacterImage` using a unique key and a patch. */
  updateCharacterImage?: Maybe<UpdateCharacterImagePayload>;
  /** Updates a single `CharacterImage` using its globally unique id and a patch. */
  updateCharacterImageByNodeId?: Maybe<UpdateCharacterImagePayload>;
  /** Updates a single `CharacterRole` using a unique key and a patch. */
  updateCharacterRole?: Maybe<UpdateCharacterRolePayload>;
  /** Updates a single `CharacterRole` using its globally unique id and a patch. */
  updateCharacterRoleByNodeId?: Maybe<UpdateCharacterRolePayload>;
  /** Updates a single `CharacterRole` using a unique key and a patch. */
  updateCharacterRoleByRole?: Maybe<UpdateCharacterRolePayload>;
  /** Updates a single `Genre` using a unique key and a patch. */
  updateGenre?: Maybe<UpdateGenrePayload>;
  /** Updates a single `Genre` using a unique key and a patch. */
  updateGenreByGenre?: Maybe<UpdateGenrePayload>;
  /** Updates a single `Genre` using its globally unique id and a patch. */
  updateGenreByNodeId?: Maybe<UpdateGenrePayload>;
  /** Updates a single `Image` using a unique key and a patch. */
  updateImage?: Maybe<UpdateImagePayload>;
  /** Updates a single `Image` using its globally unique id and a patch. */
  updateImageByNodeId?: Maybe<UpdateImagePayload>;
  /** Updates a single `Licensor` using a unique key and a patch. */
  updateLicensor?: Maybe<UpdateLicensorPayload>;
  /** Updates a single `Licensor` using a unique key and a patch. */
  updateLicensorByLicensor?: Maybe<UpdateLicensorPayload>;
  /** Updates a single `Licensor` using its globally unique id and a patch. */
  updateLicensorByNodeId?: Maybe<UpdateLicensorPayload>;
  /** Updates a single `Person` using a unique key and a patch. */
  updatePerson?: Maybe<UpdatePersonPayload>;
  /** Updates a single `Person` using a unique key and a patch. */
  updatePersonByMalId?: Maybe<UpdatePersonPayload>;
  /** Updates a single `Person` using its globally unique id and a patch. */
  updatePersonByNodeId?: Maybe<UpdatePersonPayload>;
  /** Updates a single `PersonImage` using a unique key and a patch. */
  updatePersonImage?: Maybe<UpdatePersonImagePayload>;
  /** Updates a single `PersonImage` using its globally unique id and a patch. */
  updatePersonImageByNodeId?: Maybe<UpdatePersonImagePayload>;
  /** Updates a single `Producer` using a unique key and a patch. */
  updateProducer?: Maybe<UpdateProducerPayload>;
  /** Updates a single `Producer` using its globally unique id and a patch. */
  updateProducerByNodeId?: Maybe<UpdateProducerPayload>;
  /** Updates a single `Producer` using a unique key and a patch. */
  updateProducerByProducer?: Maybe<UpdateProducerPayload>;
  /** Updates a single `StaffRole` using a unique key and a patch. */
  updateStaffRole?: Maybe<UpdateStaffRolePayload>;
  /** Updates a single `StaffRole` using its globally unique id and a patch. */
  updateStaffRoleByNodeId?: Maybe<UpdateStaffRolePayload>;
  /** Updates a single `StaffRole` using a unique key and a patch. */
  updateStaffRoleByRole?: Maybe<UpdateStaffRolePayload>;
  /** Updates a single `Studio` using a unique key and a patch. */
  updateStudio?: Maybe<UpdateStudioPayload>;
  /** Updates a single `Studio` using its globally unique id and a patch. */
  updateStudioByNodeId?: Maybe<UpdateStudioPayload>;
  /** Updates a single `Studio` using a unique key and a patch. */
  updateStudioByStudio?: Maybe<UpdateStudioPayload>;
  /** Updates a single `User` using a unique key and a patch. */
  updateUser?: Maybe<UpdateUserPayload>;
  /** Updates a single `UserAnime` using a unique key and a patch. */
  updateUserAnime?: Maybe<UpdateUserAnimePayload>;
  /** Updates a single `UserAnime` using its globally unique id and a patch. */
  updateUserAnimeByNodeId?: Maybe<UpdateUserAnimePayload>;
  /** Updates a single `UserAnimeList` using a unique key and a patch. */
  updateUserAnimeListByAnimeListIdAndAnimeId?: Maybe<UpdateUserAnimeListPayload>;
  /** Updates a single `User` using its globally unique id and a patch. */
  updateUserByNodeId?: Maybe<UpdateUserPayload>;
  /** Updates a single `UserNotification` using a unique key and a patch. */
  updateUserNotification?: Maybe<UpdateUserNotificationPayload>;
  /** Updates a single `UserNotification` using its globally unique id and a patch. */
  updateUserNotificationByNodeId?: Maybe<UpdateUserNotificationPayload>;
  /** Updates a single `UserWatchStatus` using a unique key and a patch. */
  updateUserWatchStatus?: Maybe<UpdateUserWatchStatusPayload>;
  /** Updates a single `UserWatchStatus` using its globally unique id and a patch. */
  updateUserWatchStatusByNodeId?: Maybe<UpdateUserWatchStatusPayload>;
  /** Upserts a single `AlternateAnimeName`. */
  upsertAlternateAnimeName?: Maybe<UpsertAlternateAnimeNamePayload>;
  /** Upserts a single `Anime`. */
  upsertAnime?: Maybe<UpsertAnimePayload>;
  /** Upserts a single `AnimeCharacter`. */
  upsertAnimeCharacter?: Maybe<UpsertAnimeCharacterPayload>;
  /** Upserts a single `AnimeGenre`. */
  upsertAnimeGenre?: Maybe<UpsertAnimeGenrePayload>;
  /** Upserts a single `AnimeImage`. */
  upsertAnimeImage?: Maybe<UpsertAnimeImagePayload>;
  /** Upserts a single `AnimeLicensor`. */
  upsertAnimeLicensor?: Maybe<UpsertAnimeLicensorPayload>;
  /** Upserts a single `AnimeList`. */
  upsertAnimeList?: Maybe<UpsertAnimeListPayload>;
  /** Upserts a single `AnimeProducer`. */
  upsertAnimeProducer?: Maybe<UpsertAnimeProducerPayload>;
  /** Upserts a single `AnimeStaff`. */
  upsertAnimeStaff?: Maybe<UpsertAnimeStaffPayload>;
  /** Upserts a single `AnimeStreamingOn`. */
  upsertAnimeStreamingOn?: Maybe<UpsertAnimeStreamingOnPayload>;
  /** Upserts a single `AnimeStudio`. */
  upsertAnimeStudio?: Maybe<UpsertAnimeStudioPayload>;
  /** Upserts a single `AnimeUserScore`. */
  upsertAnimeUserScore?: Maybe<UpsertAnimeUserScorePayload>;
  /** Upserts a single `Character`. */
  upsertCharacter?: Maybe<UpsertCharacterPayload>;
  /** Upserts a single `CharacterImage`. */
  upsertCharacterImage?: Maybe<UpsertCharacterImagePayload>;
  /** Upserts a single `CharacterRole`. */
  upsertCharacterRole?: Maybe<UpsertCharacterRolePayload>;
  /** Upserts a single `Genre`. */
  upsertGenre?: Maybe<UpsertGenrePayload>;
  /** Upserts a single `Image`. */
  upsertImage?: Maybe<UpsertImagePayload>;
  /** Upserts a single `Licensor`. */
  upsertLicensor?: Maybe<UpsertLicensorPayload>;
  /** Upserts a single `Person`. */
  upsertPerson?: Maybe<UpsertPersonPayload>;
  /** Upserts a single `PersonImage`. */
  upsertPersonImage?: Maybe<UpsertPersonImagePayload>;
  /** Upserts a single `Producer`. */
  upsertProducer?: Maybe<UpsertProducerPayload>;
  /** Upserts a single `StaffRole`. */
  upsertStaffRole?: Maybe<UpsertStaffRolePayload>;
  /** Upserts a single `Studio`. */
  upsertStudio?: Maybe<UpsertStudioPayload>;
  /** Upserts a single `User`. */
  upsertUser?: Maybe<UpsertUserPayload>;
  /** Upserts a single `UserAnime`. */
  upsertUserAnime?: Maybe<UpsertUserAnimePayload>;
  /** Upserts a single `UserAnimeList`. */
  upsertUserAnimeList?: Maybe<UpsertUserAnimeListPayload>;
  /** Upserts a single `UserNotification`. */
  upsertUserNotification?: Maybe<UpsertUserNotificationPayload>;
  /** Upserts a single `UserWatchStatus`. */
  upsertUserWatchStatus?: Maybe<UpsertUserWatchStatusPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddAnimeToListArgs = {
  input: AddAnimeToListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationChangeUsernameArgs = {
  input: ChangeUsernameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAlternateAnimeNameArgs = {
  input: CreateAlternateAnimeNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeArgs = {
  input: CreateAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeCharacterArgs = {
  input: CreateAnimeCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeGenreArgs = {
  input: CreateAnimeGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeImageArgs = {
  input: CreateAnimeImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeLicensorArgs = {
  input: CreateAnimeLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeListArgs = {
  input: CreateAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeProducerArgs = {
  input: CreateAnimeProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeStaffArgs = {
  input: CreateAnimeStaffInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeStreamingOnArgs = {
  input: CreateAnimeStreamingOnInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeStudioArgs = {
  input: CreateAnimeStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAnimeUserScoreArgs = {
  input: CreateAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCharacterArgs = {
  input: CreateCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCharacterImageArgs = {
  input: CreateCharacterImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCharacterRoleArgs = {
  input: CreateCharacterRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateGenreArgs = {
  input: CreateGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateImageArgs = {
  input: CreateImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateLicensorArgs = {
  input: CreateLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNewListAddAnimeArgs = {
  input: CreateNewListAddAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePersonArgs = {
  input: CreatePersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePersonImageArgs = {
  input: CreatePersonImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateProducerArgs = {
  input: CreateProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateStaffRoleArgs = {
  input: CreateStaffRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateStudioArgs = {
  input: CreateStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserAnimeArgs = {
  input: CreateUserAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserAnimeListArgs = {
  input: CreateUserAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserNotificationArgs = {
  input: CreateUserNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserWatchStatusArgs = {
  input: CreateUserWatchStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAlternateAnimeNameArgs = {
  input: DeleteAlternateAnimeNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAlternateAnimeNameByNodeIdArgs = {
  input: DeleteAlternateAnimeNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeArgs = {
  input: DeleteAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeByMalIdArgs = {
  input: DeleteAnimeByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeByNodeIdArgs = {
  input: DeleteAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeCharacterArgs = {
  input: DeleteAnimeCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeCharacterByNodeIdArgs = {
  input: DeleteAnimeCharacterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeGenreArgs = {
  input: DeleteAnimeGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeGenreByNodeIdArgs = {
  input: DeleteAnimeGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeImageArgs = {
  input: DeleteAnimeImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeImageByNodeIdArgs = {
  input: DeleteAnimeImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeLicensorArgs = {
  input: DeleteAnimeLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeLicensorByNodeIdArgs = {
  input: DeleteAnimeLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeListArgs = {
  input: DeleteAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeListByNodeIdArgs = {
  input: DeleteAnimeListByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeProducerArgs = {
  input: DeleteAnimeProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeProducerByNodeIdArgs = {
  input: DeleteAnimeProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStaffArgs = {
  input: DeleteAnimeStaffInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStaffByNodeIdArgs = {
  input: DeleteAnimeStaffByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStreamingOnArgs = {
  input: DeleteAnimeStreamingOnInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStreamingOnByNodeIdArgs = {
  input: DeleteAnimeStreamingOnByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStudioArgs = {
  input: DeleteAnimeStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeStudioByNodeIdArgs = {
  input: DeleteAnimeStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeUserScoreArgs = {
  input: DeleteAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteAnimeUserScoreByNodeIdArgs = {
  input: DeleteAnimeUserScoreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterArgs = {
  input: DeleteCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterByMalIdArgs = {
  input: DeleteCharacterByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterByNodeIdArgs = {
  input: DeleteCharacterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterImageArgs = {
  input: DeleteCharacterImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterImageByNodeIdArgs = {
  input: DeleteCharacterImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterRoleArgs = {
  input: DeleteCharacterRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterRoleByNodeIdArgs = {
  input: DeleteCharacterRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCharacterRoleByRoleArgs = {
  input: DeleteCharacterRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteGenreArgs = {
  input: DeleteGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteGenreByGenreArgs = {
  input: DeleteGenreByGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteGenreByNodeIdArgs = {
  input: DeleteGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteImageArgs = {
  input: DeleteImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteImageByNodeIdArgs = {
  input: DeleteImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLicensorArgs = {
  input: DeleteLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLicensorByLicensorArgs = {
  input: DeleteLicensorByLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteLicensorByNodeIdArgs = {
  input: DeleteLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonArgs = {
  input: DeletePersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonByMalIdArgs = {
  input: DeletePersonByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonByNodeIdArgs = {
  input: DeletePersonByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonImageArgs = {
  input: DeletePersonImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePersonImageByNodeIdArgs = {
  input: DeletePersonImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProducerArgs = {
  input: DeleteProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProducerByNodeIdArgs = {
  input: DeleteProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProducerByProducerArgs = {
  input: DeleteProducerByProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStaffRoleArgs = {
  input: DeleteStaffRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStaffRoleByNodeIdArgs = {
  input: DeleteStaffRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStaffRoleByRoleArgs = {
  input: DeleteStaffRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStudioArgs = {
  input: DeleteStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStudioByNodeIdArgs = {
  input: DeleteStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteStudioByStudioArgs = {
  input: DeleteStudioByStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserArgs = {
  input: DeleteUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAnimeArgs = {
  input: DeleteUserAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAnimeByNodeIdArgs = {
  input: DeleteUserAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAnimeListByAnimeListIdAndAnimeIdArgs = {
  input: DeleteUserAnimeListByAnimeListIdAndAnimeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserByNodeIdArgs = {
  input: DeleteUserByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserNotificationArgs = {
  input: DeleteUserNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserNotificationByNodeIdArgs = {
  input: DeleteUserNotificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserWatchStatusArgs = {
  input: DeleteUserWatchStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserWatchStatusByNodeIdArgs = {
  input: DeleteUserWatchStatusByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertAnimeToUserListArgs = {
  input: InsertAnimeToUserListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertOrUpdateAnimeUserScoreArgs = {
  input: InsertOrUpdateAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterUserArgs = {
  input: RegisterUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAlternateAnimeNameArgs = {
  input: UpdateAlternateAnimeNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAlternateAnimeNameByNodeIdArgs = {
  input: UpdateAlternateAnimeNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeArgs = {
  input: UpdateAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeByMalIdArgs = {
  input: UpdateAnimeByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeByNodeIdArgs = {
  input: UpdateAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeCharacterArgs = {
  input: UpdateAnimeCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeCharacterByNodeIdArgs = {
  input: UpdateAnimeCharacterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeGenreArgs = {
  input: UpdateAnimeGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeGenreByNodeIdArgs = {
  input: UpdateAnimeGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeImageArgs = {
  input: UpdateAnimeImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeImageByNodeIdArgs = {
  input: UpdateAnimeImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeLicensorArgs = {
  input: UpdateAnimeLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeLicensorByNodeIdArgs = {
  input: UpdateAnimeLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeListArgs = {
  input: UpdateAnimeListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeListByNodeIdArgs = {
  input: UpdateAnimeListByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeProducerArgs = {
  input: UpdateAnimeProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeProducerByNodeIdArgs = {
  input: UpdateAnimeProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStaffArgs = {
  input: UpdateAnimeStaffInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStaffByNodeIdArgs = {
  input: UpdateAnimeStaffByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStreamingOnArgs = {
  input: UpdateAnimeStreamingOnInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStreamingOnByNodeIdArgs = {
  input: UpdateAnimeStreamingOnByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStudioArgs = {
  input: UpdateAnimeStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeStudioByNodeIdArgs = {
  input: UpdateAnimeStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeUserScoreArgs = {
  input: UpdateAnimeUserScoreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateAnimeUserScoreByNodeIdArgs = {
  input: UpdateAnimeUserScoreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterArgs = {
  input: UpdateCharacterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterByMalIdArgs = {
  input: UpdateCharacterByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterByNodeIdArgs = {
  input: UpdateCharacterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterImageArgs = {
  input: UpdateCharacterImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterImageByNodeIdArgs = {
  input: UpdateCharacterImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterRoleArgs = {
  input: UpdateCharacterRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterRoleByNodeIdArgs = {
  input: UpdateCharacterRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCharacterRoleByRoleArgs = {
  input: UpdateCharacterRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateGenreArgs = {
  input: UpdateGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateGenreByGenreArgs = {
  input: UpdateGenreByGenreInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateGenreByNodeIdArgs = {
  input: UpdateGenreByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateImageArgs = {
  input: UpdateImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateImageByNodeIdArgs = {
  input: UpdateImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLicensorArgs = {
  input: UpdateLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLicensorByLicensorArgs = {
  input: UpdateLicensorByLicensorInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateLicensorByNodeIdArgs = {
  input: UpdateLicensorByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonArgs = {
  input: UpdatePersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonByMalIdArgs = {
  input: UpdatePersonByMalIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonByNodeIdArgs = {
  input: UpdatePersonByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonImageArgs = {
  input: UpdatePersonImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonImageByNodeIdArgs = {
  input: UpdatePersonImageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProducerArgs = {
  input: UpdateProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProducerByNodeIdArgs = {
  input: UpdateProducerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProducerByProducerArgs = {
  input: UpdateProducerByProducerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStaffRoleArgs = {
  input: UpdateStaffRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStaffRoleByNodeIdArgs = {
  input: UpdateStaffRoleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStaffRoleByRoleArgs = {
  input: UpdateStaffRoleByRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStudioArgs = {
  input: UpdateStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStudioByNodeIdArgs = {
  input: UpdateStudioByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateStudioByStudioArgs = {
  input: UpdateStudioByStudioInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserAnimeArgs = {
  input: UpdateUserAnimeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserAnimeByNodeIdArgs = {
  input: UpdateUserAnimeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserAnimeListByAnimeListIdAndAnimeIdArgs = {
  input: UpdateUserAnimeListByAnimeListIdAndAnimeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserByNodeIdArgs = {
  input: UpdateUserByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserNotificationArgs = {
  input: UpdateUserNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserNotificationByNodeIdArgs = {
  input: UpdateUserNotificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserWatchStatusArgs = {
  input: UpdateUserWatchStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserWatchStatusByNodeIdArgs = {
  input: UpdateUserWatchStatusByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAlternateAnimeNameArgs = {
  input: UpsertAlternateAnimeNameInput;
  where?: InputMaybe<UpsertAlternateAnimeNameWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeArgs = {
  input: UpsertAnimeInput;
  where?: InputMaybe<UpsertAnimeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeCharacterArgs = {
  input: UpsertAnimeCharacterInput;
  where?: InputMaybe<UpsertAnimeCharacterWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeGenreArgs = {
  input: UpsertAnimeGenreInput;
  where?: InputMaybe<UpsertAnimeGenreWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeImageArgs = {
  input: UpsertAnimeImageInput;
  where?: InputMaybe<UpsertAnimeImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeLicensorArgs = {
  input: UpsertAnimeLicensorInput;
  where?: InputMaybe<UpsertAnimeLicensorWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeListArgs = {
  input: UpsertAnimeListInput;
  where?: InputMaybe<UpsertAnimeListWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeProducerArgs = {
  input: UpsertAnimeProducerInput;
  where?: InputMaybe<UpsertAnimeProducerWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeStaffArgs = {
  input: UpsertAnimeStaffInput;
  where?: InputMaybe<UpsertAnimeStaffWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeStreamingOnArgs = {
  input: UpsertAnimeStreamingOnInput;
  where?: InputMaybe<UpsertAnimeStreamingOnWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeStudioArgs = {
  input: UpsertAnimeStudioInput;
  where?: InputMaybe<UpsertAnimeStudioWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertAnimeUserScoreArgs = {
  input: UpsertAnimeUserScoreInput;
  where?: InputMaybe<UpsertAnimeUserScoreWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertCharacterArgs = {
  input: UpsertCharacterInput;
  where?: InputMaybe<UpsertCharacterWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertCharacterImageArgs = {
  input: UpsertCharacterImageInput;
  where?: InputMaybe<UpsertCharacterImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertCharacterRoleArgs = {
  input: UpsertCharacterRoleInput;
  where?: InputMaybe<UpsertCharacterRoleWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertGenreArgs = {
  input: UpsertGenreInput;
  where?: InputMaybe<UpsertGenreWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertImageArgs = {
  input: UpsertImageInput;
  where?: InputMaybe<UpsertImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertLicensorArgs = {
  input: UpsertLicensorInput;
  where?: InputMaybe<UpsertLicensorWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertPersonArgs = {
  input: UpsertPersonInput;
  where?: InputMaybe<UpsertPersonWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertPersonImageArgs = {
  input: UpsertPersonImageInput;
  where?: InputMaybe<UpsertPersonImageWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertProducerArgs = {
  input: UpsertProducerInput;
  where?: InputMaybe<UpsertProducerWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertStaffRoleArgs = {
  input: UpsertStaffRoleInput;
  where?: InputMaybe<UpsertStaffRoleWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertStudioArgs = {
  input: UpsertStudioInput;
  where?: InputMaybe<UpsertStudioWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserArgs = {
  input: UpsertUserInput;
  where?: InputMaybe<UpsertUserWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserAnimeArgs = {
  input: UpsertUserAnimeInput;
  where?: InputMaybe<UpsertUserAnimeWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserAnimeListArgs = {
  input: UpsertUserAnimeListInput;
  where?: InputMaybe<UpsertUserAnimeListWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserNotificationArgs = {
  input: UpsertUserNotificationInput;
  where?: InputMaybe<UpsertUserNotificationWhere>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpsertUserWatchStatusArgs = {
  input: UpsertUserWatchStatusInput;
  where?: InputMaybe<UpsertUserWatchStatusWhere>;
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

export type NotificationEvent = {
  __typename?: 'NotificationEvent';
  event?: Maybe<Scalars['String']>;
  notification?: Maybe<UserNotification>;
};

export enum NotificationType {
  /** an anime is airing a new episode */
  Airing = 'AIRING'
}

/** A filter to be used against NotificationType fields. All fields are combined with a logical ‘and.’ */
export type NotificationTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<NotificationType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<NotificationType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<NotificationType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<NotificationType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<NotificationType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<NotificationType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<NotificationType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<NotificationType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<NotificationType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<NotificationType>>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
};

/** A connection to a list of `Person` values. */
export type PeopleConnection = {
  __typename?: 'PeopleConnection';
  /** A list of edges which contains the `Person` and cursor to aid in pagination. */
  edges: Array<PeopleEdge>;
  /** A list of `Person` objects. */
  nodes: Array<Person>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Person` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Person` edge in the connection. */
export type PeopleEdge = {
  __typename?: 'PeopleEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Person` at the end of the edge. */
  node: Person;
};

/** Methods to use when ordering `Person`. */
export enum PeopleOrderBy {
  AlternateNamesAsc = 'ALTERNATE_NAMES_ASC',
  AlternateNamesDesc = 'ALTERNATE_NAMES_DESC',
  AnimeCharactersByPersonIdCountAsc = 'ANIME_CHARACTERS_BY_PERSON_ID__COUNT_ASC',
  AnimeCharactersByPersonIdCountDesc = 'ANIME_CHARACTERS_BY_PERSON_ID__COUNT_DESC',
  AnimeStaffByPersonIdCountAsc = 'ANIME_STAFF_BY_PERSON_ID__COUNT_ASC',
  AnimeStaffByPersonIdCountDesc = 'ANIME_STAFF_BY_PERSON_ID__COUNT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ImageByPersonImageIdIdAsc = 'IMAGE_BY_PERSON_IMAGE_ID__ID_ASC',
  ImageByPersonImageIdIdDesc = 'IMAGE_BY_PERSON_IMAGE_ID__ID_DESC',
  ImageByPersonImageIdTitleAsc = 'IMAGE_BY_PERSON_IMAGE_ID__TITLE_ASC',
  ImageByPersonImageIdTitleDesc = 'IMAGE_BY_PERSON_IMAGE_ID__TITLE_DESC',
  ImageByPersonImageIdUrlAsc = 'IMAGE_BY_PERSON_IMAGE_ID__URL_ASC',
  ImageByPersonImageIdUrlDesc = 'IMAGE_BY_PERSON_IMAGE_ID__URL_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  MalIdAsc = 'MAL_ID_ASC',
  MalIdDesc = 'MAL_ID_DESC',
  NativeNameAsc = 'NATIVE_NAME_ASC',
  NativeNameDesc = 'NATIVE_NAME_DESC',
  Natural = 'NATURAL',
  PersonImagesByPersonIdCountAsc = 'PERSON_IMAGES_BY_PERSON_ID__COUNT_ASC',
  PersonImagesByPersonIdCountDesc = 'PERSON_IMAGES_BY_PERSON_ID__COUNT_DESC',
  PersonImageIdAsc = 'PERSON_IMAGE_ID_ASC',
  PersonImageIdDesc = 'PERSON_IMAGE_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Person = Node & {
  __typename?: 'Person';
  alternateNames?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters: AnimeCharactersConnection;
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs: AnimeStaffConnection;
  description?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  id: Scalars['UUID'];
  lastName?: Maybe<Scalars['String']>;
  malId?: Maybe<Scalars['String']>;
  nativeName?: Maybe<Scalars['String']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Reads and enables pagination through a set of `PersonImage`. */
  personImages: PersonImagesConnection;
};


export type PersonAnimeCharactersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeCharacterCondition>;
  filter?: InputMaybe<AnimeCharacterFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};


export type PersonAnimeStaffsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStaffCondition>;
  filter?: InputMaybe<AnimeStaffFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};


export type PersonPersonImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<PersonImageCondition>;
  filter?: InputMaybe<PersonImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PersonImagesOrderBy>>;
};

/** A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PersonCondition = {
  /** Checks for equality with the object’s `alternateNames` field. */
  alternateNames?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `malId` field. */
  malId?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `nativeName` field. */
  nativeName?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `personImageId` field. */
  personImageId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `Person` object types. All fields are combined with a logical ‘and.’ */
export type PersonFilter = {
  /** Filter by the object’s `alternateNames` field. */
  alternateNames?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PersonFilter>>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `nativeName` field. */
  nativeName?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PersonFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PersonFilter>>;
  /** Filter by the object’s `personImageId` field. */
  personImageId?: InputMaybe<UuidFilter>;
};

export type PersonImage = Node & {
  __typename?: 'PersonImage';
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  imageId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  personId: Scalars['UUID'];
};

/**
 * A condition to be used against `PersonImage` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type PersonImageCondition = {
  /** Checks for equality with the object’s `imageId` field. */
  imageId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personId` field. */
  personId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `PersonImage` object types. All fields are combined with a logical ‘and.’ */
export type PersonImageFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PersonImageFilter>>;
  /** Filter by the object’s `imageId` field. */
  imageId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PersonImageFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PersonImageFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: InputMaybe<UuidFilter>;
};

/** An input for mutations affecting `PersonImage` */
export type PersonImageInput = {
  imageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};

/** Represents an update to a `PersonImage`. Fields that are set will be updated. */
export type PersonImagePatch = {
  imageId?: InputMaybe<Scalars['UUID']>;
  personId?: InputMaybe<Scalars['UUID']>;
};

/** A connection to a list of `PersonImage` values. */
export type PersonImagesConnection = {
  __typename?: 'PersonImagesConnection';
  /** A list of edges which contains the `PersonImage` and cursor to aid in pagination. */
  edges: Array<PersonImagesEdge>;
  /** A list of `PersonImage` objects. */
  nodes: Array<PersonImage>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonImage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonImage` edge in the connection. */
export type PersonImagesEdge = {
  __typename?: 'PersonImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonImage` at the end of the edge. */
  node: PersonImage;
};

/** Methods to use when ordering `PersonImage`. */
export enum PersonImagesOrderBy {
  ImageByImageIdIdAsc = 'IMAGE_BY_IMAGE_ID__ID_ASC',
  ImageByImageIdIdDesc = 'IMAGE_BY_IMAGE_ID__ID_DESC',
  ImageByImageIdTitleAsc = 'IMAGE_BY_IMAGE_ID__TITLE_ASC',
  ImageByImageIdTitleDesc = 'IMAGE_BY_IMAGE_ID__TITLE_DESC',
  ImageByImageIdUrlAsc = 'IMAGE_BY_IMAGE_ID__URL_ASC',
  ImageByImageIdUrlDesc = 'IMAGE_BY_IMAGE_ID__URL_DESC',
  ImageIdAsc = 'IMAGE_ID_ASC',
  ImageIdDesc = 'IMAGE_ID_DESC',
  Natural = 'NATURAL',
  PersonByPersonIdAlternateNamesAsc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_ASC',
  PersonByPersonIdAlternateNamesDesc = 'PERSON_BY_PERSON_ID__ALTERNATE_NAMES_DESC',
  PersonByPersonIdDescriptionAsc = 'PERSON_BY_PERSON_ID__DESCRIPTION_ASC',
  PersonByPersonIdDescriptionDesc = 'PERSON_BY_PERSON_ID__DESCRIPTION_DESC',
  PersonByPersonIdFirstNameAsc = 'PERSON_BY_PERSON_ID__FIRST_NAME_ASC',
  PersonByPersonIdFirstNameDesc = 'PERSON_BY_PERSON_ID__FIRST_NAME_DESC',
  PersonByPersonIdIdAsc = 'PERSON_BY_PERSON_ID__ID_ASC',
  PersonByPersonIdIdDesc = 'PERSON_BY_PERSON_ID__ID_DESC',
  PersonByPersonIdLastNameAsc = 'PERSON_BY_PERSON_ID__LAST_NAME_ASC',
  PersonByPersonIdLastNameDesc = 'PERSON_BY_PERSON_ID__LAST_NAME_DESC',
  PersonByPersonIdMalIdAsc = 'PERSON_BY_PERSON_ID__MAL_ID_ASC',
  PersonByPersonIdMalIdDesc = 'PERSON_BY_PERSON_ID__MAL_ID_DESC',
  PersonByPersonIdNativeNameAsc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_ASC',
  PersonByPersonIdNativeNameDesc = 'PERSON_BY_PERSON_ID__NATIVE_NAME_DESC',
  PersonByPersonIdPersonImageIdAsc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_ASC',
  PersonByPersonIdPersonImageIdDesc = 'PERSON_BY_PERSON_ID__PERSON_IMAGE_ID_DESC',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** An input for mutations affecting `Person` */
export type PersonInput = {
  alternateNames?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['UUID']>;
  lastName?: InputMaybe<Scalars['String']>;
  malId?: InputMaybe<Scalars['String']>;
  nativeName?: InputMaybe<Scalars['String']>;
  personImageId?: InputMaybe<Scalars['UUID']>;
};

/** Represents an update to a `Person`. Fields that are set will be updated. */
export type PersonPatch = {
  alternateNames?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['UUID']>;
  lastName?: InputMaybe<Scalars['String']>;
  malId?: InputMaybe<Scalars['String']>;
  nativeName?: InputMaybe<Scalars['String']>;
  personImageId?: InputMaybe<Scalars['UUID']>;
};

export type Producer = Node & {
  __typename?: 'Producer';
  /** Reads and enables pagination through a set of `AnimeProducer`. */
  animeProducers: AnimeProducersConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  producer: Scalars['String'];
};


export type ProducerAnimeProducersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeProducerCondition>;
  filter?: InputMaybe<AnimeProducerFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeProducersOrderBy>>;
};

/**
 * A condition to be used against `Producer` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type ProducerCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `producer` field. */
  producer?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `Producer` object types. All fields are combined with a logical ‘and.’ */
export type ProducerFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ProducerFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ProducerFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ProducerFilter>>;
  /** Filter by the object’s `producer` field. */
  producer?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `Producer` */
export type ProducerInput = {
  id?: InputMaybe<Scalars['UUID']>;
  producer: Scalars['String'];
};

/** Represents an update to a `Producer`. Fields that are set will be updated. */
export type ProducerPatch = {
  id?: InputMaybe<Scalars['UUID']>;
  producer?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `Producer` values. */
export type ProducersConnection = {
  __typename?: 'ProducersConnection';
  /** A list of edges which contains the `Producer` and cursor to aid in pagination. */
  edges: Array<ProducersEdge>;
  /** A list of `Producer` objects. */
  nodes: Array<Producer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Producer` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Producer` edge in the connection. */
export type ProducersEdge = {
  __typename?: 'ProducersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Producer` at the end of the edge. */
  node: Producer;
};

/** Methods to use when ordering `Producer`. */
export enum ProducersOrderBy {
  AnimeProducersByProducerIdCountAsc = 'ANIME_PRODUCERS_BY_PRODUCER_ID__COUNT_ASC',
  AnimeProducersByProducerIdCountDesc = 'ANIME_PRODUCERS_BY_PRODUCER_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProducerAsc = 'PRODUCER_ASC',
  ProducerDesc = 'PRODUCER_DESC'
}

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  __typename?: 'Query';
  /** Reads and enables pagination through a set of `AgeRating`. */
  ageRatings?: Maybe<AgeRatingsConnection>;
  /** Reads and enables pagination through a set of `AiringStatus`. */
  airingStatuses?: Maybe<AiringStatusesConnection>;
  /** Reads and enables pagination through a set of `UserAnimeListType`. */
  allUserAnimes?: Maybe<UserAnimeListTypesConnection>;
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** Reads a single `AlternateAnimeName` using its globally unique `ID`. */
  alternateAnimeNameByNodeId?: Maybe<AlternateAnimeName>;
  /** Reads and enables pagination through a set of `AlternateAnimeName`. */
  alternateAnimeNames?: Maybe<AlternateAnimeNamesConnection>;
  anime?: Maybe<Anime>;
  animeByMalId?: Maybe<Anime>;
  /** Reads a single `Anime` using its globally unique `ID`. */
  animeByNodeId?: Maybe<Anime>;
  animeCharacter?: Maybe<AnimeCharacter>;
  /** Reads a single `AnimeCharacter` using its globally unique `ID`. */
  animeCharacterByNodeId?: Maybe<AnimeCharacter>;
  /** Reads and enables pagination through a set of `AnimeCharacter`. */
  animeCharacters?: Maybe<AnimeCharactersConnection>;
  animeGenre?: Maybe<AnimeGenre>;
  /** Reads a single `AnimeGenre` using its globally unique `ID`. */
  animeGenreByNodeId?: Maybe<AnimeGenre>;
  /** Reads and enables pagination through a set of `AnimeGenre`. */
  animeGenres?: Maybe<AnimeGenresConnection>;
  animeImage?: Maybe<AnimeImage>;
  /** Reads a single `AnimeImage` using its globally unique `ID`. */
  animeImageByNodeId?: Maybe<AnimeImage>;
  /** Reads and enables pagination through a set of `AnimeImage`. */
  animeImages?: Maybe<AnimeImagesConnection>;
  animeLicensor?: Maybe<AnimeLicensor>;
  /** Reads a single `AnimeLicensor` using its globally unique `ID`. */
  animeLicensorByNodeId?: Maybe<AnimeLicensor>;
  /** Reads and enables pagination through a set of `AnimeLicensor`. */
  animeLicensors?: Maybe<AnimeLicensorsConnection>;
  animeList?: Maybe<AnimeList>;
  /** Reads a single `AnimeList` using its globally unique `ID`. */
  animeListByNodeId?: Maybe<AnimeList>;
  /** Reads and enables pagination through a set of `AnimeList`. */
  animeLists?: Maybe<AnimeListsConnection>;
  animeProducer?: Maybe<AnimeProducer>;
  /** Reads a single `AnimeProducer` using its globally unique `ID`. */
  animeProducerByNodeId?: Maybe<AnimeProducer>;
  /** Reads and enables pagination through a set of `AnimeProducer`. */
  animeProducers?: Maybe<AnimeProducersConnection>;
  animeStaff?: Maybe<AnimeStaff>;
  /** Reads a single `AnimeStaff` using its globally unique `ID`. */
  animeStaffByNodeId?: Maybe<AnimeStaff>;
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs?: Maybe<AnimeStaffConnection>;
  animeStreamingOn?: Maybe<AnimeStreamingOn>;
  /** Reads a single `AnimeStreamingOn` using its globally unique `ID`. */
  animeStreamingOnByNodeId?: Maybe<AnimeStreamingOn>;
  /** Reads and enables pagination through a set of `AnimeStreamingOn`. */
  animeStreamingOns?: Maybe<AnimeStreamingOnsConnection>;
  animeStudio?: Maybe<AnimeStudio>;
  /** Reads a single `AnimeStudio` using its globally unique `ID`. */
  animeStudioByNodeId?: Maybe<AnimeStudio>;
  /** Reads and enables pagination through a set of `AnimeStudio`. */
  animeStudios?: Maybe<AnimeStudiosConnection>;
  animeUserScore?: Maybe<AnimeUserScore>;
  /** Reads a single `AnimeUserScore` using its globally unique `ID`. */
  animeUserScoreByNodeId?: Maybe<AnimeUserScore>;
  /** Reads and enables pagination through a set of `AnimeUserScore`. */
  animeUserScores?: Maybe<AnimeUserScoresConnection>;
  /** Reads and enables pagination through a set of `Anime`. */
  animes?: Maybe<AnimeConnection>;
  /** Reads and enables pagination through a set of `AvailableLanguage`. */
  availableLanguages?: Maybe<AvailableLanguagesConnection>;
  character?: Maybe<Character>;
  characterByMalId?: Maybe<Character>;
  /** Reads a single `Character` using its globally unique `ID`. */
  characterByNodeId?: Maybe<Character>;
  characterImage?: Maybe<CharacterImage>;
  /** Reads a single `CharacterImage` using its globally unique `ID`. */
  characterImageByNodeId?: Maybe<CharacterImage>;
  /** Reads and enables pagination through a set of `CharacterImage`. */
  characterImages?: Maybe<CharacterImagesConnection>;
  characterRole?: Maybe<CharacterRole>;
  /** Reads a single `CharacterRole` using its globally unique `ID`. */
  characterRoleByNodeId?: Maybe<CharacterRole>;
  characterRoleByRole?: Maybe<CharacterRole>;
  /** Reads and enables pagination through a set of `CharacterRole`. */
  characterRoles?: Maybe<CharacterRolesConnection>;
  /** Reads and enables pagination through a set of `Character`. */
  characters?: Maybe<CharactersConnection>;
  currentRole?: Maybe<Scalars['String']>;
  currentUser?: Maybe<Scalars['String']>;
  genre?: Maybe<Genre>;
  genreByGenre?: Maybe<Genre>;
  /** Reads a single `Genre` using its globally unique `ID`. */
  genreByNodeId?: Maybe<Genre>;
  /** Reads and enables pagination through a set of `Genre`. */
  genres?: Maybe<GenresConnection>;
  /** Reads and enables pagination through a set of `UserList`. */
  getUserAnimeLists?: Maybe<UserListsConnection>;
  image?: Maybe<Image>;
  /** Reads a single `Image` using its globally unique `ID`. */
  imageByNodeId?: Maybe<Image>;
  /** Reads and enables pagination through a set of `Image`. */
  images?: Maybe<ImagesConnection>;
  isUsernameTaken?: Maybe<Scalars['Boolean']>;
  licensor?: Maybe<Licensor>;
  licensorByLicensor?: Maybe<Licensor>;
  /** Reads a single `Licensor` using its globally unique `ID`. */
  licensorByNodeId?: Maybe<Licensor>;
  /** Reads and enables pagination through a set of `Licensor`. */
  licensors?: Maybe<LicensorsConnection>;
  me?: Maybe<MeType>;
  /** Reads and enables pagination through a set of `MediaFormat`. */
  mediaFormats?: Maybe<MediaFormatsConnection>;
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID'];
  /** Reads and enables pagination through a set of `Person`. */
  people?: Maybe<PeopleConnection>;
  person?: Maybe<Person>;
  personByMalId?: Maybe<Person>;
  /** Reads a single `Person` using its globally unique `ID`. */
  personByNodeId?: Maybe<Person>;
  personImage?: Maybe<PersonImage>;
  /** Reads a single `PersonImage` using its globally unique `ID`. */
  personImageByNodeId?: Maybe<PersonImage>;
  /** Reads and enables pagination through a set of `PersonImage`. */
  personImages?: Maybe<PersonImagesConnection>;
  producer?: Maybe<Producer>;
  /** Reads a single `Producer` using its globally unique `ID`. */
  producerByNodeId?: Maybe<Producer>;
  producerByProducer?: Maybe<Producer>;
  /** Reads and enables pagination through a set of `Producer`. */
  producers?: Maybe<ProducersConnection>;
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  /** Reads and enables pagination through a set of `SearchResult`. */
  searchAnimes?: Maybe<SearchResultsConnection>;
  /** Reads and enables pagination through a set of `SourceMaterial`. */
  sourceMaterials?: Maybe<SourceMaterialsConnection>;
  staffRole?: Maybe<StaffRole>;
  /** Reads a single `StaffRole` using its globally unique `ID`. */
  staffRoleByNodeId?: Maybe<StaffRole>;
  staffRoleByRole?: Maybe<StaffRole>;
  /** Reads and enables pagination through a set of `StaffRole`. */
  staffRoles?: Maybe<StaffRolesConnection>;
  studio?: Maybe<Studio>;
  /** Reads a single `Studio` using its globally unique `ID`. */
  studioByNodeId?: Maybe<Studio>;
  studioByStudio?: Maybe<Studio>;
  /** Reads and enables pagination through a set of `Studio`. */
  studios?: Maybe<StudiosConnection>;
  user?: Maybe<User>;
  userAnime?: Maybe<UserAnime>;
  /** Reads a single `UserAnime` using its globally unique `ID`. */
  userAnimeByNodeId?: Maybe<UserAnime>;
  userAnimeListByAnimeListIdAndAnimeId?: Maybe<UserAnimeList>;
  /** Reads and enables pagination through a set of `UserAnimeList`. */
  userAnimeLists?: Maybe<UserAnimeListsConnection>;
  /** Reads and enables pagination through a set of `UserAnime`. */
  userAnimes?: Maybe<UserAnimeConnection>;
  /** Reads a single `User` using its globally unique `ID`. */
  userByNodeId?: Maybe<User>;
  /** Reads and enables pagination through a set of `CustomAnimeList`. */
  userCustomAnimeList?: Maybe<CustomAnimeListsConnection>;
  /** Reads and enables pagination through a set of `UserCustomAnimeListByStatusType`. */
  userCustomAnimeListByStatus?: Maybe<UserCustomAnimeListByStatusTypesConnection>;
  userNotification?: Maybe<UserNotification>;
  /** Reads a single `UserNotification` using its globally unique `ID`. */
  userNotificationByNodeId?: Maybe<UserNotification>;
  /** Reads and enables pagination through a set of `UserNotification`. */
  userNotifications?: Maybe<UserNotificationsConnection>;
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** Reads a single `UserWatchStatus` using its globally unique `ID`. */
  userWatchStatusByNodeId?: Maybe<UserWatchStatus>;
  /** Reads and enables pagination through a set of `UserWatchStatus`. */
  userWatchStatuses?: Maybe<UserWatchStatusesConnection>;
  /** Reads and enables pagination through a set of `User`. */
  users?: Maybe<UsersConnection>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAgeRatingsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AgeRatingCondition>;
  filter?: InputMaybe<AgeRatingFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AgeRatingsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAiringStatusesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AiringStatusCondition>;
  filter?: InputMaybe<AiringStatusFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AiringStatusesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAllUserAnimesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<UserAnimeListTypeFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAlternateAnimeNameArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAlternateAnimeNameByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAlternateAnimeNamesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AlternateAnimeNameCondition>;
  filter?: InputMaybe<AlternateAnimeNameFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AlternateAnimeNamesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeByMalIdArgs = {
  malId: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeCharacterArgs = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  characterRoleId: Scalars['UUID'];
  language: LanguageType;
  personId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeCharacterByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeCharactersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeCharacterCondition>;
  filter?: InputMaybe<AnimeCharacterFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeGenreArgs = {
  animeId: Scalars['UUID'];
  genreId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeGenreByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeGenresArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeGenreCondition>;
  filter?: InputMaybe<AnimeGenreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeGenresOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeImageArgs = {
  animeId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeImageCondition>;
  filter?: InputMaybe<AnimeImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeLicensorArgs = {
  animeId: Scalars['UUID'];
  licensorId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeLicensorByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeLicensorsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeLicensorCondition>;
  filter?: InputMaybe<AnimeLicensorFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeLicensorsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeListArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeListByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeListsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeListCondition>;
  filter?: InputMaybe<AnimeListFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeProducerArgs = {
  animeId: Scalars['UUID'];
  producerId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeProducerByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeProducersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeProducerCondition>;
  filter?: InputMaybe<AnimeProducerFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeProducersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStaffArgs = {
  animeId: Scalars['UUID'];
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStaffByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStaffsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStaffCondition>;
  filter?: InputMaybe<AnimeStaffFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStreamingOnArgs = {
  animeId: Scalars['UUID'];
  streamServiceId: StreamingServices;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStreamingOnByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStreamingOnsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStreamingOnCondition>;
  filter?: InputMaybe<AnimeStreamingOnFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStreamingOnsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStudioArgs = {
  animeId: Scalars['UUID'];
  studioId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStudioByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeStudiosArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStudioCondition>;
  filter?: InputMaybe<AnimeStudioFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStudiosOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeUserScoreArgs = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeUserScoreByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimeUserScoresArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeUserScoreCondition>;
  filter?: InputMaybe<AnimeUserScoreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAnimesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeCondition>;
  filter?: InputMaybe<AnimeFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAvailableLanguagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AvailableLanguageCondition>;
  filter?: InputMaybe<AvailableLanguageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AvailableLanguagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterByMalIdArgs = {
  malId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterImageArgs = {
  characterId: Scalars['UUID'];
  imageId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<CharacterImageCondition>;
  filter?: InputMaybe<CharacterImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<CharacterImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRoleArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRoleByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRoleByRoleArgs = {
  role: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCharacterRolesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<CharacterRoleCondition>;
  filter?: InputMaybe<CharacterRoleFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<CharacterRolesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCharactersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<CharacterCondition>;
  filter?: InputMaybe<CharacterFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<CharactersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGenreArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGenreByGenreArgs = {
  genre: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGenreByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGenresArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<GenreCondition>;
  filter?: InputMaybe<GenreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<GenresOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetUserAnimeListsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<UserListFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  watchStatusInput?: InputMaybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryImageArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<ImageCondition>;
  filter?: InputMaybe<ImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<ImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIsUsernameTakenArgs = {
  usernameInput?: InputMaybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorByLicensorArgs = {
  licensor: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryLicensorsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<LicensorCondition>;
  filter?: InputMaybe<LicensorFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<LicensorsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaFormatsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<MediaFormatCondition>;
  filter?: InputMaybe<MediaFormatFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<MediaFormatsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPeopleArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<PersonCondition>;
  filter?: InputMaybe<PersonFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PeopleOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonByMalIdArgs = {
  malId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonImageArgs = {
  imageId: Scalars['UUID'];
  personId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonImageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonImagesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<PersonImageCondition>;
  filter?: InputMaybe<PersonImageFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<PersonImagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryProducerArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProducerByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProducerByProducerArgs = {
  producer: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProducersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<ProducerCondition>;
  filter?: InputMaybe<ProducerFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<ProducersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySearchAnimesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<SearchResultFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  searchInput?: InputMaybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySourceMaterialsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<SourceMaterialCondition>;
  filter?: InputMaybe<SourceMaterialFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<SourceMaterialsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRoleArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRoleByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRoleByRoleArgs = {
  role: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStaffRolesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<StaffRoleCondition>;
  filter?: InputMaybe<StaffRoleFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<StaffRolesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStudioArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStudioByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStudioByStudioArgs = {
  studio: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStudiosArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<StudioCondition>;
  filter?: InputMaybe<StudioFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<StudiosOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserArgs = {
  id: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeArgs = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeListByAnimeListIdAndAnimeIdArgs = {
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimeListsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserAnimeListCondition>;
  filter?: InputMaybe<UserAnimeListFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAnimesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserAnimeCondition>;
  filter?: InputMaybe<UserAnimeFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserAnimeOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserCustomAnimeListArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<CustomAnimeListFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  listId?: InputMaybe<Scalars['UUID']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserCustomAnimeListByStatusArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  filter?: InputMaybe<UserCustomAnimeListByStatusTypeFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  watchStatusType?: InputMaybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserNotificationArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserNotificationByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserNotificationCondition>;
  filter?: InputMaybe<UserNotificationFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserNotificationsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserWatchStatusArgs = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserWatchStatusByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserWatchStatusesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserWatchStatusCondition>;
  filter?: InputMaybe<UserWatchStatusFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserWatchStatusesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserCondition>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};

/** All input for the `registerUser` mutation. */
export type RegisterUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  userId: Scalars['String'];
  username: Scalars['String'];
};

/** The output of our `registerUser` mutation. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our `registerUser` mutation. */
export type RegisterUserPayloadUserEdgeArgs = {
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};

export type SearchResult = {
  __typename?: 'SearchResult';
  ageRatingType?: Maybe<Scalars['String']>;
  airingStatusType?: Maybe<Scalars['String']>;
  altName?: Maybe<Scalars['String']>;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  coverImage?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  endBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  genres?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['UUID']>;
  malId?: Maybe<Scalars['Int']>;
  mediaType?: Maybe<Scalars['String']>;
  numberOfEpisodes?: Maybe<Scalars['Int']>;
  producers?: Maybe<Array<Maybe<Scalars['String']>>>;
  season?: Maybe<Scalars['String']>;
  seasonYear?: Maybe<Scalars['Int']>;
  sourceMaterialType?: Maybe<Scalars['String']>;
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  streamingOn?: Maybe<Scalars['String']>;
  studios?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  userEpisodeCount?: Maybe<Scalars['Int']>;
  userLiked?: Maybe<Scalars['Boolean']>;
  userRating?: Maybe<Scalars['BigFloat']>;
  userWatchStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SearchResult` object types. All fields are combined with a logical ‘and.’ */
export type SearchResultFilter = {
  /** Filter by the object’s `ageRatingType` field. */
  ageRatingType?: InputMaybe<StringFilter>;
  /** Filter by the object’s `airingStatusType` field. */
  airingStatusType?: InputMaybe<StringFilter>;
  /** Filter by the object’s `altName` field. */
  altName?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<SearchResultFilter>>;
  /** Filter by the object’s `averageWatcherRating` field. */
  averageWatcherRating?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `coverImage` field. */
  coverImage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `duration` field. */
  duration?: InputMaybe<IntFilter>;
  /** Filter by the object’s `endBroadcastDatetime` field. */
  endBroadcastDatetime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `genres` field. */
  genres?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `malId` field. */
  malId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<SearchResultFilter>;
  /** Filter by the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: InputMaybe<IntFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<SearchResultFilter>>;
  /** Filter by the object’s `producers` field. */
  producers?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `season` field. */
  season?: InputMaybe<StringFilter>;
  /** Filter by the object’s `seasonYear` field. */
  seasonYear?: InputMaybe<IntFilter>;
  /** Filter by the object’s `sourceMaterialType` field. */
  sourceMaterialType?: InputMaybe<StringFilter>;
  /** Filter by the object’s `startBroadcastDatetime` field. */
  startBroadcastDatetime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `streamingOn` field. */
  streamingOn?: InputMaybe<StringFilter>;
  /** Filter by the object’s `studios` field. */
  studios?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userEpisodeCount` field. */
  userEpisodeCount?: InputMaybe<IntFilter>;
  /** Filter by the object’s `userLiked` field. */
  userLiked?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `userRating` field. */
  userRating?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `userWatchStatus` field. */
  userWatchStatus?: InputMaybe<StringFilter>;
};

/** A connection to a list of `SearchResult` values. */
export type SearchResultsConnection = {
  __typename?: 'SearchResultsConnection';
  /** A list of edges which contains the `SearchResult` and cursor to aid in pagination. */
  edges: Array<SearchResultsEdge>;
  /** A list of `SearchResult` objects. */
  nodes: Array<SearchResult>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SearchResult` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SearchResult` edge in the connection. */
export type SearchResultsEdge = {
  __typename?: 'SearchResultsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SearchResult` at the end of the edge. */
  node: SearchResult;
};

export enum Season {
  Fall = 'FALL',
  Spring = 'SPRING',
  Summer = 'SUMMER',
  Unknown = 'UNKNOWN',
  Winter = 'WINTER'
}

/** A filter to be used against Season fields. All fields are combined with a logical ‘and.’ */
export type SeasonFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Season>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Season>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Season>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Season>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Season>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Season>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Season>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Season>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Season>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Season>>;
};

export type SourceMaterial = {
  __typename?: 'SourceMaterial';
  id?: Maybe<Scalars['BigInt']>;
  sourceMaterialType?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SourceMaterial` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type SourceMaterialCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `sourceMaterialType` field. */
  sourceMaterialType?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `SourceMaterial` object types. All fields are combined with a logical ‘and.’ */
export type SourceMaterialFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<SourceMaterialFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<BigIntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<SourceMaterialFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<SourceMaterialFilter>>;
  /** Filter by the object’s `sourceMaterialType` field. */
  sourceMaterialType?: InputMaybe<StringFilter>;
};

export enum SourceMaterialTypes {
  LightNovel = 'LIGHT_NOVEL',
  Manga = 'MANGA',
  Novel = 'NOVEL',
  Original = 'ORIGINAL',
  VisualNovel = 'VISUAL_NOVEL',
  WebManga = 'WEB_MANGA'
}

/** A filter to be used against SourceMaterialTypes fields. All fields are combined with a logical ‘and.’ */
export type SourceMaterialTypesFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<SourceMaterialTypes>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<SourceMaterialTypes>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<SourceMaterialTypes>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<SourceMaterialTypes>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<SourceMaterialTypes>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<SourceMaterialTypes>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<SourceMaterialTypes>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<SourceMaterialTypes>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<SourceMaterialTypes>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<SourceMaterialTypes>>;
};

/** A connection to a list of `SourceMaterial` values. */
export type SourceMaterialsConnection = {
  __typename?: 'SourceMaterialsConnection';
  /** A list of edges which contains the `SourceMaterial` and cursor to aid in pagination. */
  edges: Array<SourceMaterialsEdge>;
  /** A list of `SourceMaterial` objects. */
  nodes: Array<SourceMaterial>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SourceMaterial` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SourceMaterial` edge in the connection. */
export type SourceMaterialsEdge = {
  __typename?: 'SourceMaterialsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SourceMaterial` at the end of the edge. */
  node: SourceMaterial;
};

/** Methods to use when ordering `SourceMaterial`. */
export enum SourceMaterialsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  SourceMaterialTypeAsc = 'SOURCE_MATERIAL_TYPE_ASC',
  SourceMaterialTypeDesc = 'SOURCE_MATERIAL_TYPE_DESC'
}

export type StaffResult = {
  __typename?: 'StaffResult';
  actorFirstName?: Maybe<Scalars['String']>;
  actorImage?: Maybe<Scalars['String']>;
  actorLastName?: Maybe<Scalars['String']>;
  animeId?: Maybe<Scalars['String']>;
  characterId?: Maybe<Scalars['String']>;
  characterImage?: Maybe<Scalars['String']>;
  characterName?: Maybe<Scalars['String']>;
  characterRole?: Maybe<Scalars['String']>;
  language?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
};

/** A filter to be used against `StaffResult` object types. All fields are combined with a logical ‘and.’ */
export type StaffResultFilter = {
  /** Filter by the object’s `actorFirstName` field. */
  actorFirstName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `actorImage` field. */
  actorImage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `actorLastName` field. */
  actorLastName?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<StaffResultFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `characterId` field. */
  characterId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `characterImage` field. */
  characterImage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `characterName` field. */
  characterName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `characterRole` field. */
  characterRole?: InputMaybe<StringFilter>;
  /** Filter by the object’s `language` field. */
  language?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<StaffResultFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<StaffResultFilter>>;
  /** Filter by the object’s `personId` field. */
  personId?: InputMaybe<StringFilter>;
};

/** A connection to a list of `StaffResult` values. */
export type StaffResultsConnection = {
  __typename?: 'StaffResultsConnection';
  /** A list of edges which contains the `StaffResult` and cursor to aid in pagination. */
  edges: Array<StaffResultsEdge>;
  /** A list of `StaffResult` objects. */
  nodes: Array<StaffResult>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StaffResult` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `StaffResult` edge in the connection. */
export type StaffResultsEdge = {
  __typename?: 'StaffResultsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `StaffResult` at the end of the edge. */
  node: StaffResult;
};

export type StaffRole = Node & {
  __typename?: 'StaffRole';
  /** Reads and enables pagination through a set of `AnimeStaff`. */
  animeStaffs: AnimeStaffConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  role: Scalars['String'];
};


export type StaffRoleAnimeStaffsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStaffCondition>;
  filter?: InputMaybe<AnimeStaffFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};

/**
 * A condition to be used against `StaffRole` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type StaffRoleCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `role` field. */
  role?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `StaffRole` object types. All fields are combined with a logical ‘and.’ */
export type StaffRoleFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<StaffRoleFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<StaffRoleFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<StaffRoleFilter>>;
  /** Filter by the object’s `role` field. */
  role?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `StaffRole` */
export type StaffRoleInput = {
  id?: InputMaybe<Scalars['UUID']>;
  role: Scalars['String'];
};

/** Represents an update to a `StaffRole`. Fields that are set will be updated. */
export type StaffRolePatch = {
  id?: InputMaybe<Scalars['UUID']>;
  role?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `StaffRole` values. */
export type StaffRolesConnection = {
  __typename?: 'StaffRolesConnection';
  /** A list of edges which contains the `StaffRole` and cursor to aid in pagination. */
  edges: Array<StaffRolesEdge>;
  /** A list of `StaffRole` objects. */
  nodes: Array<StaffRole>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StaffRole` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `StaffRole` edge in the connection. */
export type StaffRolesEdge = {
  __typename?: 'StaffRolesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `StaffRole` at the end of the edge. */
  node: StaffRole;
};

/** Methods to use when ordering `StaffRole`. */
export enum StaffRolesOrderBy {
  AnimeStaffByStaffRoleIdCountAsc = 'ANIME_STAFF_BY_STAFF_ROLE_ID__COUNT_ASC',
  AnimeStaffByStaffRoleIdCountDesc = 'ANIME_STAFF_BY_STAFF_ROLE_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RoleAsc = 'ROLE_ASC',
  RoleDesc = 'ROLE_DESC'
}

export enum StreamingServices {
  Crunchyroll = 'CRUNCHYROLL'
}

/** A filter to be used against StreamingServices fields. All fields are combined with a logical ‘and.’ */
export type StreamingServicesFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<StreamingServices>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<StreamingServices>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<StreamingServices>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<StreamingServices>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<StreamingServices>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<StreamingServices>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<StreamingServices>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<StreamingServices>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<StreamingServices>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<StreamingServices>>;
};

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['String']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: InputMaybe<Scalars['String']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: InputMaybe<Scalars['String']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: InputMaybe<Scalars['String']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['String']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: InputMaybe<Scalars['String']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['String']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: InputMaybe<Scalars['String']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['String']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: InputMaybe<Scalars['String']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['String']>>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: InputMaybe<Array<Scalars['String']>>;
  /** Contains the specified string (case-sensitive). */
  includes?: InputMaybe<Scalars['String']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: InputMaybe<Scalars['String']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['String']>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: InputMaybe<Scalars['String']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['String']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: InputMaybe<Scalars['String']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: InputMaybe<Scalars['String']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: InputMaybe<Scalars['String']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['String']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: InputMaybe<Scalars['String']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: InputMaybe<Scalars['String']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: InputMaybe<Scalars['String']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['String']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: InputMaybe<Scalars['String']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['String']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: InputMaybe<Array<Scalars['String']>>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: InputMaybe<Scalars['String']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: InputMaybe<Scalars['String']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: InputMaybe<Scalars['String']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: InputMaybe<Scalars['String']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: InputMaybe<Scalars['String']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: InputMaybe<Scalars['String']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: InputMaybe<Scalars['String']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against String List fields. All fields are combined with a logical ‘and.’ */
export type StringListFilter = {
  /** Any array item is equal to the specified value. */
  anyEqualTo?: InputMaybe<Scalars['String']>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: InputMaybe<Scalars['String']>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: InputMaybe<Scalars['String']>;
  /** Any array item is less than the specified value. */
  anyLessThan?: InputMaybe<Scalars['String']>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: InputMaybe<Scalars['String']>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: InputMaybe<Scalars['String']>;
  /** Contained by the specified list of values. */
  containedBy?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Contains the specified list of values. */
  contains?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Overlaps the specified list of values. */
  overlaps?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Studio = Node & {
  __typename?: 'Studio';
  /** Reads and enables pagination through a set of `AnimeStudio`. */
  animeStudios: AnimeStudiosConnection;
  id: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  studio: Scalars['String'];
};


export type StudioAnimeStudiosArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeStudioCondition>;
  filter?: InputMaybe<AnimeStudioFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeStudiosOrderBy>>;
};

/** A condition to be used against `Studio` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type StudioCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `studio` field. */
  studio?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `Studio` object types. All fields are combined with a logical ‘and.’ */
export type StudioFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<StudioFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<StudioFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<StudioFilter>>;
  /** Filter by the object’s `studio` field. */
  studio?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `Studio` */
export type StudioInput = {
  id?: InputMaybe<Scalars['UUID']>;
  studio: Scalars['String'];
};

/** Represents an update to a `Studio`. Fields that are set will be updated. */
export type StudioPatch = {
  id?: InputMaybe<Scalars['UUID']>;
  studio?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `Studio` values. */
export type StudiosConnection = {
  __typename?: 'StudiosConnection';
  /** A list of edges which contains the `Studio` and cursor to aid in pagination. */
  edges: Array<StudiosEdge>;
  /** A list of `Studio` objects. */
  nodes: Array<Studio>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Studio` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Studio` edge in the connection. */
export type StudiosEdge = {
  __typename?: 'StudiosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Studio` at the end of the edge. */
  node: Studio;
};

/** Methods to use when ordering `Studio`. */
export enum StudiosOrderBy {
  AnimeStudiosByStudioIdCountAsc = 'ANIME_STUDIOS_BY_STUDIO_ID__COUNT_ASC',
  AnimeStudiosByStudioIdCountDesc = 'ANIME_STUDIOS_BY_STUDIO_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StudioAsc = 'STUDIO_ASC',
  StudioDesc = 'STUDIO_DESC'
}

/** The root subscription type: contains realtime events you can subscribe to with the `subscription` operation. */
export type Subscription = {
  __typename?: 'Subscription';
  notificationEvent?: Maybe<NotificationEvent>;
};

/** A filter to be used against UUID fields. All fields are combined with a logical ‘and.’ */
export type UuidFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['UUID']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['UUID']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['UUID']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['UUID']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['UUID']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['UUID']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['UUID']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['UUID']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['UUID']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['UUID']>>;
};

/** All input for the `updateAlternateAnimeNameByNodeId` mutation. */
export type UpdateAlternateAnimeNameByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AlternateAnimeName` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AlternateAnimeName` being updated. */
  patch: AlternateAnimeNamePatch;
};

/** All input for the `updateAlternateAnimeName` mutation. */
export type UpdateAlternateAnimeNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AlternateAnimeName` being updated. */
  patch: AlternateAnimeNamePatch;
};

/** The output of our update `AlternateAnimeName` mutation. */
export type UpdateAlternateAnimeNamePayload = {
  __typename?: 'UpdateAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was updated by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AlternateAnimeName` mutation. */
export type UpdateAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: InputMaybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** All input for the `updateAnimeByMalId` mutation. */
export type UpdateAnimeByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  malId: Scalars['Int'];
  /** An object where the defined keys will be set on the `Anime` being updated. */
  patch: AnimePatch;
};

/** All input for the `updateAnimeByNodeId` mutation. */
export type UpdateAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Anime` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Anime` being updated. */
  patch: AnimePatch;
};

/** All input for the `updateAnimeCharacterByNodeId` mutation. */
export type UpdateAnimeCharacterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeCharacter` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeCharacter` being updated. */
  patch: AnimeCharacterPatch;
};

/** All input for the `updateAnimeCharacter` mutation. */
export type UpdateAnimeCharacterInput = {
  animeId: Scalars['UUID'];
  characterId: Scalars['UUID'];
  characterRoleId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  language: LanguageType;
  /** An object where the defined keys will be set on the `AnimeCharacter` being updated. */
  patch: AnimeCharacterPatch;
  personId: Scalars['UUID'];
};

/** The output of our update `AnimeCharacter` mutation. */
export type UpdateAnimeCharacterPayload = {
  __typename?: 'UpdateAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was updated by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeCharacter` mutation. */
export type UpdateAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};

/** All input for the `updateAnimeGenreByNodeId` mutation. */
export type UpdateAnimeGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeGenre` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeGenre` being updated. */
  patch: AnimeGenrePatch;
};

/** All input for the `updateAnimeGenre` mutation. */
export type UpdateAnimeGenreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  genreId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeGenre` being updated. */
  patch: AnimeGenrePatch;
};

/** The output of our update `AnimeGenre` mutation. */
export type UpdateAnimeGenrePayload = {
  __typename?: 'UpdateAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was updated by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeGenre` mutation. */
export type UpdateAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeGenresOrderBy>>;
};

/** All input for the `updateAnimeImageByNodeId` mutation. */
export type UpdateAnimeImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeImage` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeImage` being updated. */
  patch: AnimeImagePatch;
};

/** All input for the `updateAnimeImage` mutation. */
export type UpdateAnimeImageInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeImage` being updated. */
  patch: AnimeImagePatch;
};

/** The output of our update `AnimeImage` mutation. */
export type UpdateAnimeImagePayload = {
  __typename?: 'UpdateAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was updated by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeImage` mutation. */
export type UpdateAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeImagesOrderBy>>;
};

/** All input for the `updateAnime` mutation. */
export type UpdateAnimeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Anime` being updated. */
  patch: AnimePatch;
};

/** All input for the `updateAnimeLicensorByNodeId` mutation. */
export type UpdateAnimeLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeLicensor` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeLicensor` being updated. */
  patch: AnimeLicensorPatch;
};

/** All input for the `updateAnimeLicensor` mutation. */
export type UpdateAnimeLicensorInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  licensorId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeLicensor` being updated. */
  patch: AnimeLicensorPatch;
};

/** The output of our update `AnimeLicensor` mutation. */
export type UpdateAnimeLicensorPayload = {
  __typename?: 'UpdateAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was updated by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeLicensor` mutation. */
export type UpdateAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeLicensorsOrderBy>>;
};

/** All input for the `updateAnimeListByNodeId` mutation. */
export type UpdateAnimeListByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeList` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeList` being updated. */
  patch: AnimeListPatch;
};

/** All input for the `updateAnimeList` mutation. */
export type UpdateAnimeListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `AnimeList` being updated. */
  patch: AnimeListPatch;
};

/** The output of our update `AnimeList` mutation. */
export type UpdateAnimeListPayload = {
  __typename?: 'UpdateAnimeListPayload';
  /** The `AnimeList` that was updated by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our update `AnimeList` mutation. */
export type UpdateAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};

/** The output of our update `Anime` mutation. */
export type UpdateAnimePayload = {
  __typename?: 'UpdateAnimePayload';
  /** The `Anime` that was updated by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Anime` mutation. */
export type UpdateAnimePayloadAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeOrderBy>>;
};

/** All input for the `updateAnimeProducerByNodeId` mutation. */
export type UpdateAnimeProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeProducer` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeProducer` being updated. */
  patch: AnimeProducerPatch;
};

/** All input for the `updateAnimeProducer` mutation. */
export type UpdateAnimeProducerInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeProducer` being updated. */
  patch: AnimeProducerPatch;
  producerId: Scalars['UUID'];
};

/** The output of our update `AnimeProducer` mutation. */
export type UpdateAnimeProducerPayload = {
  __typename?: 'UpdateAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was updated by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeProducer` mutation. */
export type UpdateAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeProducersOrderBy>>;
};

/** All input for the `updateAnimeStaffByNodeId` mutation. */
export type UpdateAnimeStaffByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStaff` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeStaff` being updated. */
  patch: AnimeStaffPatch;
};

/** All input for the `updateAnimeStaff` mutation. */
export type UpdateAnimeStaffInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeStaff` being updated. */
  patch: AnimeStaffPatch;
  personId: Scalars['UUID'];
  staffRoleId: Scalars['UUID'];
};

/** The output of our update `AnimeStaff` mutation. */
export type UpdateAnimeStaffPayload = {
  __typename?: 'UpdateAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was updated by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our update `AnimeStaff` mutation. */
export type UpdateAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};

/** All input for the `updateAnimeStreamingOnByNodeId` mutation. */
export type UpdateAnimeStreamingOnByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStreamingOn` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeStreamingOn` being updated. */
  patch: AnimeStreamingOnPatch;
};

/** All input for the `updateAnimeStreamingOn` mutation. */
export type UpdateAnimeStreamingOnInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeStreamingOn` being updated. */
  patch: AnimeStreamingOnPatch;
  streamServiceId: StreamingServices;
};

/** The output of our update `AnimeStreamingOn` mutation. */
export type UpdateAnimeStreamingOnPayload = {
  __typename?: 'UpdateAnimeStreamingOnPayload';
  /** Reads a single `Anime` that is related to this `AnimeStreamingOn`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStreamingOn` that was updated by this mutation. */
  animeStreamingOn?: Maybe<AnimeStreamingOn>;
  /** An edge for our `AnimeStreamingOn`. May be used by Relay 1. */
  animeStreamingOnEdge?: Maybe<AnimeStreamingOnsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `AnimeStreamingOn` mutation. */
export type UpdateAnimeStreamingOnPayloadAnimeStreamingOnEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStreamingOnsOrderBy>>;
};

/** All input for the `updateAnimeStudioByNodeId` mutation. */
export type UpdateAnimeStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeStudio` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeStudio` being updated. */
  patch: AnimeStudioPatch;
};

/** All input for the `updateAnimeStudio` mutation. */
export type UpdateAnimeStudioInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeStudio` being updated. */
  patch: AnimeStudioPatch;
  studioId: Scalars['UUID'];
};

/** The output of our update `AnimeStudio` mutation. */
export type UpdateAnimeStudioPayload = {
  __typename?: 'UpdateAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was updated by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our update `AnimeStudio` mutation. */
export type UpdateAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStudiosOrderBy>>;
};

/** All input for the `updateAnimeUserScoreByNodeId` mutation. */
export type UpdateAnimeUserScoreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `AnimeUserScore` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `AnimeUserScore` being updated. */
  patch: AnimeUserScorePatch;
};

/** All input for the `updateAnimeUserScore` mutation. */
export type UpdateAnimeUserScoreInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `AnimeUserScore` being updated. */
  patch: AnimeUserScorePatch;
  userId: Scalars['String'];
};

/** The output of our update `AnimeUserScore` mutation. */
export type UpdateAnimeUserScorePayload = {
  __typename?: 'UpdateAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was updated by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our update `AnimeUserScore` mutation. */
export type UpdateAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};

/** All input for the `updateCharacterByMalId` mutation. */
export type UpdateCharacterByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  malId: Scalars['String'];
  /** An object where the defined keys will be set on the `Character` being updated. */
  patch: CharacterPatch;
};

/** All input for the `updateCharacterByNodeId` mutation. */
export type UpdateCharacterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Character` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Character` being updated. */
  patch: CharacterPatch;
};

/** All input for the `updateCharacterImageByNodeId` mutation. */
export type UpdateCharacterImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterImage` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `CharacterImage` being updated. */
  patch: CharacterImagePatch;
};

/** All input for the `updateCharacterImage` mutation. */
export type UpdateCharacterImageInput = {
  characterId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `CharacterImage` being updated. */
  patch: CharacterImagePatch;
};

/** The output of our update `CharacterImage` mutation. */
export type UpdateCharacterImagePayload = {
  __typename?: 'UpdateCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was updated by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `CharacterImage` mutation. */
export type UpdateCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterImagesOrderBy>>;
};

/** All input for the `updateCharacter` mutation. */
export type UpdateCharacterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Character` being updated. */
  patch: CharacterPatch;
};

/** The output of our update `Character` mutation. */
export type UpdateCharacterPayload = {
  __typename?: 'UpdateCharacterPayload';
  /** The `Character` that was updated by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Character` mutation. */
export type UpdateCharacterPayloadCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<CharactersOrderBy>>;
};

/** All input for the `updateCharacterRoleByNodeId` mutation. */
export type UpdateCharacterRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `CharacterRole` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `CharacterRole` being updated. */
  patch: CharacterRolePatch;
};

/** All input for the `updateCharacterRoleByRole` mutation. */
export type UpdateCharacterRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `CharacterRole` being updated. */
  patch: CharacterRolePatch;
  role: Scalars['String'];
};

/** All input for the `updateCharacterRole` mutation. */
export type UpdateCharacterRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `CharacterRole` being updated. */
  patch: CharacterRolePatch;
};

/** The output of our update `CharacterRole` mutation. */
export type UpdateCharacterRolePayload = {
  __typename?: 'UpdateCharacterRolePayload';
  /** The `CharacterRole` that was updated by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `CharacterRole` mutation. */
export type UpdateCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterRolesOrderBy>>;
};

/** All input for the `updateGenreByGenre` mutation. */
export type UpdateGenreByGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  genre: Scalars['String'];
  /** An object where the defined keys will be set on the `Genre` being updated. */
  patch: GenrePatch;
};

/** All input for the `updateGenreByNodeId` mutation. */
export type UpdateGenreByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Genre` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Genre` being updated. */
  patch: GenrePatch;
};

/** All input for the `updateGenre` mutation. */
export type UpdateGenreInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Genre` being updated. */
  patch: GenrePatch;
};

/** The output of our update `Genre` mutation. */
export type UpdateGenrePayload = {
  __typename?: 'UpdateGenrePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` that was updated by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Genre` mutation. */
export type UpdateGenrePayloadGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<GenresOrderBy>>;
};

/** All input for the `updateImageByNodeId` mutation. */
export type UpdateImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Image` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Image` being updated. */
  patch: ImagePatch;
};

/** All input for the `updateImage` mutation. */
export type UpdateImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Image` being updated. */
  patch: ImagePatch;
};

/** The output of our update `Image` mutation. */
export type UpdateImagePayload = {
  __typename?: 'UpdateImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` that was updated by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Image` mutation. */
export type UpdateImagePayloadImageEdgeArgs = {
  orderBy?: InputMaybe<Array<ImagesOrderBy>>;
};

/** All input for the `updateLicensorByLicensor` mutation. */
export type UpdateLicensorByLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  licensor: Scalars['String'];
  /** An object where the defined keys will be set on the `Licensor` being updated. */
  patch: LicensorPatch;
};

/** All input for the `updateLicensorByNodeId` mutation. */
export type UpdateLicensorByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Licensor` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Licensor` being updated. */
  patch: LicensorPatch;
};

/** All input for the `updateLicensor` mutation. */
export type UpdateLicensorInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Licensor` being updated. */
  patch: LicensorPatch;
};

/** The output of our update `Licensor` mutation. */
export type UpdateLicensorPayload = {
  __typename?: 'UpdateLicensorPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` that was updated by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Licensor` mutation. */
export type UpdateLicensorPayloadLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<LicensorsOrderBy>>;
};

/** All input for the `updatePersonByMalId` mutation. */
export type UpdatePersonByMalIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  malId: Scalars['String'];
  /** An object where the defined keys will be set on the `Person` being updated. */
  patch: PersonPatch;
};

/** All input for the `updatePersonByNodeId` mutation. */
export type UpdatePersonByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Person` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Person` being updated. */
  patch: PersonPatch;
};

/** All input for the `updatePersonImageByNodeId` mutation. */
export type UpdatePersonImageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PersonImage` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `PersonImage` being updated. */
  patch: PersonImagePatch;
};

/** All input for the `updatePersonImage` mutation. */
export type UpdatePersonImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  imageId: Scalars['UUID'];
  /** An object where the defined keys will be set on the `PersonImage` being updated. */
  patch: PersonImagePatch;
  personId: Scalars['UUID'];
};

/** The output of our update `PersonImage` mutation. */
export type UpdatePersonImagePayload = {
  __typename?: 'UpdatePersonImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was updated by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `PersonImage` mutation. */
export type UpdatePersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: InputMaybe<Array<PersonImagesOrderBy>>;
};

/** All input for the `updatePerson` mutation. */
export type UpdatePersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Person` being updated. */
  patch: PersonPatch;
};

/** The output of our update `Person` mutation. */
export type UpdatePersonPayload = {
  __typename?: 'UpdatePersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` that was updated by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Person` mutation. */
export type UpdatePersonPayloadPersonEdgeArgs = {
  orderBy?: InputMaybe<Array<PeopleOrderBy>>;
};

/** All input for the `updateProducerByNodeId` mutation. */
export type UpdateProducerByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Producer` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Producer` being updated. */
  patch: ProducerPatch;
};

/** All input for the `updateProducerByProducer` mutation. */
export type UpdateProducerByProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Producer` being updated. */
  patch: ProducerPatch;
  producer: Scalars['String'];
};

/** All input for the `updateProducer` mutation. */
export type UpdateProducerInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Producer` being updated. */
  patch: ProducerPatch;
};

/** The output of our update `Producer` mutation. */
export type UpdateProducerPayload = {
  __typename?: 'UpdateProducerPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` that was updated by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Producer` mutation. */
export type UpdateProducerPayloadProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<ProducersOrderBy>>;
};

/** All input for the `updateStaffRoleByNodeId` mutation. */
export type UpdateStaffRoleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `StaffRole` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `StaffRole` being updated. */
  patch: StaffRolePatch;
};

/** All input for the `updateStaffRoleByRole` mutation. */
export type UpdateStaffRoleByRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `StaffRole` being updated. */
  patch: StaffRolePatch;
  role: Scalars['String'];
};

/** All input for the `updateStaffRole` mutation. */
export type UpdateStaffRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `StaffRole` being updated. */
  patch: StaffRolePatch;
};

/** The output of our update `StaffRole` mutation. */
export type UpdateStaffRolePayload = {
  __typename?: 'UpdateStaffRolePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was updated by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our update `StaffRole` mutation. */
export type UpdateStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<StaffRolesOrderBy>>;
};

/** All input for the `updateStudioByNodeId` mutation. */
export type UpdateStudioByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Studio` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Studio` being updated. */
  patch: StudioPatch;
};

/** All input for the `updateStudioByStudio` mutation. */
export type UpdateStudioByStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Studio` being updated. */
  patch: StudioPatch;
  studio: Scalars['String'];
};

/** All input for the `updateStudio` mutation. */
export type UpdateStudioInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `Studio` being updated. */
  patch: StudioPatch;
};

/** The output of our update `Studio` mutation. */
export type UpdateStudioPayload = {
  __typename?: 'UpdateStudioPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was updated by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our update `Studio` mutation. */
export type UpdateStudioPayloadStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<StudiosOrderBy>>;
};

/** All input for the `updateUserAnimeByNodeId` mutation. */
export type UpdateUserAnimeByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserAnime` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserAnime` being updated. */
  patch: UserAnimePatch;
};

/** All input for the `updateUserAnime` mutation. */
export type UpdateUserAnimeInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserAnime` being updated. */
  patch: UserAnimePatch;
  userId: Scalars['String'];
};

/** All input for the `updateUserAnimeListByAnimeListIdAndAnimeId` mutation. */
export type UpdateUserAnimeListByAnimeListIdAndAnimeIdInput = {
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserAnimeList` being updated. */
  patch: UserAnimeListPatch;
};

/** The output of our update `UserAnimeList` mutation. */
export type UpdateUserAnimeListPayload = {
  __typename?: 'UpdateUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was updated by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our update `UserAnimeList` mutation. */
export type UpdateUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};

/** The output of our update `UserAnime` mutation. */
export type UpdateUserAnimePayload = {
  __typename?: 'UpdateUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was updated by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our update `UserAnime` mutation. */
export type UpdateUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeOrderBy>>;
};

/** All input for the `updateUserByNodeId` mutation. */
export type UpdateUserByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `User` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch;
};

/** All input for the `updateUser` mutation. */
export type UpdateUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch;
};

/** All input for the `updateUserNotificationByNodeId` mutation. */
export type UpdateUserNotificationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserNotification` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserNotification` being updated. */
  patch: UserNotificationPatch;
};

/** All input for the `updateUserNotification` mutation. */
export type UpdateUserNotificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['UUID'];
  /** An object where the defined keys will be set on the `UserNotification` being updated. */
  patch: UserNotificationPatch;
};

/** The output of our update `UserNotification` mutation. */
export type UpdateUserNotificationPayload = {
  __typename?: 'UpdateUserNotificationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserNotification`. */
  user?: Maybe<User>;
  /** The `UserNotification` that was updated by this mutation. */
  userNotification?: Maybe<UserNotification>;
  /** An edge for our `UserNotification`. May be used by Relay 1. */
  userNotificationEdge?: Maybe<UserNotificationsEdge>;
};


/** The output of our update `UserNotification` mutation. */
export type UpdateUserNotificationPayloadUserNotificationEdgeArgs = {
  orderBy?: InputMaybe<Array<UserNotificationsOrderBy>>;
};

/** The output of our update `User` mutation. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was updated by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our update `User` mutation. */
export type UpdateUserPayloadUserEdgeArgs = {
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};

/** All input for the `updateUserWatchStatusByNodeId` mutation. */
export type UpdateUserWatchStatusByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserWatchStatus` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserWatchStatus` being updated. */
  patch: UserWatchStatusPatch;
};

/** All input for the `updateUserWatchStatus` mutation. */
export type UpdateUserWatchStatusInput = {
  animeId: Scalars['UUID'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserWatchStatus` being updated. */
  patch: UserWatchStatusPatch;
  userId: Scalars['String'];
};

/** The output of our update `UserWatchStatus` mutation. */
export type UpdateUserWatchStatusPayload = {
  __typename?: 'UpdateUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was updated by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our update `UserWatchStatus` mutation. */
export type UpdateUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: InputMaybe<Array<UserWatchStatusesOrderBy>>;
};

/** All input for the upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNameInput = {
  /** The `AlternateAnimeName` to be upserted by this mutation. */
  alternateAnimeName: AlternateAnimeNameInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNamePayload = {
  __typename?: 'UpsertAlternateAnimeNamePayload';
  /** The `AlternateAnimeName` that was upserted by this mutation. */
  alternateAnimeName?: Maybe<AlternateAnimeName>;
  /** An edge for our `AlternateAnimeName`. May be used by Relay 1. */
  alternateAnimeNameEdge?: Maybe<AlternateAnimeNamesEdge>;
  /** Reads a single `Anime` that is related to this `AlternateAnimeName`. */
  anime?: Maybe<Anime>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNamePayloadAlternateAnimeNameEdgeArgs = {
  orderBy?: InputMaybe<Array<AlternateAnimeNamesOrderBy>>;
};

/** Where conditions for the upsert `AlternateAnimeName` mutation. */
export type UpsertAlternateAnimeNameWhere = {
  id?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterInput = {
  /** The `AnimeCharacter` to be upserted by this mutation. */
  animeCharacter: AnimeCharacterInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterPayload = {
  __typename?: 'UpsertAnimeCharacterPayload';
  /** Reads a single `Anime` that is related to this `AnimeCharacter`. */
  anime?: Maybe<Anime>;
  /** The `AnimeCharacter` that was upserted by this mutation. */
  animeCharacter?: Maybe<AnimeCharacter>;
  /** An edge for our `AnimeCharacter`. May be used by Relay 1. */
  animeCharacterEdge?: Maybe<AnimeCharactersEdge>;
  /** Reads a single `Character` that is related to this `AnimeCharacter`. */
  character?: Maybe<Character>;
  /** Reads a single `CharacterRole` that is related to this `AnimeCharacter`. */
  characterRole?: Maybe<CharacterRole>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeCharacter`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterPayloadAnimeCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeCharactersOrderBy>>;
};

/** Where conditions for the upsert `AnimeCharacter` mutation. */
export type UpsertAnimeCharacterWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  characterId?: InputMaybe<Scalars['UUID']>;
  characterRoleId?: InputMaybe<Scalars['UUID']>;
  language?: InputMaybe<LanguageType>;
  personId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenreInput = {
  /** The `AnimeGenre` to be upserted by this mutation. */
  animeGenre: AnimeGenreInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenrePayload = {
  __typename?: 'UpsertAnimeGenrePayload';
  /** Reads a single `Anime` that is related to this `AnimeGenre`. */
  anime?: Maybe<Anime>;
  /** The `AnimeGenre` that was upserted by this mutation. */
  animeGenre?: Maybe<AnimeGenre>;
  /** An edge for our `AnimeGenre`. May be used by Relay 1. */
  animeGenreEdge?: Maybe<AnimeGenresEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Genre` that is related to this `AnimeGenre`. */
  genre?: Maybe<Genre>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenrePayloadAnimeGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeGenresOrderBy>>;
};

/** Where conditions for the upsert `AnimeGenre` mutation. */
export type UpsertAnimeGenreWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  genreId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeImage` mutation. */
export type UpsertAnimeImageInput = {
  /** The `AnimeImage` to be upserted by this mutation. */
  animeImage: AnimeImageInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeImage` mutation. */
export type UpsertAnimeImagePayload = {
  __typename?: 'UpsertAnimeImagePayload';
  /** Reads a single `Anime` that is related to this `AnimeImage`. */
  anime?: Maybe<Anime>;
  /** The `AnimeImage` that was upserted by this mutation. */
  animeImage?: Maybe<AnimeImage>;
  /** An edge for our `AnimeImage`. May be used by Relay 1. */
  animeImageEdge?: Maybe<AnimeImagesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `AnimeImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeImage` mutation. */
export type UpsertAnimeImagePayloadAnimeImageEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeImagesOrderBy>>;
};

/** Where conditions for the upsert `AnimeImage` mutation. */
export type UpsertAnimeImageWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  imageId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `Anime` mutation. */
export type UpsertAnimeInput = {
  /** The `Anime` to be upserted by this mutation. */
  anime: AnimeInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorInput = {
  /** The `AnimeLicensor` to be upserted by this mutation. */
  animeLicensor: AnimeLicensorInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorPayload = {
  __typename?: 'UpsertAnimeLicensorPayload';
  /** Reads a single `Anime` that is related to this `AnimeLicensor`. */
  anime?: Maybe<Anime>;
  /** The `AnimeLicensor` that was upserted by this mutation. */
  animeLicensor?: Maybe<AnimeLicensor>;
  /** An edge for our `AnimeLicensor`. May be used by Relay 1. */
  animeLicensorEdge?: Maybe<AnimeLicensorsEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Licensor` that is related to this `AnimeLicensor`. */
  licensor?: Maybe<Licensor>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorPayloadAnimeLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeLicensorsOrderBy>>;
};

/** Where conditions for the upsert `AnimeLicensor` mutation. */
export type UpsertAnimeLicensorWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  licensorId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeList` mutation. */
export type UpsertAnimeListInput = {
  /** The `AnimeList` to be upserted by this mutation. */
  animeList: AnimeListInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeList` mutation. */
export type UpsertAnimeListPayload = {
  __typename?: 'UpsertAnimeListPayload';
  /** The `AnimeList` that was upserted by this mutation. */
  animeList?: Maybe<AnimeList>;
  /** An edge for our `AnimeList`. May be used by Relay 1. */
  animeListEdge?: Maybe<AnimeListsEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeList`. */
  user?: Maybe<User>;
};


/** The output of our upsert `AnimeList` mutation. */
export type UpsertAnimeListPayloadAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};

/** Where conditions for the upsert `AnimeList` mutation. */
export type UpsertAnimeListWhere = {
  id?: InputMaybe<Scalars['UUID']>;
};

/** The output of our upsert `Anime` mutation. */
export type UpsertAnimePayload = {
  __typename?: 'UpsertAnimePayload';
  /** The `Anime` that was upserted by this mutation. */
  anime?: Maybe<Anime>;
  /** An edge for our `Anime`. May be used by Relay 1. */
  animeEdge?: Maybe<AnimeEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Anime` mutation. */
export type UpsertAnimePayloadAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeOrderBy>>;
};

/** All input for the upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerInput = {
  /** The `AnimeProducer` to be upserted by this mutation. */
  animeProducer: AnimeProducerInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerPayload = {
  __typename?: 'UpsertAnimeProducerPayload';
  /** Reads a single `Anime` that is related to this `AnimeProducer`. */
  anime?: Maybe<Anime>;
  /** The `AnimeProducer` that was upserted by this mutation. */
  animeProducer?: Maybe<AnimeProducer>;
  /** An edge for our `AnimeProducer`. May be used by Relay 1. */
  animeProducerEdge?: Maybe<AnimeProducersEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Producer` that is related to this `AnimeProducer`. */
  producer?: Maybe<Producer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerPayloadAnimeProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeProducersOrderBy>>;
};

/** Where conditions for the upsert `AnimeProducer` mutation. */
export type UpsertAnimeProducerWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  producerId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffInput = {
  /** The `AnimeStaff` to be upserted by this mutation. */
  animeStaff: AnimeStaffInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffPayload = {
  __typename?: 'UpsertAnimeStaffPayload';
  /** Reads a single `Anime` that is related to this `AnimeStaff`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStaff` that was upserted by this mutation. */
  animeStaff?: Maybe<AnimeStaff>;
  /** An edge for our `AnimeStaff`. May be used by Relay 1. */
  animeStaffEdge?: Maybe<AnimeStaffEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Person` that is related to this `AnimeStaff`. */
  person?: Maybe<Person>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `StaffRole` that is related to this `AnimeStaff`. */
  staffRole?: Maybe<StaffRole>;
};


/** The output of our upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffPayloadAnimeStaffEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStaffOrderBy>>;
};

/** Where conditions for the upsert `AnimeStaff` mutation. */
export type UpsertAnimeStaffWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  personId?: InputMaybe<Scalars['UUID']>;
  staffRoleId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeStreamingOn` mutation. */
export type UpsertAnimeStreamingOnInput = {
  /** The `AnimeStreamingOn` to be upserted by this mutation. */
  animeStreamingOn: AnimeStreamingOnInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeStreamingOn` mutation. */
export type UpsertAnimeStreamingOnPayload = {
  __typename?: 'UpsertAnimeStreamingOnPayload';
  /** Reads a single `Anime` that is related to this `AnimeStreamingOn`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStreamingOn` that was upserted by this mutation. */
  animeStreamingOn?: Maybe<AnimeStreamingOn>;
  /** An edge for our `AnimeStreamingOn`. May be used by Relay 1. */
  animeStreamingOnEdge?: Maybe<AnimeStreamingOnsEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `AnimeStreamingOn` mutation. */
export type UpsertAnimeStreamingOnPayloadAnimeStreamingOnEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStreamingOnsOrderBy>>;
};

/** Where conditions for the upsert `AnimeStreamingOn` mutation. */
export type UpsertAnimeStreamingOnWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  streamServiceId?: InputMaybe<StreamingServices>;
};

/** All input for the upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioInput = {
  /** The `AnimeStudio` to be upserted by this mutation. */
  animeStudio: AnimeStudioInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioPayload = {
  __typename?: 'UpsertAnimeStudioPayload';
  /** Reads a single `Anime` that is related to this `AnimeStudio`. */
  anime?: Maybe<Anime>;
  /** The `AnimeStudio` that was upserted by this mutation. */
  animeStudio?: Maybe<AnimeStudio>;
  /** An edge for our `AnimeStudio`. May be used by Relay 1. */
  animeStudioEdge?: Maybe<AnimeStudiosEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Studio` that is related to this `AnimeStudio`. */
  studio?: Maybe<Studio>;
};


/** The output of our upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioPayloadAnimeStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeStudiosOrderBy>>;
};

/** Where conditions for the upsert `AnimeStudio` mutation. */
export type UpsertAnimeStudioWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  studioId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScoreInput = {
  /** The `AnimeUserScore` to be upserted by this mutation. */
  animeUserScore: AnimeUserScoreInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScorePayload = {
  __typename?: 'UpsertAnimeUserScorePayload';
  /** Reads a single `Anime` that is related to this `AnimeUserScore`. */
  anime?: Maybe<Anime>;
  /** The `AnimeUserScore` that was upserted by this mutation. */
  animeUserScore?: Maybe<AnimeUserScore>;
  /** An edge for our `AnimeUserScore`. May be used by Relay 1. */
  animeUserScoreEdge?: Maybe<AnimeUserScoresEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `AnimeUserScore`. */
  user?: Maybe<User>;
};


/** The output of our upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScorePayloadAnimeUserScoreEdgeArgs = {
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};

/** Where conditions for the upsert `AnimeUserScore` mutation. */
export type UpsertAnimeUserScoreWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  userId?: InputMaybe<Scalars['String']>;
};

/** Where conditions for the upsert `Anime` mutation. */
export type UpsertAnimeWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  malId?: InputMaybe<Scalars['Int']>;
};

/** All input for the upsert `CharacterImage` mutation. */
export type UpsertCharacterImageInput = {
  /** The `CharacterImage` to be upserted by this mutation. */
  characterImage: CharacterImageInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `CharacterImage` mutation. */
export type UpsertCharacterImagePayload = {
  __typename?: 'UpsertCharacterImagePayload';
  /** Reads a single `Character` that is related to this `CharacterImage`. */
  character?: Maybe<Character>;
  /** The `CharacterImage` that was upserted by this mutation. */
  characterImage?: Maybe<CharacterImage>;
  /** An edge for our `CharacterImage`. May be used by Relay 1. */
  characterImageEdge?: Maybe<CharacterImagesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `CharacterImage`. */
  image?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `CharacterImage` mutation. */
export type UpsertCharacterImagePayloadCharacterImageEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterImagesOrderBy>>;
};

/** Where conditions for the upsert `CharacterImage` mutation. */
export type UpsertCharacterImageWhere = {
  characterId?: InputMaybe<Scalars['UUID']>;
  imageId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `Character` mutation. */
export type UpsertCharacterInput = {
  /** The `Character` to be upserted by this mutation. */
  character: CharacterInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `Character` mutation. */
export type UpsertCharacterPayload = {
  __typename?: 'UpsertCharacterPayload';
  /** The `Character` that was upserted by this mutation. */
  character?: Maybe<Character>;
  /** An edge for our `Character`. May be used by Relay 1. */
  characterEdge?: Maybe<CharactersEdge>;
  /** Reads a single `Image` that is related to this `Character`. */
  characterImage?: Maybe<Image>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Character` mutation. */
export type UpsertCharacterPayloadCharacterEdgeArgs = {
  orderBy?: InputMaybe<Array<CharactersOrderBy>>;
};

/** All input for the upsert `CharacterRole` mutation. */
export type UpsertCharacterRoleInput = {
  /** The `CharacterRole` to be upserted by this mutation. */
  characterRole: CharacterRoleInput;
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** The output of our upsert `CharacterRole` mutation. */
export type UpsertCharacterRolePayload = {
  __typename?: 'UpsertCharacterRolePayload';
  /** The `CharacterRole` that was upserted by this mutation. */
  characterRole?: Maybe<CharacterRole>;
  /** An edge for our `CharacterRole`. May be used by Relay 1. */
  characterRoleEdge?: Maybe<CharacterRolesEdge>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `CharacterRole` mutation. */
export type UpsertCharacterRolePayloadCharacterRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<CharacterRolesOrderBy>>;
};

/** Where conditions for the upsert `CharacterRole` mutation. */
export type UpsertCharacterRoleWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  role?: InputMaybe<Scalars['String']>;
};

/** Where conditions for the upsert `Character` mutation. */
export type UpsertCharacterWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  malId?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `Genre` mutation. */
export type UpsertGenreInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Genre` to be upserted by this mutation. */
  genre: GenreInput;
};

/** The output of our upsert `Genre` mutation. */
export type UpsertGenrePayload = {
  __typename?: 'UpsertGenrePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Genre` that was upserted by this mutation. */
  genre?: Maybe<Genre>;
  /** An edge for our `Genre`. May be used by Relay 1. */
  genreEdge?: Maybe<GenresEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Genre` mutation. */
export type UpsertGenrePayloadGenreEdgeArgs = {
  orderBy?: InputMaybe<Array<GenresOrderBy>>;
};

/** Where conditions for the upsert `Genre` mutation. */
export type UpsertGenreWhere = {
  genre?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `Image` mutation. */
export type UpsertImageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Image` to be upserted by this mutation. */
  image: ImageInput;
};

/** The output of our upsert `Image` mutation. */
export type UpsertImagePayload = {
  __typename?: 'UpsertImagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Image` that was upserted by this mutation. */
  image?: Maybe<Image>;
  /** An edge for our `Image`. May be used by Relay 1. */
  imageEdge?: Maybe<ImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Image` mutation. */
export type UpsertImagePayloadImageEdgeArgs = {
  orderBy?: InputMaybe<Array<ImagesOrderBy>>;
};

/** Where conditions for the upsert `Image` mutation. */
export type UpsertImageWhere = {
  id?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `Licensor` mutation. */
export type UpsertLicensorInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Licensor` to be upserted by this mutation. */
  licensor: LicensorInput;
};

/** The output of our upsert `Licensor` mutation. */
export type UpsertLicensorPayload = {
  __typename?: 'UpsertLicensorPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Licensor` that was upserted by this mutation. */
  licensor?: Maybe<Licensor>;
  /** An edge for our `Licensor`. May be used by Relay 1. */
  licensorEdge?: Maybe<LicensorsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Licensor` mutation. */
export type UpsertLicensorPayloadLicensorEdgeArgs = {
  orderBy?: InputMaybe<Array<LicensorsOrderBy>>;
};

/** Where conditions for the upsert `Licensor` mutation. */
export type UpsertLicensorWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  licensor?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `PersonImage` mutation. */
export type UpsertPersonImageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `PersonImage` to be upserted by this mutation. */
  personImage: PersonImageInput;
};

/** The output of our upsert `PersonImage` mutation. */
export type UpsertPersonImagePayload = {
  __typename?: 'UpsertPersonImagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Reads a single `Image` that is related to this `PersonImage`. */
  image?: Maybe<Image>;
  /** Reads a single `Person` that is related to this `PersonImage`. */
  person?: Maybe<Person>;
  /** The `PersonImage` that was upserted by this mutation. */
  personImage?: Maybe<PersonImage>;
  /** An edge for our `PersonImage`. May be used by Relay 1. */
  personImageEdge?: Maybe<PersonImagesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `PersonImage` mutation. */
export type UpsertPersonImagePayloadPersonImageEdgeArgs = {
  orderBy?: InputMaybe<Array<PersonImagesOrderBy>>;
};

/** Where conditions for the upsert `PersonImage` mutation. */
export type UpsertPersonImageWhere = {
  imageId?: InputMaybe<Scalars['UUID']>;
  personId?: InputMaybe<Scalars['UUID']>;
};

/** All input for the upsert `Person` mutation. */
export type UpsertPersonInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Person` to be upserted by this mutation. */
  person: PersonInput;
};

/** The output of our upsert `Person` mutation. */
export type UpsertPersonPayload = {
  __typename?: 'UpsertPersonPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Person` that was upserted by this mutation. */
  person?: Maybe<Person>;
  /** An edge for our `Person`. May be used by Relay 1. */
  personEdge?: Maybe<PeopleEdge>;
  /** Reads a single `Image` that is related to this `Person`. */
  personImage?: Maybe<Image>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Person` mutation. */
export type UpsertPersonPayloadPersonEdgeArgs = {
  orderBy?: InputMaybe<Array<PeopleOrderBy>>;
};

/** Where conditions for the upsert `Person` mutation. */
export type UpsertPersonWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  malId?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `Producer` mutation. */
export type UpsertProducerInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Producer` to be upserted by this mutation. */
  producer: ProducerInput;
};

/** The output of our upsert `Producer` mutation. */
export type UpsertProducerPayload = {
  __typename?: 'UpsertProducerPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Producer` that was upserted by this mutation. */
  producer?: Maybe<Producer>;
  /** An edge for our `Producer`. May be used by Relay 1. */
  producerEdge?: Maybe<ProducersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our upsert `Producer` mutation. */
export type UpsertProducerPayloadProducerEdgeArgs = {
  orderBy?: InputMaybe<Array<ProducersOrderBy>>;
};

/** Where conditions for the upsert `Producer` mutation. */
export type UpsertProducerWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  producer?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `StaffRole` mutation. */
export type UpsertStaffRoleInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `StaffRole` to be upserted by this mutation. */
  staffRole: StaffRoleInput;
};

/** The output of our upsert `StaffRole` mutation. */
export type UpsertStaffRolePayload = {
  __typename?: 'UpsertStaffRolePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `StaffRole` that was upserted by this mutation. */
  staffRole?: Maybe<StaffRole>;
  /** An edge for our `StaffRole`. May be used by Relay 1. */
  staffRoleEdge?: Maybe<StaffRolesEdge>;
};


/** The output of our upsert `StaffRole` mutation. */
export type UpsertStaffRolePayloadStaffRoleEdgeArgs = {
  orderBy?: InputMaybe<Array<StaffRolesOrderBy>>;
};

/** Where conditions for the upsert `StaffRole` mutation. */
export type UpsertStaffRoleWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  role?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `Studio` mutation. */
export type UpsertStudioInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `Studio` to be upserted by this mutation. */
  studio: StudioInput;
};

/** The output of our upsert `Studio` mutation. */
export type UpsertStudioPayload = {
  __typename?: 'UpsertStudioPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Studio` that was upserted by this mutation. */
  studio?: Maybe<Studio>;
  /** An edge for our `Studio`. May be used by Relay 1. */
  studioEdge?: Maybe<StudiosEdge>;
};


/** The output of our upsert `Studio` mutation. */
export type UpsertStudioPayloadStudioEdgeArgs = {
  orderBy?: InputMaybe<Array<StudiosOrderBy>>;
};

/** Where conditions for the upsert `Studio` mutation. */
export type UpsertStudioWhere = {
  id?: InputMaybe<Scalars['UUID']>;
  studio?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `UserAnime` mutation. */
export type UpsertUserAnimeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserAnime` to be upserted by this mutation. */
  userAnime: UserAnimeInput;
};

/** All input for the upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserAnimeList` to be upserted by this mutation. */
  userAnimeList: UserAnimeListInput;
};

/** The output of our upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListPayload = {
  __typename?: 'UpsertUserAnimeListPayload';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserAnimeList` that was upserted by this mutation. */
  userAnimeList?: Maybe<UserAnimeList>;
  /** An edge for our `UserAnimeList`. May be used by Relay 1. */
  userAnimeListEdge?: Maybe<UserAnimeListsEdge>;
};


/** The output of our upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListPayloadUserAnimeListEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeListsOrderBy>>;
};

/** Where conditions for the upsert `UserAnimeList` mutation. */
export type UpsertUserAnimeListWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  animeListId?: InputMaybe<Scalars['UUID']>;
};

/** The output of our upsert `UserAnime` mutation. */
export type UpsertUserAnimePayload = {
  __typename?: 'UpsertUserAnimePayload';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  /** The `UserAnime` that was upserted by this mutation. */
  userAnime?: Maybe<UserAnime>;
  /** An edge for our `UserAnime`. May be used by Relay 1. */
  userAnimeEdge?: Maybe<UserAnimeEdge>;
};


/** The output of our upsert `UserAnime` mutation. */
export type UpsertUserAnimePayloadUserAnimeEdgeArgs = {
  orderBy?: InputMaybe<Array<UserAnimeOrderBy>>;
};

/** Where conditions for the upsert `UserAnime` mutation. */
export type UpsertUserAnimeWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  userId?: InputMaybe<Scalars['String']>;
};

/** All input for the upsert `User` mutation. */
export type UpsertUserInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `User` to be upserted by this mutation. */
  user: UserInput;
};

/** All input for the upsert `UserNotification` mutation. */
export type UpsertUserNotificationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserNotification` to be upserted by this mutation. */
  userNotification: UserNotificationInput;
};

/** The output of our upsert `UserNotification` mutation. */
export type UpsertUserNotificationPayload = {
  __typename?: 'UpsertUserNotificationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserNotification`. */
  user?: Maybe<User>;
  /** The `UserNotification` that was upserted by this mutation. */
  userNotification?: Maybe<UserNotification>;
  /** An edge for our `UserNotification`. May be used by Relay 1. */
  userNotificationEdge?: Maybe<UserNotificationsEdge>;
};


/** The output of our upsert `UserNotification` mutation. */
export type UpsertUserNotificationPayloadUserNotificationEdgeArgs = {
  orderBy?: InputMaybe<Array<UserNotificationsOrderBy>>;
};

/** Where conditions for the upsert `UserNotification` mutation. */
export type UpsertUserNotificationWhere = {
  id?: InputMaybe<Scalars['UUID']>;
};

/** The output of our upsert `User` mutation. */
export type UpsertUserPayload = {
  __typename?: 'UpsertUserPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was upserted by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our upsert `User` mutation. */
export type UpsertUserPayloadUserEdgeArgs = {
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};

/** All input for the upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The `UserWatchStatus` to be upserted by this mutation. */
  userWatchStatus: UserWatchStatusInput;
};

/** The output of our upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusPayload = {
  __typename?: 'UpsertUserWatchStatusPayload';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  /** The `UserWatchStatus` that was upserted by this mutation. */
  userWatchStatus?: Maybe<UserWatchStatus>;
  /** An edge for our `UserWatchStatus`. May be used by Relay 1. */
  userWatchStatusEdge?: Maybe<UserWatchStatusesEdge>;
};


/** The output of our upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusPayloadUserWatchStatusEdgeArgs = {
  orderBy?: InputMaybe<Array<UserWatchStatusesOrderBy>>;
};

/** Where conditions for the upsert `UserWatchStatus` mutation. */
export type UpsertUserWatchStatusWhere = {
  animeId?: InputMaybe<Scalars['UUID']>;
  userId?: InputMaybe<Scalars['String']>;
};

/** Where conditions for the upsert `User` mutation. */
export type UpsertUserWhere = {
  id?: InputMaybe<Scalars['String']>;
};

export type User = Node & {
  __typename?: 'User';
  /** Reads and enables pagination through a set of `AnimeList`. */
  animeLists: AnimeListsConnection;
  /** Reads and enables pagination through a set of `AnimeUserScore`. */
  animeUserScores: AnimeUserScoresConnection;
  id: Scalars['String'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads and enables pagination through a set of `UserAnime`. */
  userAnimes: UserAnimeConnection;
  /** Reads and enables pagination through a set of `UserNotification`. */
  userNotifications: UserNotificationsConnection;
  /** Reads and enables pagination through a set of `UserWatchStatus`. */
  userWatchStatuses: UserWatchStatusesConnection;
};


export type UserAnimeListsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeListCondition>;
  filter?: InputMaybe<AnimeListFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeListsOrderBy>>;
};


export type UserAnimeUserScoresArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<AnimeUserScoreCondition>;
  filter?: InputMaybe<AnimeUserScoreFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AnimeUserScoresOrderBy>>;
};


export type UserUserAnimesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserAnimeCondition>;
  filter?: InputMaybe<UserAnimeFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserAnimeOrderBy>>;
};


export type UserUserNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserNotificationCondition>;
  filter?: InputMaybe<UserNotificationFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserNotificationsOrderBy>>;
};


export type UserUserWatchStatusesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  condition?: InputMaybe<UserWatchStatusCondition>;
  filter?: InputMaybe<UserWatchStatusFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<UserWatchStatusesOrderBy>>;
};

export type UserAnime = Node & {
  __typename?: 'UserAnime';
  /** Reads a single `Anime` that is related to this `UserAnime`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `User` that is related to this `UserAnime`. */
  user?: Maybe<User>;
  userId: Scalars['String'];
};

/**
 * A condition to be used against `UserAnime` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type UserAnimeCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `UserAnime` values. */
export type UserAnimeConnection = {
  __typename?: 'UserAnimeConnection';
  /** A list of edges which contains the `UserAnime` and cursor to aid in pagination. */
  edges: Array<UserAnimeEdge>;
  /** A list of `UserAnime` objects. */
  nodes: Array<UserAnime>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserAnime` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserAnime` edge in the connection. */
export type UserAnimeEdge = {
  __typename?: 'UserAnimeEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserAnime` at the end of the edge. */
  node: UserAnime;
};

/** A filter to be used against `UserAnime` object types. All fields are combined with a logical ‘and.’ */
export type UserAnimeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserAnimeFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserAnimeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserAnimeFilter>>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `UserAnime` */
export type UserAnimeInput = {
  animeId: Scalars['UUID'];
  userId: Scalars['String'];
};

export type UserAnimeList = {
  __typename?: 'UserAnimeList';
  /** Reads a single `Anime` that is related to this `UserAnimeList`. */
  anime?: Maybe<Anime>;
  animeIndex: Scalars['String'];
  /** Reads a single `AnimeList` that is related to this `UserAnimeList`. */
  animeList?: Maybe<AnimeList>;
};

/**
 * A condition to be used against `UserAnimeList` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserAnimeListCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `animeIndex` field. */
  animeIndex?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `animeListId` field. */
  animeListId?: InputMaybe<Scalars['UUID']>;
};

/** A filter to be used against `UserAnimeList` object types. All fields are combined with a logical ‘and.’ */
export type UserAnimeListFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserAnimeListFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `animeIndex` field. */
  animeIndex?: InputMaybe<StringFilter>;
  /** Filter by the object’s `animeListId` field. */
  animeListId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserAnimeListFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserAnimeListFilter>>;
};

/** An input for mutations affecting `UserAnimeList` */
export type UserAnimeListInput = {
  animeId: Scalars['UUID'];
  animeIndex?: InputMaybe<Scalars['String']>;
  animeListId: Scalars['UUID'];
};

/** Represents an update to a `UserAnimeList`. Fields that are set will be updated. */
export type UserAnimeListPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  animeIndex?: InputMaybe<Scalars['String']>;
  animeListId?: InputMaybe<Scalars['UUID']>;
};

export type UserAnimeListType = {
  __typename?: 'UserAnimeListType';
  coverImage?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
  listId?: Maybe<Scalars['UUID']>;
  listName?: Maybe<Scalars['String']>;
  privacy?: Maybe<AnimeListPrivacy>;
  title?: Maybe<Scalars['String']>;
};

/** A filter to be used against `UserAnimeListType` object types. All fields are combined with a logical ‘and.’ */
export type UserAnimeListTypeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserAnimeListTypeFilter>>;
  /** Filter by the object’s `coverImage` field. */
  coverImage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `listId` field. */
  listId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `listName` field. */
  listName?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserAnimeListTypeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserAnimeListTypeFilter>>;
  /** Filter by the object’s `privacy` field. */
  privacy?: InputMaybe<AnimeListPrivacyFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** A connection to a list of `UserAnimeListType` values. */
export type UserAnimeListTypesConnection = {
  __typename?: 'UserAnimeListTypesConnection';
  /** A list of edges which contains the `UserAnimeListType` and cursor to aid in pagination. */
  edges: Array<UserAnimeListTypesEdge>;
  /** A list of `UserAnimeListType` objects. */
  nodes: Array<UserAnimeListType>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserAnimeListType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserAnimeListType` edge in the connection. */
export type UserAnimeListTypesEdge = {
  __typename?: 'UserAnimeListTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserAnimeListType` at the end of the edge. */
  node: UserAnimeListType;
};

/** A connection to a list of `UserAnimeList` values. */
export type UserAnimeListsConnection = {
  __typename?: 'UserAnimeListsConnection';
  /** A list of edges which contains the `UserAnimeList` and cursor to aid in pagination. */
  edges: Array<UserAnimeListsEdge>;
  /** A list of `UserAnimeList` objects. */
  nodes: Array<UserAnimeList>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserAnimeList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserAnimeList` edge in the connection. */
export type UserAnimeListsEdge = {
  __typename?: 'UserAnimeListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserAnimeList` at the end of the edge. */
  node: UserAnimeList;
};

/** Methods to use when ordering `UserAnimeList`. */
export enum UserAnimeListsOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  AnimeIndexAsc = 'ANIME_INDEX_ASC',
  AnimeIndexDesc = 'ANIME_INDEX_DESC',
  AnimeListByAnimeListIdCreatedAtAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__CREATED_AT_ASC',
  AnimeListByAnimeListIdCreatedAtDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__CREATED_AT_DESC',
  AnimeListByAnimeListIdIdAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__ID_ASC',
  AnimeListByAnimeListIdIdDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__ID_DESC',
  AnimeListByAnimeListIdIsDefaultAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__IS_DEFAULT_ASC',
  AnimeListByAnimeListIdIsDefaultDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__IS_DEFAULT_DESC',
  AnimeListByAnimeListIdPrivacyAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__PRIVACY_ASC',
  AnimeListByAnimeListIdPrivacyDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__PRIVACY_DESC',
  AnimeListByAnimeListIdTitleAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__TITLE_ASC',
  AnimeListByAnimeListIdTitleDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__TITLE_DESC',
  AnimeListByAnimeListIdUserIdAsc = 'ANIME_LIST_BY_ANIME_LIST_ID__USER_ID_ASC',
  AnimeListByAnimeListIdUserIdDesc = 'ANIME_LIST_BY_ANIME_LIST_ID__USER_ID_DESC',
  AnimeListIdAsc = 'ANIME_LIST_ID_ASC',
  AnimeListIdDesc = 'ANIME_LIST_ID_DESC',
  Natural = 'NATURAL'
}

/** Methods to use when ordering `UserAnime`. */
export enum UserAnimeOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** Represents an update to a `UserAnime`. Fields that are set will be updated. */
export type UserAnimePatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  userId?: InputMaybe<Scalars['String']>;
};

/** A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['String']>;
};

export type UserCustomAnimeListByStatusType = {
  __typename?: 'UserCustomAnimeListByStatusType';
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  id?: Maybe<Scalars['UUID']>;
  imageUrl?: Maybe<Scalars['String']>;
  mediaType?: Maybe<Scalars['String']>;
  numberOfEpisodes?: Maybe<Scalars['BigFloat']>;
  title?: Maybe<Scalars['String']>;
  userEpisodesWatched?: Maybe<Scalars['BigFloat']>;
  userScore?: Maybe<Scalars['BigFloat']>;
  watchStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `UserCustomAnimeListByStatusType` object types. All fields are combined with a logical ‘and.’ */
export type UserCustomAnimeListByStatusTypeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserCustomAnimeListByStatusTypeFilter>>;
  /** Filter by the object’s `averageWatcherRating` field. */
  averageWatcherRating?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `imageUrl` field. */
  imageUrl?: InputMaybe<StringFilter>;
  /** Filter by the object’s `mediaType` field. */
  mediaType?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserCustomAnimeListByStatusTypeFilter>;
  /** Filter by the object’s `numberOfEpisodes` field. */
  numberOfEpisodes?: InputMaybe<BigFloatFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserCustomAnimeListByStatusTypeFilter>>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userEpisodesWatched` field. */
  userEpisodesWatched?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `userScore` field. */
  userScore?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `watchStatus` field. */
  watchStatus?: InputMaybe<StringFilter>;
};

/** A connection to a list of `UserCustomAnimeListByStatusType` values. */
export type UserCustomAnimeListByStatusTypesConnection = {
  __typename?: 'UserCustomAnimeListByStatusTypesConnection';
  /** A list of edges which contains the `UserCustomAnimeListByStatusType` and cursor to aid in pagination. */
  edges: Array<UserCustomAnimeListByStatusTypesEdge>;
  /** A list of `UserCustomAnimeListByStatusType` objects. */
  nodes: Array<UserCustomAnimeListByStatusType>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserCustomAnimeListByStatusType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserCustomAnimeListByStatusType` edge in the connection. */
export type UserCustomAnimeListByStatusTypesEdge = {
  __typename?: 'UserCustomAnimeListByStatusTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserCustomAnimeListByStatusType` at the end of the edge. */
  node: UserCustomAnimeListByStatusType;
};

/** A filter to be used against `User` object types. All fields are combined with a logical ‘and.’ */
export type UserFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserFilter>>;
};

/** An input for mutations affecting `User` */
export type UserInput = {
  id: Scalars['String'];
};

export type UserList = {
  __typename?: 'UserList';
  animes?: Maybe<Array<Maybe<UserListAnime>>>;
  id?: Maybe<Scalars['UUID']>;
  title?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UserListAnime = {
  __typename?: 'UserListAnime';
  airingStatusType?: Maybe<Scalars['String']>;
  averageWatcherRating?: Maybe<Scalars['BigFloat']>;
  coverImage?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['UUID']>;
  numberOfEpisodes?: Maybe<Scalars['BigFloat']>;
  startBroadcastDatetime?: Maybe<Scalars['Datetime']>;
  title?: Maybe<Scalars['String']>;
  userEpisodeCount?: Maybe<Scalars['BigFloat']>;
  userLiked?: Maybe<Scalars['Boolean']>;
  userRating?: Maybe<Scalars['BigFloat']>;
  userWatchStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `UserList` object types. All fields are combined with a logical ‘and.’ */
export type UserListFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserListFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserListFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserListFilter>>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<StringFilter>;
};

/** A connection to a list of `UserList` values. */
export type UserListsConnection = {
  __typename?: 'UserListsConnection';
  /** A list of edges which contains the `UserList` and cursor to aid in pagination. */
  edges: Array<UserListsEdge>;
  /** A list of `UserList` objects. */
  nodes: Array<UserList>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserList` edge in the connection. */
export type UserListsEdge = {
  __typename?: 'UserListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserList` at the end of the edge. */
  node: UserList;
};

export type UserNotification = Node & {
  __typename?: 'UserNotification';
  createdAt?: Maybe<Scalars['Datetime']>;
  entityId: Scalars['UUID'];
  entityImage?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
  isRead?: Maybe<Scalars['Boolean']>;
  message?: Maybe<Scalars['String']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  notificationType: NotificationType;
  /** Reads a single `User` that is related to this `UserNotification`. */
  user?: Maybe<User>;
};

/**
 * A condition to be used against `UserNotification` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserNotificationCondition = {
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: InputMaybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `entityId` field. */
  entityId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `entityImage` field. */
  entityImage?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `isRead` field. */
  isRead?: InputMaybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `message` field. */
  message?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `notificationType` field. */
  notificationType?: InputMaybe<NotificationType>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['String']>;
};

/** A filter to be used against `UserNotification` object types. All fields are combined with a logical ‘and.’ */
export type UserNotificationFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserNotificationFilter>>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `entityId` field. */
  entityId?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `entityImage` field. */
  entityImage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<UuidFilter>;
  /** Filter by the object’s `isRead` field. */
  isRead?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `message` field. */
  message?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserNotificationFilter>;
  /** Filter by the object’s `notificationType` field. */
  notificationType?: InputMaybe<NotificationTypeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserNotificationFilter>>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `UserNotification` */
export type UserNotificationInput = {
  createdAt?: InputMaybe<Scalars['Datetime']>;
  entityId: Scalars['UUID'];
  entityImage?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['UUID']>;
  isRead?: InputMaybe<Scalars['Boolean']>;
  message?: InputMaybe<Scalars['String']>;
  notificationType: NotificationType;
  userId: Scalars['String'];
};

/** Represents an update to a `UserNotification`. Fields that are set will be updated. */
export type UserNotificationPatch = {
  createdAt?: InputMaybe<Scalars['Datetime']>;
  entityId?: InputMaybe<Scalars['UUID']>;
  entityImage?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['UUID']>;
  isRead?: InputMaybe<Scalars['Boolean']>;
  message?: InputMaybe<Scalars['String']>;
  notificationType?: InputMaybe<NotificationType>;
  userId?: InputMaybe<Scalars['String']>;
};

/** A connection to a list of `UserNotification` values. */
export type UserNotificationsConnection = {
  __typename?: 'UserNotificationsConnection';
  /** A list of edges which contains the `UserNotification` and cursor to aid in pagination. */
  edges: Array<UserNotificationsEdge>;
  /** A list of `UserNotification` objects. */
  nodes: Array<UserNotification>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserNotification` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserNotification` edge in the connection. */
export type UserNotificationsEdge = {
  __typename?: 'UserNotificationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserNotification` at the end of the edge. */
  node: UserNotification;
};

/** Methods to use when ordering `UserNotification`. */
export enum UserNotificationsOrderBy {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  EntityIdAsc = 'ENTITY_ID_ASC',
  EntityIdDesc = 'ENTITY_ID_DESC',
  EntityImageAsc = 'ENTITY_IMAGE_ASC',
  EntityImageDesc = 'ENTITY_IMAGE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsReadAsc = 'IS_READ_ASC',
  IsReadDesc = 'IS_READ_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  Natural = 'NATURAL',
  NotificationTypeAsc = 'NOTIFICATION_TYPE_ASC',
  NotificationTypeDesc = 'NOTIFICATION_TYPE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** Represents an update to a `User`. Fields that are set will be updated. */
export type UserPatch = {
  id?: InputMaybe<Scalars['String']>;
};

export type UserWatchStatus = Node & {
  __typename?: 'UserWatchStatus';
  /** Reads a single `Anime` that is related to this `UserWatchStatus`. */
  anime?: Maybe<Anime>;
  animeId: Scalars['UUID'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** Reads a single `User` that is related to this `UserWatchStatus`. */
  user?: Maybe<User>;
  userEpisodesWatched: Scalars['Int'];
  userId: Scalars['String'];
  watchStatus?: Maybe<WatchStatusTypes>;
};

/**
 * A condition to be used against `UserWatchStatus` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserWatchStatusCondition = {
  /** Checks for equality with the object’s `animeId` field. */
  animeId?: InputMaybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `userEpisodesWatched` field. */
  userEpisodesWatched?: InputMaybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['String']>;
  /** Checks for equality with the object’s `watchStatus` field. */
  watchStatus?: InputMaybe<WatchStatusTypes>;
};

/** A filter to be used against `UserWatchStatus` object types. All fields are combined with a logical ‘and.’ */
export type UserWatchStatusFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserWatchStatusFilter>>;
  /** Filter by the object’s `animeId` field. */
  animeId?: InputMaybe<UuidFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserWatchStatusFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserWatchStatusFilter>>;
  /** Filter by the object’s `userEpisodesWatched` field. */
  userEpisodesWatched?: InputMaybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `watchStatus` field. */
  watchStatus?: InputMaybe<WatchStatusTypesFilter>;
};

/** An input for mutations affecting `UserWatchStatus` */
export type UserWatchStatusInput = {
  animeId: Scalars['UUID'];
  userEpisodesWatched?: InputMaybe<Scalars['Int']>;
  userId: Scalars['String'];
  watchStatus?: InputMaybe<WatchStatusTypes>;
};

/** Represents an update to a `UserWatchStatus`. Fields that are set will be updated. */
export type UserWatchStatusPatch = {
  animeId?: InputMaybe<Scalars['UUID']>;
  userEpisodesWatched?: InputMaybe<Scalars['Int']>;
  userId?: InputMaybe<Scalars['String']>;
  watchStatus?: InputMaybe<WatchStatusTypes>;
};

/** A connection to a list of `UserWatchStatus` values. */
export type UserWatchStatusesConnection = {
  __typename?: 'UserWatchStatusesConnection';
  /** A list of edges which contains the `UserWatchStatus` and cursor to aid in pagination. */
  edges: Array<UserWatchStatusesEdge>;
  /** A list of `UserWatchStatus` objects. */
  nodes: Array<UserWatchStatus>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserWatchStatus` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserWatchStatus` edge in the connection. */
export type UserWatchStatusesEdge = {
  __typename?: 'UserWatchStatusesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserWatchStatus` at the end of the edge. */
  node: UserWatchStatus;
};

/** Methods to use when ordering `UserWatchStatus`. */
export enum UserWatchStatusesOrderBy {
  AnimeByAnimeIdAgeRatingTypeAsc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_ASC',
  AnimeByAnimeIdAgeRatingTypeDesc = 'ANIME_BY_ANIME_ID__AGE_RATING_TYPE_DESC',
  AnimeByAnimeIdAiringStatusTypeAsc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_ASC',
  AnimeByAnimeIdAiringStatusTypeDesc = 'ANIME_BY_ANIME_ID__AIRING_STATUS_TYPE_DESC',
  AnimeByAnimeIdAverageWatcherRatingAsc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_ASC',
  AnimeByAnimeIdAverageWatcherRatingDesc = 'ANIME_BY_ANIME_ID__AVERAGE_WATCHER_RATING_DESC',
  AnimeByAnimeIdCoverImageAsc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_ASC',
  AnimeByAnimeIdCoverImageDesc = 'ANIME_BY_ANIME_ID__COVER_IMAGE_DESC',
  AnimeByAnimeIdDescriptionAsc = 'ANIME_BY_ANIME_ID__DESCRIPTION_ASC',
  AnimeByAnimeIdDescriptionDesc = 'ANIME_BY_ANIME_ID__DESCRIPTION_DESC',
  AnimeByAnimeIdDurationAsc = 'ANIME_BY_ANIME_ID__DURATION_ASC',
  AnimeByAnimeIdDurationDesc = 'ANIME_BY_ANIME_ID__DURATION_DESC',
  AnimeByAnimeIdEndBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdEndBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__END_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdIdAsc = 'ANIME_BY_ANIME_ID__ID_ASC',
  AnimeByAnimeIdIdDesc = 'ANIME_BY_ANIME_ID__ID_DESC',
  AnimeByAnimeIdMalIdAsc = 'ANIME_BY_ANIME_ID__MAL_ID_ASC',
  AnimeByAnimeIdMalIdDesc = 'ANIME_BY_ANIME_ID__MAL_ID_DESC',
  AnimeByAnimeIdMediaTypeAsc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_ASC',
  AnimeByAnimeIdMediaTypeDesc = 'ANIME_BY_ANIME_ID__MEDIA_TYPE_DESC',
  AnimeByAnimeIdNumberOfEpisodesAsc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_ASC',
  AnimeByAnimeIdNumberOfEpisodesDesc = 'ANIME_BY_ANIME_ID__NUMBER_OF_EPISODES_DESC',
  AnimeByAnimeIdOfficialWebsiteAsc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_ASC',
  AnimeByAnimeIdOfficialWebsiteDesc = 'ANIME_BY_ANIME_ID__OFFICIAL_WEBSITE_DESC',
  AnimeByAnimeIdSeasonAsc = 'ANIME_BY_ANIME_ID__SEASON_ASC',
  AnimeByAnimeIdSeasonDesc = 'ANIME_BY_ANIME_ID__SEASON_DESC',
  AnimeByAnimeIdSeasonYearAsc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_ASC',
  AnimeByAnimeIdSeasonYearDesc = 'ANIME_BY_ANIME_ID__SEASON_YEAR_DESC',
  AnimeByAnimeIdSourceMaterialTypeAsc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_ASC',
  AnimeByAnimeIdSourceMaterialTypeDesc = 'ANIME_BY_ANIME_ID__SOURCE_MATERIAL_TYPE_DESC',
  AnimeByAnimeIdStartBroadcastDatetimeAsc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_ASC',
  AnimeByAnimeIdStartBroadcastDatetimeDesc = 'ANIME_BY_ANIME_ID__START_BROADCAST_DATETIME_DESC',
  AnimeByAnimeIdTitleAsc = 'ANIME_BY_ANIME_ID__TITLE_ASC',
  AnimeByAnimeIdTitleDesc = 'ANIME_BY_ANIME_ID__TITLE_DESC',
  AnimeByAnimeIdTwitterHandleAsc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_ASC',
  AnimeByAnimeIdTwitterHandleDesc = 'ANIME_BY_ANIME_ID__TWITTER_HANDLE_DESC',
  AnimeByAnimeIdYoutubeTrailerIdAsc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_ASC',
  AnimeByAnimeIdYoutubeTrailerIdDesc = 'ANIME_BY_ANIME_ID__YOUTUBE_TRAILER_ID_DESC',
  AnimeIdAsc = 'ANIME_ID_ASC',
  AnimeIdDesc = 'ANIME_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserEpisodesWatchedAsc = 'USER_EPISODES_WATCHED_ASC',
  UserEpisodesWatchedDesc = 'USER_EPISODES_WATCHED_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  WatchStatusAsc = 'WATCH_STATUS_ASC',
  WatchStatusDesc = 'WATCH_STATUS_DESC'
}

/** A connection to a list of `User` values. */
export type UsersConnection = {
  __typename?: 'UsersConnection';
  /** A list of edges which contains the `User` and cursor to aid in pagination. */
  edges: Array<UsersEdge>;
  /** A list of `User` objects. */
  nodes: Array<User>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `User` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `User` edge in the connection. */
export type UsersEdge = {
  __typename?: 'UsersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `User` at the end of the edge. */
  node: User;
};

/** Methods to use when ordering `User`. */
export enum UsersOrderBy {
  AnimeListsByUserIdCountAsc = 'ANIME_LISTS_BY_USER_ID__COUNT_ASC',
  AnimeListsByUserIdCountDesc = 'ANIME_LISTS_BY_USER_ID__COUNT_DESC',
  AnimeUserScoresByUserIdCountAsc = 'ANIME_USER_SCORES_BY_USER_ID__COUNT_ASC',
  AnimeUserScoresByUserIdCountDesc = 'ANIME_USER_SCORES_BY_USER_ID__COUNT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserAnimeByUserIdCountAsc = 'USER_ANIME_BY_USER_ID__COUNT_ASC',
  UserAnimeByUserIdCountDesc = 'USER_ANIME_BY_USER_ID__COUNT_DESC',
  UserNotificationsByUserIdCountAsc = 'USER_NOTIFICATIONS_BY_USER_ID__COUNT_ASC',
  UserNotificationsByUserIdCountDesc = 'USER_NOTIFICATIONS_BY_USER_ID__COUNT_DESC',
  UserWatchStatusesByUserIdCountAsc = 'USER_WATCH_STATUSES_BY_USER_ID__COUNT_ASC',
  UserWatchStatusesByUserIdCountDesc = 'USER_WATCH_STATUSES_BY_USER_ID__COUNT_DESC'
}

export enum WatchStatusTypes {
  Completed = 'COMPLETED',
  Dropped = 'DROPPED',
  NotWatched = 'NOT_WATCHED',
  Paused = 'PAUSED',
  PlanToWatch = 'PLAN_TO_WATCH',
  Rewatching = 'REWATCHING',
  Watching = 'WATCHING'
}

/** A filter to be used against WatchStatusTypes fields. All fields are combined with a logical ‘and.’ */
export type WatchStatusTypesFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<WatchStatusTypes>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<WatchStatusTypes>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<WatchStatusTypes>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<WatchStatusTypes>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<WatchStatusTypes>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<WatchStatusTypes>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<WatchStatusTypes>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<WatchStatusTypes>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<WatchStatusTypes>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<WatchStatusTypes>>;
};

export type AnimeCardFragmentFragment = { __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } };

export type AnimeListFragmentFragment = { __typename?: 'AnimeList', id: any, nodeId: string, privacy: AnimeListPrivacy, title: string };

export type SearchResultFragmentFragment = { __typename?: 'SearchResult', title?: string | null, id?: any | null, malId?: number | null, mediaType?: string | null, numberOfEpisodes?: number | null, season?: string | null, seasonYear?: number | null, sourceMaterialType?: string | null, startBroadcastDatetime?: any | null, ageRatingType?: string | null, airingStatusType?: string | null, averageWatcherRating?: any | null, coverImage?: string | null, description?: string | null, duration?: number | null, endBroadcastDatetime?: any | null, userEpisodeCount?: number | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null };

export type CustomAnimeListFragmentFragment = { __typename?: 'CustomAnimeList', id?: string | null, animeId?: any | null, averageWatcherRating?: any | null, imageUrl?: string | null, listName?: string | null, mediaType?: string | null, numberOfEpisodes?: number | null, title?: string | null, userEpisodesWatched?: number | null, userScore?: any | null, watchStatus?: string | null, animeIndex?: string | null };

export type UserListAnimeFragmentFragment = { __typename?: 'UserListAnime', id?: any | null, title?: string | null, coverImage?: string | null, averageWatcherRating?: any | null, airingStatusType?: string | null, numberOfEpisodes?: any | null, startBroadcastDatetime?: any | null, userEpisodeCount?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null };

export type ChangeUsernameMutationVariables = Exact<{
  usernameInput: Scalars['String'];
  clientMutationId?: InputMaybe<Scalars['String']>;
}>;


export type ChangeUsernameMutation = { __typename?: 'Mutation', changeUsername?: { __typename?: 'ChangeUsernamePayload', query?: { __typename?: 'Query', me?: { __typename?: 'MeType', email?: string | null, role?: string | null, userId?: string | null, username?: string | null } | null } | null } | null };

export type UpdateWatchStatusMutationVariables = Exact<{
  watchStatus: WatchStatusTypes;
  userId: Scalars['String'];
  animeId: Scalars['UUID'];
}>;


export type UpdateWatchStatusMutation = { __typename?: 'Mutation', updateUserWatchStatus?: { __typename?: 'UpdateUserWatchStatusPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null } | null } | null };

export type UpdateUserAnimeScoreMutationVariables = Exact<{
  animeId: Scalars['UUID'];
  userScore: Scalars['Int'];
}>;


export type UpdateUserAnimeScoreMutation = { __typename?: 'Mutation', insertOrUpdateAnimeUserScore?: { __typename?: 'InsertOrUpdateAnimeUserScorePayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null } | null } | null };

export type UpdateUserEpisodeCountMutationVariables = Exact<{
  animeId: Scalars['UUID'];
  userEpisodesWatched: Scalars['Int'];
  userId: Scalars['String'];
}>;


export type UpdateUserEpisodeCountMutation = { __typename?: 'Mutation', updateUserWatchStatus?: { __typename?: 'UpdateUserWatchStatusPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null } | null } | null };

export type AddAnimeToUserAnimeListMutationVariables = Exact<{
  animeListId: Scalars['UUID'];
  animeId: Scalars['UUID'];
}>;


export type AddAnimeToUserAnimeListMutation = { __typename?: 'Mutation', createUserAnimeList?: { __typename?: 'CreateUserAnimeListPayload', animeList?: { __typename?: 'AnimeList', id: any, nodeId: string, privacy: AnimeListPrivacy, title: string } | null } | null };

export type DeleteAnimeFromListMutationVariables = Exact<{
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
}>;


export type DeleteAnimeFromListMutation = { __typename?: 'Mutation', deleteUserAnimeListByAnimeListIdAndAnimeId?: { __typename?: 'DeleteUserAnimeListPayload', clientMutationId?: string | null, deletedUserAnimeListNodeId?: string | null, query?: { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null } | null } | null };

export type AddAnimeToListMutationVariables = Exact<{
  inputAnimeId: Scalars['UUID'];
  inputAnimeListId: Scalars['UUID'];
  inputAnimeIndex: Scalars['String'];
}>;


export type AddAnimeToListMutation = { __typename?: 'Mutation', insertAnimeToUserList?: { __typename?: 'InsertAnimeToUserListPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null } | null } | null };

export type CreateNewListMutationVariables = Exact<{
  userId: Scalars['String'];
  title: Scalars['String'];
}>;


export type CreateNewListMutation = { __typename?: 'Mutation', createAnimeList?: { __typename?: 'CreateAnimeListPayload', animeList?: { __typename?: 'AnimeList', id: any, nodeId: string, privacy: AnimeListPrivacy, title: string } | null } | null };

export type UpdateUserAnimeListMutationVariables = Exact<{
  animeListId: Scalars['UUID'];
  animeId: Scalars['UUID'];
}>;


export type UpdateUserAnimeListMutation = { __typename?: 'Mutation', updateUserAnimeListByAnimeListIdAndAnimeId?: { __typename?: 'UpdateUserAnimeListPayload', clientMutationId?: string | null } | null };

export type UpdateUserAnimeWatchStatusMutationVariables = Exact<{
  userId: Scalars['String'];
  animeId: Scalars['UUID'];
  watchStatus: WatchStatusTypes;
}>;


export type UpdateUserAnimeWatchStatusMutation = { __typename?: 'Mutation', updateUserWatchStatus?: { __typename?: 'UpdateUserWatchStatusPayload', clientMutationId?: string | null } | null };

export type UpsertUserWatchStatusMutationVariables = Exact<{
  watchStatus: WatchStatusTypes;
  userId: Scalars['String'];
  animeId: Scalars['UUID'];
}>;


export type UpsertUserWatchStatusMutation = { __typename?: 'Mutation', upsertUserWatchStatus?: { __typename?: 'UpsertUserWatchStatusPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null } | null } | null };

export type CreateNewListAddAnimeMutationVariables = Exact<{
  animeidinput: Scalars['UUID'];
}>;


export type CreateNewListAddAnimeMutation = { __typename?: 'Mutation', createNewListAddAnime?: { __typename?: 'CreateNewListAddAnimePayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animeLists?: { __typename?: 'AnimeListsConnection', nodes: Array<{ __typename?: 'AnimeList', id: any, nodeId: string, privacy: AnimeListPrivacy, title: string }> } | null } | null } | null };

export type UpdateListIndexMutationVariables = Exact<{
  animeId: Scalars['UUID'];
  animeListId: Scalars['UUID'];
  animeIndex: Scalars['String'];
}>;


export type UpdateListIndexMutation = { __typename?: 'Mutation', updateUserAnimeListByAnimeListIdAndAnimeId?: { __typename?: 'UpdateUserAnimeListPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', userCustomAnimeList?: { __typename?: 'CustomAnimeListsConnection', nodes: Array<{ __typename?: 'CustomAnimeList', id?: string | null, animeId?: any | null, averageWatcherRating?: any | null, imageUrl?: string | null, listName?: string | null, mediaType?: string | null, numberOfEpisodes?: number | null, title?: string | null, userEpisodesWatched?: number | null, userScore?: any | null, watchStatus?: string | null, animeIndex?: string | null }> } | null } | null } | null };

export type DeleteUserAnimeListMutationVariables = Exact<{
  listId: Scalars['UUID'];
}>;


export type DeleteUserAnimeListMutation = { __typename?: 'Mutation', deleteAnimeList?: { __typename?: 'DeleteAnimeListPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animeLists?: { __typename?: 'AnimeListsConnection', nodes: Array<{ __typename?: 'AnimeList', id: any, nodeId: string, privacy: AnimeListPrivacy, title: string }> } | null } | null } | null };

export type UpdateUserAnimeListTitleMutationVariables = Exact<{
  listId: Scalars['UUID'];
  title: Scalars['String'];
}>;


export type UpdateUserAnimeListTitleMutation = { __typename?: 'Mutation', updateAnimeList?: { __typename?: 'UpdateAnimeListPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', animeLists?: { __typename?: 'AnimeListsConnection', nodes: Array<{ __typename?: 'AnimeList', id: any, nodeId: string, privacy: AnimeListPrivacy, title: string }> } | null } | null } | null };

export type NotificationReadMutationVariables = Exact<{
  id: Scalars['UUID'];
}>;


export type NotificationReadMutation = { __typename?: 'Mutation', updateUserNotification?: { __typename?: 'UpdateUserNotificationPayload', clientMutationId?: string | null, query?: { __typename?: 'Query', allNotifications?: { __typename?: 'UserNotificationsConnection', totalCount: number, nodes: Array<{ __typename?: 'UserNotification', createdAt?: any | null, entityId: any, entityImage?: string | null, id: any, isRead?: boolean | null, message?: string | null, nodeId: string, notificationType: NotificationType }> } | null, airingNotifications?: { __typename?: 'UserNotificationsConnection', totalCount: number, nodes: Array<{ __typename?: 'UserNotification', createdAt?: any | null, entityId: any, entityImage?: string | null, id: any, isRead?: boolean | null, message?: string | null, nodeId: string, notificationType: NotificationType }> } | null } | null } | null };

export type IsUsernameTakenQueryVariables = Exact<{
  usernameInput: Scalars['String'];
}>;


export type IsUsernameTakenQuery = { __typename?: 'Query', isUsernameTaken?: boolean | null };

export type CurrentlyAiringContinuedQueryVariables = Exact<{
  limit: Scalars['Int'];
  currentSeason: Season;
  seasonYear: Scalars['Int'];
}>;


export type CurrentlyAiringContinuedQuery = { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null };

export type CurrentlyAiringQueryVariables = Exact<{
  limit: Scalars['Int'];
  currentSeason: Season;
  seasonYear: Scalars['Int'];
}>;


export type CurrentlyAiringQuery = { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null };

export type HighestRatedAnimesQueryVariables = Exact<{
  limit: Scalars['Int'];
}>;


export type HighestRatedAnimesQuery = { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null };

export type UserListsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserListsQuery = { __typename?: 'Query', animeLists?: { __typename?: 'AnimeListsConnection', nodes: Array<{ __typename?: 'AnimeList', id: any, nodeId: string, privacy: AnimeListPrivacy, title: string }> } | null };

export type WeeklyAnimesQueryVariables = Exact<{
  userWatchStatus?: InputMaybe<StringFilter>;
}>;


export type WeeklyAnimesQuery = { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null };

export type GetAnimeQueryVariables = Exact<{
  animeId: Scalars['UUID'];
  voiceActorLanguage: LanguageType;
  afterCursor?: InputMaybe<Scalars['Cursor']>;
  numOfAnimeToDisplay: Scalars['Int'];
  numOfStaffToDisplay: Scalars['Int'];
  StaffCursor?: InputMaybe<Scalars['Cursor']>;
}>;


export type GetAnimeQuery = { __typename?: 'Query', anime?: { __typename?: 'Anime', ageRatingType?: AgeRatingTypes | null, description?: string | null, duration?: number | null, endBroadcastDatetime?: any | null, mediaType?: MediaTypes | null, season?: Season | null, seasonYear?: number | null, sourceMaterialType?: SourceMaterialTypes | null, id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', id: any, genre: string }> }, licensorList: { __typename?: 'LicensorsConnection', nodes: Array<{ __typename?: 'Licensor', id: any, licensor: string }> }, producerList: { __typename?: 'ProducersConnection', nodes: Array<{ __typename?: 'Producer', id: any, producer: string }> }, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, alternateAnimeNames: { __typename?: 'AlternateAnimeNamesConnection', nodes: Array<{ __typename?: 'AlternateAnimeName', id: any, name: string }> }, animeCharacters: { __typename?: 'AnimeCharactersConnection', totalCount: number, nodes: Array<{ __typename?: 'AnimeCharacter', nodeId: string, language: LanguageType, characterRole?: { __typename?: 'CharacterRole', role: string, id: any } | null, person?: { __typename?: 'Person', firstName: string, lastName?: string | null, id: any, personImage?: { __typename?: 'Image', url: string } | null } | null, character?: { __typename?: 'Character', id: any, name: string, characterImage?: { __typename?: 'Image', url: string } | null } | null }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean, endCursor?: any | null, startCursor?: any | null } }, animeStaffs: { __typename?: 'AnimeStaffConnection', totalCount: number, nodes: Array<{ __typename?: 'AnimeStaff', nodeId: string, person?: { __typename?: 'Person', id: any, firstName: string, lastName?: string | null, personImage?: { __typename?: 'Image', url: string } | null } | null, staffRole?: { __typename?: 'StaffRole', role: string } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null } } } | null };

export type UserCustomAnimeListQueryVariables = Exact<{
  listId: Scalars['UUID'];
}>;


export type UserCustomAnimeListQuery = { __typename?: 'Query', userCustomAnimeList?: { __typename?: 'CustomAnimeListsConnection', nodes: Array<{ __typename?: 'CustomAnimeList', id?: string | null, animeId?: any | null, averageWatcherRating?: any | null, imageUrl?: string | null, listName?: string | null, mediaType?: string | null, numberOfEpisodes?: number | null, title?: string | null, userEpisodesWatched?: number | null, userScore?: any | null, watchStatus?: string | null, animeIndex?: string | null }> } | null };

export type GetLastItemInCustomListQueryVariables = Exact<{
  animeListId: Scalars['UUID'];
}>;


export type GetLastItemInCustomListQuery = { __typename?: 'Query', userAnimeLists?: { __typename?: 'UserAnimeListsConnection', nodes: Array<{ __typename?: 'UserAnimeList', animeIndex: string }> } | null };

export type UserCustomAnimeListByWatchStatusQueryVariables = Exact<{
  watchStatusType: Scalars['String'];
}>;


export type UserCustomAnimeListByWatchStatusQuery = { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, title: string, coverImage?: string | null, numberOfEpisodes?: number | null, averageWatcherRating?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null, userEpisodeCount?: any | null, startBroadcastDatetime?: any | null, airingStatusType?: AiringStatusTypes | null, description?: string | null, mediaType?: MediaTypes | null, duration?: number | null, season?: Season | null, seasonYear?: number | null, studioList: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> }, genreList: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } }> } | null };

export type GetGenresQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGenresQuery = { __typename?: 'Query', genres?: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } | null };

export type GetCharactersQueryVariables = Exact<{
  like?: InputMaybe<Scalars['String']>;
}>;


export type GetCharactersQuery = { __typename?: 'Query', characters?: { __typename?: 'CharactersConnection', totalCount: number, nodes: Array<{ __typename?: 'Character', id: any, name: string, characterImage?: { __typename?: 'Image', url: string } | null }> } | null };

export type GetPeopleQueryVariables = Exact<{
  like?: InputMaybe<Scalars['String']>;
}>;


export type GetPeopleQuery = { __typename?: 'Query', people?: { __typename?: 'PeopleConnection', nodes: Array<{ __typename?: 'Person', id: any, firstName: string, lastName?: string | null, personImage?: { __typename?: 'Image', url: string } | null }> } | null };

export type GetStudiosQueryVariables = Exact<{
  like?: InputMaybe<Scalars['String']>;
}>;


export type GetStudiosQuery = { __typename?: 'Query', studios?: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', id: any, studio: string }> } | null };

export type GetRelatedMediaQueryVariables = Exact<{
  like?: InputMaybe<Scalars['String']>;
}>;


export type GetRelatedMediaQuery = { __typename?: 'Query', animes?: { __typename?: 'AnimeConnection', nodes: Array<{ __typename?: 'Anime', id: any, mediaType?: MediaTypes | null, title: string, coverImage?: string | null }> } | null };

export type GetProducersQueryVariables = Exact<{
  like?: InputMaybe<Scalars['String']>;
}>;


export type GetProducersQuery = { __typename?: 'Query', producers?: { __typename?: 'ProducersConnection', nodes: Array<{ __typename?: 'Producer', id: any, producer: string }> } | null };

export type GetLicensorsQueryVariables = Exact<{
  like?: InputMaybe<Scalars['String']>;
}>;


export type GetLicensorsQuery = { __typename?: 'Query', licensors?: { __typename?: 'LicensorsConnection', nodes: Array<{ __typename?: 'Licensor', id: any, licensor: string }> } | null };

export type SearchAnimesQueryVariables = Exact<{
  after?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  searchInput?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SearchResultFilter>;
}>;


export type SearchAnimesQuery = { __typename?: 'Query', searchAnimes?: { __typename?: 'SearchResultsConnection', totalCount: number, nodes: Array<{ __typename?: 'SearchResult', altName?: string | null, title?: string | null, id?: any | null, malId?: number | null, mediaType?: string | null, numberOfEpisodes?: number | null, season?: string | null, seasonYear?: number | null, sourceMaterialType?: string | null, startBroadcastDatetime?: any | null, ageRatingType?: string | null, airingStatusType?: string | null, averageWatcherRating?: any | null, coverImage?: string | null, description?: string | null, duration?: number | null, endBroadcastDatetime?: any | null, userEpisodeCount?: number | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: any | null, hasPreviousPage: boolean, startCursor?: any | null } } | null };

export type AdvanceFilterDataQueryVariables = Exact<{ [key: string]: never; }>;


export type AdvanceFilterDataQuery = { __typename?: 'Query', genres?: { __typename?: 'GenresConnection', nodes: Array<{ __typename?: 'Genre', genre: string, id: any }> } | null, mediaFormats?: { __typename?: 'MediaFormatsConnection', nodes: Array<{ __typename?: 'MediaFormat', mediaType?: string | null, id?: any | null }> } | null, airingStatuses?: { __typename?: 'AiringStatusesConnection', nodes: Array<{ __typename?: 'AiringStatus', airingStatusType?: string | null, id?: any | null }> } | null, sourceMaterials?: { __typename?: 'SourceMaterialsConnection', nodes: Array<{ __typename?: 'SourceMaterial', sourceMaterialType?: string | null, id?: any | null }> } | null, producers?: { __typename?: 'ProducersConnection', nodes: Array<{ __typename?: 'Producer', producer: string, id: any }> } | null, studios?: { __typename?: 'StudiosConnection', nodes: Array<{ __typename?: 'Studio', studio: string, id: any }> } | null, ageRatings?: { __typename?: 'AgeRatingsConnection', nodes: Array<{ __typename?: 'AgeRating', ageRatingType?: string | null, id?: any | null }> } | null };

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me?: { __typename?: 'MeType', userId?: string | null, username?: string | null, role?: string | null, email?: string | null } | null };

export type UserAnimeListsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserAnimeListsQuery = { __typename?: 'Query', allUserAnimes?: { __typename?: 'UserAnimeListTypesConnection', nodes: Array<{ __typename?: 'UserAnimeListType', id?: any | null, listId?: any | null, listName?: string | null, title?: string | null, coverImage?: string | null, privacy?: AnimeListPrivacy | null }> } | null };

export type GetUserAnimeListsQueryVariables = Exact<{
  watchStatus: Scalars['String'];
}>;


export type GetUserAnimeListsQuery = { __typename?: 'Query', getUserAnimeLists?: { __typename?: 'UserListsConnection', nodes: Array<{ __typename?: 'UserList', id?: any | null, title?: string | null, userId?: string | null, animes?: Array<{ __typename?: 'UserListAnime', id?: any | null, title?: string | null, coverImage?: string | null, averageWatcherRating?: any | null, airingStatusType?: string | null, numberOfEpisodes?: any | null, startBroadcastDatetime?: any | null, userEpisodeCount?: any | null, userLiked?: boolean | null, userRating?: any | null, userWatchStatus?: string | null } | null> | null }> } | null };

export type UnreadUserNotificationsQueryVariables = Exact<{ [key: string]: never; }>;


export type UnreadUserNotificationsQuery = { __typename?: 'Query', userNotifications?: { __typename?: 'UserNotificationsConnection', totalCount: number, nodes: Array<{ __typename?: 'UserNotification', createdAt?: any | null, entityId: any, entityImage?: string | null, id: any, isRead?: boolean | null, message?: string | null, nodeId: string, notificationType: NotificationType }> } | null };

export type UserNotificationsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserNotificationsQuery = { __typename?: 'Query', allNotifications?: { __typename?: 'UserNotificationsConnection', totalCount: number, nodes: Array<{ __typename?: 'UserNotification', createdAt?: any | null, entityId: any, entityImage?: string | null, id: any, isRead?: boolean | null, message?: string | null, nodeId: string, notificationType: NotificationType }> } | null, airingNotifications?: { __typename?: 'UserNotificationsConnection', totalCount: number, nodes: Array<{ __typename?: 'UserNotification', createdAt?: any | null, entityId: any, entityImage?: string | null, id: any, isRead?: boolean | null, message?: string | null, nodeId: string, notificationType: NotificationType }> } | null };

export type FilterUserNotificationsQueryVariables = Exact<{
  equalTo?: InputMaybe<NotificationType>;
}>;


export type FilterUserNotificationsQuery = { __typename?: 'Query', userNotifications?: { __typename?: 'UserNotificationsConnection', nodes: Array<{ __typename?: 'UserNotification', createdAt?: any | null, entityId: any, entityImage?: string | null, id: any, isRead?: boolean | null, message?: string | null, nodeId: string, notificationType: NotificationType }> } | null };

export type NotificationsSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type NotificationsSubscription = { __typename?: 'Subscription', notificationEvent?: { __typename?: 'NotificationEvent', event?: string | null, notification?: { __typename?: 'UserNotification', createdAt?: any | null, entityId: any, entityImage?: string | null, id: any, isRead?: boolean | null, message?: string | null, nodeId: string, notificationType: NotificationType } | null } | null };

export const AnimeCardFragmentFragmentDoc = gql`
    fragment AnimeCardFragment on Anime {
  id
  title
  coverImage
  numberOfEpisodes
  averageWatcherRating
  userLiked
  userRating
  userWatchStatus
  userEpisodeCount
  startBroadcastDatetime
  airingStatusType
  description
  mediaType
  duration
  season
  seasonYear
  studioList {
    nodes {
      id
      studio
    }
  }
  genreList {
    nodes {
      genre
      id
    }
  }
}
    `;
export const AnimeListFragmentFragmentDoc = gql`
    fragment AnimeListFragment on AnimeList {
  id
  nodeId
  privacy
  title
}
    `;
export const SearchResultFragmentFragmentDoc = gql`
    fragment SearchResultFragment on SearchResult {
  title
  id
  malId
  mediaType
  numberOfEpisodes
  season
  seasonYear
  sourceMaterialType
  startBroadcastDatetime
  ageRatingType
  airingStatusType
  averageWatcherRating
  coverImage
  description
  duration
  endBroadcastDatetime
  userEpisodeCount
  userLiked
  userRating
  userWatchStatus
}
    `;
export const CustomAnimeListFragmentFragmentDoc = gql`
    fragment CustomAnimeListFragment on CustomAnimeList {
  id
  animeId
  averageWatcherRating
  imageUrl
  listName
  mediaType
  numberOfEpisodes
  title
  userEpisodesWatched
  userScore
  watchStatus
  animeIndex
}
    `;
export const UserListAnimeFragmentFragmentDoc = gql`
    fragment UserListAnimeFragment on UserListAnime {
  id
  title
  coverImage
  averageWatcherRating
  airingStatusType
  numberOfEpisodes
  startBroadcastDatetime
  userEpisodeCount
  userLiked
  userRating
  userWatchStatus
}
    `;
export const ChangeUsernameDocument = gql`
    mutation ChangeUsername($usernameInput: String!, $clientMutationId: String = "username changed") {
  changeUsername(
    input: {usernameInput: $usernameInput, clientMutationId: $clientMutationId}
  ) {
    query {
      me {
        email
        role
        userId
        username
      }
    }
  }
}
    `;

export function useChangeUsernameMutation() {
  return Urql.useMutation<ChangeUsernameMutation, ChangeUsernameMutationVariables>(ChangeUsernameDocument);
};
export const UpdateWatchStatusDocument = gql`
    mutation UpdateWatchStatus($watchStatus: WatchStatusTypes!, $userId: String!, $animeId: UUID!) {
  updateUserWatchStatus(
    input: {patch: {animeId: $animeId, userId: $userId, watchStatus: $watchStatus}, userId: $userId, animeId: $animeId, clientMutationId: "UpdatedWatchStatus"}
  ) {
    clientMutationId
    query {
      animes(filter: {id: {equalTo: $animeId}}) {
        nodes {
          ...AnimeCardFragment
        }
      }
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useUpdateWatchStatusMutation() {
  return Urql.useMutation<UpdateWatchStatusMutation, UpdateWatchStatusMutationVariables>(UpdateWatchStatusDocument);
};
export const UpdateUserAnimeScoreDocument = gql`
    mutation UpdateUserAnimeScore($animeId: UUID!, $userScore: Int!) {
  insertOrUpdateAnimeUserScore(
    input: {inputAnimeId: $animeId, inputUserScore: $userScore, clientMutationId: "test"}
  ) {
    clientMutationId
    query {
      animes(filter: {id: {equalTo: $animeId}}) {
        nodes {
          ...AnimeCardFragment
        }
      }
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useUpdateUserAnimeScoreMutation() {
  return Urql.useMutation<UpdateUserAnimeScoreMutation, UpdateUserAnimeScoreMutationVariables>(UpdateUserAnimeScoreDocument);
};
export const UpdateUserEpisodeCountDocument = gql`
    mutation UpdateUserEpisodeCount($animeId: UUID!, $userEpisodesWatched: Int!, $userId: String!) {
  updateUserWatchStatus(
    input: {patch: {userEpisodesWatched: $userEpisodesWatched}, userId: $userId, animeId: $animeId, clientMutationId: "UpdatedUserEpisodeCount"}
  ) {
    query {
      animes(filter: {id: {equalTo: $animeId}}) {
        nodes {
          ...AnimeCardFragment
        }
      }
    }
    clientMutationId
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useUpdateUserEpisodeCountMutation() {
  return Urql.useMutation<UpdateUserEpisodeCountMutation, UpdateUserEpisodeCountMutationVariables>(UpdateUserEpisodeCountDocument);
};
export const AddAnimeToUserAnimeListDocument = gql`
    mutation AddAnimeToUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  createUserAnimeList(
    input: {userAnimeList: {animeListId: $animeListId, animeId: $animeId}}
  ) {
    animeList {
      ...AnimeListFragment
    }
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useAddAnimeToUserAnimeListMutation() {
  return Urql.useMutation<AddAnimeToUserAnimeListMutation, AddAnimeToUserAnimeListMutationVariables>(AddAnimeToUserAnimeListDocument);
};
export const DeleteAnimeFromListDocument = gql`
    mutation DeleteAnimeFromList($animeId: UUID!, $animeListId: UUID!) {
  deleteUserAnimeListByAnimeListIdAndAnimeId(
    input: {animeListId: $animeListId, animeId: $animeId, clientMutationId: "SuccessfulDelete"}
  ) {
    clientMutationId
    deletedUserAnimeListNodeId
    query {
      animes(condition: {id: $animeId}) {
        nodes {
          ...AnimeCardFragment
        }
      }
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useDeleteAnimeFromListMutation() {
  return Urql.useMutation<DeleteAnimeFromListMutation, DeleteAnimeFromListMutationVariables>(DeleteAnimeFromListDocument);
};
export const AddAnimeToListDocument = gql`
    mutation AddAnimeToList($inputAnimeId: UUID!, $inputAnimeListId: UUID!, $inputAnimeIndex: String!) {
  insertAnimeToUserList(
    input: {clientMutationId: "AnimeAddedToList", inputAnimeId: $inputAnimeId, inputAnimeListId: $inputAnimeListId, inputAnimeIndex: $inputAnimeIndex}
  ) {
    clientMutationId
    query {
      animes(condition: {id: $inputAnimeId}) {
        nodes {
          ...AnimeCardFragment
        }
      }
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useAddAnimeToListMutation() {
  return Urql.useMutation<AddAnimeToListMutation, AddAnimeToListMutationVariables>(AddAnimeToListDocument);
};
export const CreateNewListDocument = gql`
    mutation CreateNewList($userId: String!, $title: String!) {
  createAnimeList(input: {animeList: {userId: $userId, title: $title}}) {
    animeList {
      ...AnimeListFragment
    }
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useCreateNewListMutation() {
  return Urql.useMutation<CreateNewListMutation, CreateNewListMutationVariables>(CreateNewListDocument);
};
export const UpdateUserAnimeListDocument = gql`
    mutation updateUserAnimeList($animeListId: UUID!, $animeId: UUID!) {
  updateUserAnimeListByAnimeListIdAndAnimeId(
    input: {patch: {animeListId: $animeListId}, animeListId: $animeListId, animeId: $animeId, clientMutationId: "UpdateAnimeList"}
  ) {
    clientMutationId
  }
}
    `;

export function useUpdateUserAnimeListMutation() {
  return Urql.useMutation<UpdateUserAnimeListMutation, UpdateUserAnimeListMutationVariables>(UpdateUserAnimeListDocument);
};
export const UpdateUserAnimeWatchStatusDocument = gql`
    mutation updateUserAnimeWatchStatus($userId: String!, $animeId: UUID!, $watchStatus: WatchStatusTypes!) {
  updateUserWatchStatus(
    input: {patch: {watchStatus: $watchStatus}, userId: $userId, animeId: $animeId, clientMutationId: "ChangeAnimeWatchStatus"}
  ) {
    clientMutationId
  }
}
    `;

export function useUpdateUserAnimeWatchStatusMutation() {
  return Urql.useMutation<UpdateUserAnimeWatchStatusMutation, UpdateUserAnimeWatchStatusMutationVariables>(UpdateUserAnimeWatchStatusDocument);
};
export const UpsertUserWatchStatusDocument = gql`
    mutation UpsertUserWatchStatus($watchStatus: WatchStatusTypes!, $userId: String!, $animeId: UUID!) {
  upsertUserWatchStatus(
    input: {userWatchStatus: {userId: $userId, animeId: $animeId, watchStatus: $watchStatus}, clientMutationId: "upsertUserWatchStatus"}
  ) {
    clientMutationId
    query {
      animes(filter: {id: {equalTo: $animeId}}) {
        nodes {
          ...AnimeCardFragment
        }
      }
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useUpsertUserWatchStatusMutation() {
  return Urql.useMutation<UpsertUserWatchStatusMutation, UpsertUserWatchStatusMutationVariables>(UpsertUserWatchStatusDocument);
};
export const CreateNewListAddAnimeDocument = gql`
    mutation CreateNewListAddAnime($animeidinput: UUID!) {
  createNewListAddAnime(
    input: {animeidinput: $animeidinput, clientMutationId: "NewListCreatedAndAnimeAdded"}
  ) {
    query {
      animeLists {
        nodes {
          ...AnimeListFragment
        }
      }
    }
    clientMutationId
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useCreateNewListAddAnimeMutation() {
  return Urql.useMutation<CreateNewListAddAnimeMutation, CreateNewListAddAnimeMutationVariables>(CreateNewListAddAnimeDocument);
};
export const UpdateListIndexDocument = gql`
    mutation UpdateListIndex($animeId: UUID!, $animeListId: UUID!, $animeIndex: String!) {
  updateUserAnimeListByAnimeListIdAndAnimeId(
    input: {patch: {animeIndex: $animeIndex}, animeListId: $animeListId, animeId: $animeId, clientMutationId: "UpdatedUserCustomAnimeList"}
  ) {
    query {
      userCustomAnimeList {
        nodes {
          ...CustomAnimeListFragment
        }
      }
    }
    clientMutationId
  }
}
    ${CustomAnimeListFragmentFragmentDoc}`;

export function useUpdateListIndexMutation() {
  return Urql.useMutation<UpdateListIndexMutation, UpdateListIndexMutationVariables>(UpdateListIndexDocument);
};
export const DeleteUserAnimeListDocument = gql`
    mutation DeleteUserAnimeList($listId: UUID!) {
  deleteAnimeList(input: {id: $listId, clientMutationId: "List Deleted"}) {
    clientMutationId
    query {
      animeLists {
        nodes {
          ...AnimeListFragment
        }
      }
    }
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useDeleteUserAnimeListMutation() {
  return Urql.useMutation<DeleteUserAnimeListMutation, DeleteUserAnimeListMutationVariables>(DeleteUserAnimeListDocument);
};
export const UpdateUserAnimeListTitleDocument = gql`
    mutation UpdateUserAnimeListTitle($listId: UUID!, $title: String!) {
  updateAnimeList(
    input: {patch: {title: $title}, id: $listId, clientMutationId: "List Updated"}
  ) {
    query {
      animeLists {
        nodes {
          ...AnimeListFragment
        }
      }
    }
    clientMutationId
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useUpdateUserAnimeListTitleMutation() {
  return Urql.useMutation<UpdateUserAnimeListTitleMutation, UpdateUserAnimeListTitleMutationVariables>(UpdateUserAnimeListTitleDocument);
};
export const NotificationReadDocument = gql`
    mutation NotificationRead($id: UUID!) {
  updateUserNotification(
    input: {patch: {isRead: true}, id: $id, clientMutationId: "notification read"}
  ) {
    clientMutationId
    query {
      allNotifications: userNotifications(
        orderBy: CREATED_AT_DESC
        condition: {isRead: false}
      ) {
        nodes {
          createdAt
          entityId
          entityImage
          id
          isRead
          message
          nodeId
          notificationType
        }
        totalCount
      }
      airingNotifications: userNotifications(
        orderBy: CREATED_AT_DESC
        condition: {isRead: false, notificationType: AIRING}
      ) {
        nodes {
          createdAt
          entityId
          entityImage
          id
          isRead
          message
          nodeId
          notificationType
        }
        totalCount
      }
    }
  }
}
    `;

export function useNotificationReadMutation() {
  return Urql.useMutation<NotificationReadMutation, NotificationReadMutationVariables>(NotificationReadDocument);
};
export const IsUsernameTakenDocument = gql`
    query IsUsernameTaken($usernameInput: String!) {
  isUsernameTaken(usernameInput: $usernameInput)
}
    `;

export function useIsUsernameTakenQuery(options: Omit<Urql.UseQueryArgs<IsUsernameTakenQueryVariables>, 'query'>) {
  return Urql.useQuery<IsUsernameTakenQuery>({ query: IsUsernameTakenDocument, ...options });
};
export const CurrentlyAiringContinuedDocument = gql`
    query CurrentlyAiringContinued($limit: Int!, $currentSeason: Season!, $seasonYear: Int!) {
  animes(
    first: $limit
    filter: {and: {airingStatusType: {equalTo: CURRENTLY_AIRING}, seasonYear: {notEqualTo: $seasonYear}, season: {notEqualTo: $currentSeason}}}
  ) {
    nodes {
      ...AnimeCardFragment
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useCurrentlyAiringContinuedQuery(options: Omit<Urql.UseQueryArgs<CurrentlyAiringContinuedQueryVariables>, 'query'>) {
  return Urql.useQuery<CurrentlyAiringContinuedQuery>({ query: CurrentlyAiringContinuedDocument, ...options });
};
export const CurrentlyAiringDocument = gql`
    query CurrentlyAiring($limit: Int!, $currentSeason: Season!, $seasonYear: Int!) {
  animes(
    first: $limit
    filter: {and: {airingStatusType: {equalTo: CURRENTLY_AIRING}, seasonYear: {equalTo: $seasonYear}, season: {equalTo: $currentSeason}}}
  ) {
    nodes {
      ...AnimeCardFragment
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useCurrentlyAiringQuery(options: Omit<Urql.UseQueryArgs<CurrentlyAiringQueryVariables>, 'query'>) {
  return Urql.useQuery<CurrentlyAiringQuery>({ query: CurrentlyAiringDocument, ...options });
};
export const HighestRatedAnimesDocument = gql`
    query HighestRatedAnimes($limit: Int!) {
  animes(first: $limit, orderBy: AVERAGE_WATCHER_RATING_DESC) {
    nodes {
      ...AnimeCardFragment
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useHighestRatedAnimesQuery(options: Omit<Urql.UseQueryArgs<HighestRatedAnimesQueryVariables>, 'query'>) {
  return Urql.useQuery<HighestRatedAnimesQuery>({ query: HighestRatedAnimesDocument, ...options });
};
export const UserListsDocument = gql`
    query userLists {
  animeLists {
    nodes {
      ...AnimeListFragment
    }
  }
}
    ${AnimeListFragmentFragmentDoc}`;

export function useUserListsQuery(options?: Omit<Urql.UseQueryArgs<UserListsQueryVariables>, 'query'>) {
  return Urql.useQuery<UserListsQuery>({ query: UserListsDocument, ...options });
};
export const WeeklyAnimesDocument = gql`
    query WeeklyAnimes($userWatchStatus: StringFilter = null) {
  animes(
    filter: {airingStatusType: {equalTo: CURRENTLY_AIRING}, userWatchStatus: $userWatchStatus}
  ) {
    nodes {
      ...AnimeCardFragment
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useWeeklyAnimesQuery(options?: Omit<Urql.UseQueryArgs<WeeklyAnimesQueryVariables>, 'query'>) {
  return Urql.useQuery<WeeklyAnimesQuery>({ query: WeeklyAnimesDocument, ...options });
};
export const GetAnimeDocument = gql`
    query GetAnime($animeId: UUID!, $voiceActorLanguage: LanguageType!, $afterCursor: Cursor, $numOfAnimeToDisplay: Int!, $numOfStaffToDisplay: Int!, $StaffCursor: Cursor) {
  anime(id: $animeId) {
    ...AnimeCardFragment
    ageRatingType
    description
    duration
    endBroadcastDatetime
    mediaType
    season
    seasonYear
    sourceMaterialType
    genreList {
      nodes {
        id
        genre
      }
    }
    licensorList {
      nodes {
        id
        licensor
      }
    }
    producerList {
      nodes {
        id
        producer
      }
    }
    studioList {
      nodes {
        id
        studio
      }
    }
    alternateAnimeNames {
      nodes {
        id
        name
      }
    }
    animeCharacters(
      filter: {language: {equalTo: $voiceActorLanguage}}
      first: $numOfAnimeToDisplay
      after: $afterCursor
      orderBy: CHARACTER_ROLE_BY_CHARACTER_ROLE_ID__ROLE_ASC
    ) {
      nodes {
        nodeId
        characterRole {
          role
          id
        }
        person {
          firstName
          lastName
          id
          personImage {
            url
          }
        }
        language
        character {
          id
          name
          characterImage {
            url
          }
        }
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        endCursor
        startCursor
      }
      totalCount
    }
    animeStaffs(after: $StaffCursor, first: $numOfStaffToDisplay) {
      nodes {
        person {
          id
          firstName
          lastName
          personImage {
            url
          }
        }
        staffRole {
          role
        }
        nodeId
      }
      pageInfo {
        endCursor
        hasNextPage
        hasPreviousPage
        startCursor
      }
      totalCount
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useGetAnimeQuery(options: Omit<Urql.UseQueryArgs<GetAnimeQueryVariables>, 'query'>) {
  return Urql.useQuery<GetAnimeQuery>({ query: GetAnimeDocument, ...options });
};
export const UserCustomAnimeListDocument = gql`
    query UserCustomAnimeList($listId: UUID!) {
  userCustomAnimeList(listId: $listId) {
    nodes {
      ...CustomAnimeListFragment
    }
  }
}
    ${CustomAnimeListFragmentFragmentDoc}`;

export function useUserCustomAnimeListQuery(options: Omit<Urql.UseQueryArgs<UserCustomAnimeListQueryVariables>, 'query'>) {
  return Urql.useQuery<UserCustomAnimeListQuery>({ query: UserCustomAnimeListDocument, ...options });
};
export const GetLastItemInCustomListDocument = gql`
    query GetLastItemInCustomList($animeListId: UUID!) {
  userAnimeLists(
    first: 1
    orderBy: ANIME_INDEX_DESC
    condition: {animeListId: $animeListId}
  ) {
    nodes {
      animeIndex
    }
  }
}
    `;

export function useGetLastItemInCustomListQuery(options: Omit<Urql.UseQueryArgs<GetLastItemInCustomListQueryVariables>, 'query'>) {
  return Urql.useQuery<GetLastItemInCustomListQuery>({ query: GetLastItemInCustomListDocument, ...options });
};
export const UserCustomAnimeListByWatchStatusDocument = gql`
    query UserCustomAnimeListByWatchStatus($watchStatusType: String!) {
  animes(filter: {userWatchStatus: {equalTo: $watchStatusType}}) {
    nodes {
      ...AnimeCardFragment
    }
  }
}
    ${AnimeCardFragmentFragmentDoc}`;

export function useUserCustomAnimeListByWatchStatusQuery(options: Omit<Urql.UseQueryArgs<UserCustomAnimeListByWatchStatusQueryVariables>, 'query'>) {
  return Urql.useQuery<UserCustomAnimeListByWatchStatusQuery>({ query: UserCustomAnimeListByWatchStatusDocument, ...options });
};
export const GetGenresDocument = gql`
    query GetGenres {
  genres {
    nodes {
      genre
      id
    }
  }
}
    `;

export function useGetGenresQuery(options?: Omit<Urql.UseQueryArgs<GetGenresQueryVariables>, 'query'>) {
  return Urql.useQuery<GetGenresQuery>({ query: GetGenresDocument, ...options });
};
export const GetCharactersDocument = gql`
    query GetCharacters($like: String = "") {
  characters(filter: {name: {likeInsensitive: $like}}, first: 25) {
    nodes {
      id
      name
      characterImage {
        url
      }
    }
    totalCount
  }
}
    `;

export function useGetCharactersQuery(options?: Omit<Urql.UseQueryArgs<GetCharactersQueryVariables>, 'query'>) {
  return Urql.useQuery<GetCharactersQuery>({ query: GetCharactersDocument, ...options });
};
export const GetPeopleDocument = gql`
    query GetPeople($like: String = "") {
  people(
    filter: {or: [{lastName: {likeInsensitive: $like}}, {firstName: {likeInsensitive: $like}}]}
    first: 25
  ) {
    nodes {
      id
      firstName
      lastName
      personImage {
        url
      }
    }
  }
}
    `;

export function useGetPeopleQuery(options?: Omit<Urql.UseQueryArgs<GetPeopleQueryVariables>, 'query'>) {
  return Urql.useQuery<GetPeopleQuery>({ query: GetPeopleDocument, ...options });
};
export const GetStudiosDocument = gql`
    query GetStudios($like: String) {
  studios(first: 25, filter: {studio: {likeInsensitive: $like}}) {
    nodes {
      id
      studio
    }
  }
}
    `;

export function useGetStudiosQuery(options?: Omit<Urql.UseQueryArgs<GetStudiosQueryVariables>, 'query'>) {
  return Urql.useQuery<GetStudiosQuery>({ query: GetStudiosDocument, ...options });
};
export const GetRelatedMediaDocument = gql`
    query GetRelatedMedia($like: String) {
  animes(first: 25, filter: {allNamesString: {likeInsensitive: $like}}) {
    nodes {
      id
      mediaType
      title
      coverImage
    }
  }
}
    `;

export function useGetRelatedMediaQuery(options?: Omit<Urql.UseQueryArgs<GetRelatedMediaQueryVariables>, 'query'>) {
  return Urql.useQuery<GetRelatedMediaQuery>({ query: GetRelatedMediaDocument, ...options });
};
export const GetProducersDocument = gql`
    query GetProducers($like: String) {
  producers(first: 25, filter: {producer: {likeInsensitive: $like}}) {
    nodes {
      id
      producer
    }
  }
}
    `;

export function useGetProducersQuery(options?: Omit<Urql.UseQueryArgs<GetProducersQueryVariables>, 'query'>) {
  return Urql.useQuery<GetProducersQuery>({ query: GetProducersDocument, ...options });
};
export const GetLicensorsDocument = gql`
    query GetLicensors($like: String) {
  licensors(first: 25, filter: {licensor: {likeInsensitive: $like}}) {
    nodes {
      id
      licensor
    }
  }
}
    `;

export function useGetLicensorsQuery(options?: Omit<Urql.UseQueryArgs<GetLicensorsQueryVariables>, 'query'>) {
  return Urql.useQuery<GetLicensorsQuery>({ query: GetLicensorsDocument, ...options });
};
export const SearchAnimesDocument = gql`
    query SearchAnimes($after: Cursor = null, $first: Int = null, $searchInput: String, $filter: SearchResultFilter = {}) {
  searchAnimes(
    searchInput: $searchInput
    after: $after
    first: $first
    filter: $filter
  ) {
    nodes {
      altName
      ...SearchResultFragment
    }
    pageInfo {
      hasNextPage
      endCursor
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}
    ${SearchResultFragmentFragmentDoc}`;

export function useSearchAnimesQuery(options?: Omit<Urql.UseQueryArgs<SearchAnimesQueryVariables>, 'query'>) {
  return Urql.useQuery<SearchAnimesQuery>({ query: SearchAnimesDocument, ...options });
};
export const AdvanceFilterDataDocument = gql`
    query AdvanceFilterData {
  genres(orderBy: GENRE_ASC) {
    nodes {
      genre
      id
    }
  }
  mediaFormats {
    nodes {
      mediaType
      id
    }
  }
  airingStatuses {
    nodes {
      airingStatusType
      id
    }
  }
  sourceMaterials {
    nodes {
      sourceMaterialType
      id
    }
  }
  producers(orderBy: PRODUCER_ASC) {
    nodes {
      producer
      id
    }
  }
  studios(orderBy: STUDIO_ASC) {
    nodes {
      studio
      id
    }
  }
  ageRatings {
    nodes {
      ageRatingType
      id
    }
  }
}
    `;

export function useAdvanceFilterDataQuery(options?: Omit<Urql.UseQueryArgs<AdvanceFilterDataQueryVariables>, 'query'>) {
  return Urql.useQuery<AdvanceFilterDataQuery>({ query: AdvanceFilterDataDocument, ...options });
};
export const MeDocument = gql`
    query Me {
  me {
    userId
    username
    role
    email
  }
}
    `;

export function useMeQuery(options?: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'>) {
  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });
};
export const UserAnimeListsDocument = gql`
    query UserAnimeLists {
  allUserAnimes {
    nodes {
      id
      listId
      listName
      title
      coverImage
      privacy
    }
  }
}
    `;

export function useUserAnimeListsQuery(options?: Omit<Urql.UseQueryArgs<UserAnimeListsQueryVariables>, 'query'>) {
  return Urql.useQuery<UserAnimeListsQuery>({ query: UserAnimeListsDocument, ...options });
};
export const GetUserAnimeListsDocument = gql`
    query GetUserAnimeLists($watchStatus: String!) {
  getUserAnimeLists(watchStatusInput: $watchStatus) {
    nodes {
      id
      title
      userId
      animes {
        ...UserListAnimeFragment
      }
    }
  }
}
    ${UserListAnimeFragmentFragmentDoc}`;

export function useGetUserAnimeListsQuery(options: Omit<Urql.UseQueryArgs<GetUserAnimeListsQueryVariables>, 'query'>) {
  return Urql.useQuery<GetUserAnimeListsQuery>({ query: GetUserAnimeListsDocument, ...options });
};
export const UnreadUserNotificationsDocument = gql`
    query UnreadUserNotifications {
  userNotifications(orderBy: CREATED_AT_DESC, condition: {isRead: false}) {
    nodes {
      createdAt
      entityId
      entityImage
      id
      isRead
      message
      nodeId
      notificationType
    }
    totalCount
  }
}
    `;

export function useUnreadUserNotificationsQuery(options?: Omit<Urql.UseQueryArgs<UnreadUserNotificationsQueryVariables>, 'query'>) {
  return Urql.useQuery<UnreadUserNotificationsQuery>({ query: UnreadUserNotificationsDocument, ...options });
};
export const UserNotificationsDocument = gql`
    query UserNotifications {
  allNotifications: userNotifications(
    orderBy: CREATED_AT_DESC
    condition: {isRead: false}
  ) {
    nodes {
      createdAt
      entityId
      entityImage
      id
      isRead
      message
      nodeId
      notificationType
    }
    totalCount
  }
  airingNotifications: userNotifications(
    orderBy: CREATED_AT_DESC
    condition: {isRead: false, notificationType: AIRING}
  ) {
    nodes {
      createdAt
      entityId
      entityImage
      id
      isRead
      message
      nodeId
      notificationType
    }
    totalCount
  }
}
    `;

export function useUserNotificationsQuery(options?: Omit<Urql.UseQueryArgs<UserNotificationsQueryVariables>, 'query'>) {
  return Urql.useQuery<UserNotificationsQuery>({ query: UserNotificationsDocument, ...options });
};
export const FilterUserNotificationsDocument = gql`
    query FilterUserNotifications($equalTo: NotificationType = null) {
  userNotifications(
    orderBy: CREATED_AT_DESC
    filter: {notificationType: {equalTo: $equalTo}}
  ) {
    nodes {
      createdAt
      entityId
      entityImage
      id
      isRead
      message
      nodeId
      notificationType
    }
  }
}
    `;

export function useFilterUserNotificationsQuery(options?: Omit<Urql.UseQueryArgs<FilterUserNotificationsQueryVariables>, 'query'>) {
  return Urql.useQuery<FilterUserNotificationsQuery>({ query: FilterUserNotificationsDocument, ...options });
};
export const NotificationsDocument = gql`
    subscription Notifications {
  notificationEvent {
    event
    notification {
      createdAt
      entityId
      entityImage
      id
      isRead
      message
      nodeId
      notificationType
    }
  }
}
    `;

export function useNotificationsSubscription<TData = NotificationsSubscription>(options: Omit<Urql.UseSubscriptionArgs<NotificationsSubscriptionVariables>, 'query'> = {}, handler?: Urql.SubscriptionHandler<NotificationsSubscription, TData>) {
  return Urql.useSubscription<NotificationsSubscription, TData, NotificationsSubscriptionVariables>({ query: NotificationsDocument, ...options }, handler);
};
import { IntrospectionQuery } from 'graphql';
export default {
  "__schema": {
    "queryType": {
      "name": "Query"
    },
    "mutationType": {
      "name": "Mutation"
    },
    "subscriptionType": {
      "name": "Subscription"
    },
    "types": [
      {
        "kind": "OBJECT",
        "name": "AddAnimeToListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AgeRating",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AgeRatingsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AgeRatingsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AgeRating",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AgeRatingsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AgeRating",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AiringStatus",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AiringStatusesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AiringStatusesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AiringStatus",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AiringStatusesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AiringStatus",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AlternateAnimeName",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AlternateAnimeNamesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AlternateAnimeNamesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AlternateAnimeName",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AlternateAnimeNamesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AlternateAnimeName",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Anime",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "airingStatusType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "allNamesString",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "alternateAnimeNames",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AlternateAnimeNamesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "alternateNames",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AlternateAnimeNamesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenres",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeGenresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeLicensorsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducers",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeProducersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStaffConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStreamingOns",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStreamingOnsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudios",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStudiosConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScores",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeUserScoresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterPreview",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "StaffResultsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "coverImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "duration",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "endBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genreList",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "GenresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "licensorList",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "LicensorsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "officialWebsite",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producerList",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ProducersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "season",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "seasonYear",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "studioList",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "StudiosConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "twitterHandle",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userAnimeLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeListsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userEpisodeCount",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userLiked",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userWatchStatuses",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserWatchStatusesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "youtubeTrailerId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeCharacter",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeCharactersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeCharactersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeCharacter",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeCharactersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharacter",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Anime",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Anime",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeGenre",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeGenresConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeGenresEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeGenre",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeGenresEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeGenre",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeImage",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeImage",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeImage",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeLicensor",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeLicensorsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeLicensorsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeLicensor",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeLicensorsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeLicensor",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeList",
        "fields": [
          {
            "name": "createdAt",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "isDefault",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "privacy",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeListsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeListsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeListsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeList",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeListsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeList",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeProducer",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeProducersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeProducersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeProducer",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeProducersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeProducer",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStaff",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStaffConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStaffEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStaff",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStaffEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStaff",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStreamingOn",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "streamServiceId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStreamingOnsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStreamingOnsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStreamingOn",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStreamingOnsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStreamingOn",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStudio",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStudiosConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStudiosEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeStudio",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeStudiosEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStudio",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeUserScore",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userScore",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "AnimeUserScoresConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeUserScoresEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AnimeUserScore",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AnimeUserScoresEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeUserScore",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AvailableLanguage",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AvailableLanguagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AvailableLanguagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "AvailableLanguage",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "AvailableLanguagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AvailableLanguage",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ChangeUsernamePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "string",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Character",
        "fields": [
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharacterImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "CharacterImage",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "CharacterImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterImage",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharacterImage",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterRole",
        "fields": [
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "role",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "CharacterRolesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterRolesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharacterRole",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharacterRolesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharacterRole",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharactersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CharactersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Character",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CharactersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Character",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeStreamingOnPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOn",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOnEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOnsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateNewListAddAnimePayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreatePersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreatePersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserNotificationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotification",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotification",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotificationEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotificationsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CreateUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CustomAnimeList",
        "fields": [
          {
            "name": "animeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeIndex",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "imageUrl",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "listName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userEpisodesWatched",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userScore",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "watchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CustomAnimeListsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CustomAnimeListsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "CustomAnimeList",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "CustomAnimeListsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CustomAnimeList",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAlternateAnimeNameNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeCharacterNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeGenreNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeLicensorNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeListNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeProducerNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeStaffNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeStreamingOnPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOn",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOnEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOnsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeStreamingOnNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeStudioNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedAnimeUserScoreNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedCharacterImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedCharacterNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedCharacterRoleNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedGenreNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedLicensorNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeletePersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedPersonImageNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeletePersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedPersonNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedProducerNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedStaffRoleNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedStudioNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserAnimeListNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserAnimeNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserNotificationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserNotificationNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotification",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotification",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotificationEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotificationsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "DeleteUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "deletedUserWatchStatusNodeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Genre",
        "fields": [
          {
            "name": "animeGenres",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeGenresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "genre",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "GenresConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "GenresEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Genre",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "GenresEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Genre",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Image",
        "fields": [
          {
            "name": "animeImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharacterImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "charactersByCharacterImageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "CharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "peopleByPersonImageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PeopleConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PersonImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "ImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Image",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Image",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "InsertAnimeToUserListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "InsertOrUpdateAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Licensor",
        "fields": [
          {
            "name": "animeLicensors",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeLicensorsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "LicensorsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "LicensorsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Licensor",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "LicensorsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Licensor",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "MeType",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "role",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "username",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "MediaFormat",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "MediaFormatsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "MediaFormatsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "MediaFormat",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "MediaFormatsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "MediaFormat",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Mutation",
        "fields": [
          {
            "name": "addAnimeToList",
            "type": {
              "kind": "OBJECT",
              "name": "AddAnimeToListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "changeUsername",
            "type": {
              "kind": "OBJECT",
              "name": "ChangeUsernamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnime",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeStreamingOnPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "CreateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "CreateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreateCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CreateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createGenre",
            "type": {
              "kind": "OBJECT",
              "name": "CreateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreateImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "CreateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createNewListAddAnime",
            "type": {
              "kind": "OBJECT",
              "name": "CreateNewListAddAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createPerson",
            "type": {
              "kind": "OBJECT",
              "name": "CreatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createPersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "CreatePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createProducer",
            "type": {
              "kind": "OBJECT",
              "name": "CreateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "CreateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createStudio",
            "type": {
              "kind": "OBJECT",
              "name": "CreateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUser",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUserAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUserNotification",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserNotificationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "createUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "CreateUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAlternateAnimeNameByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnime",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeCharacterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeListByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStaffByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStreamingOnPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStreamingOnByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStreamingOnPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteAnimeUserScoreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteCharacterRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteGenre",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteGenreByGenre",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLicensorByLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePerson",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deletePersonImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeletePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteProducer",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteProducerByProducer",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStaffRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStaffRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStudio",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteStudioByStudio",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUser",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserAnimeListByAnimeListIdAndAnimeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserNotification",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserNotificationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserNotificationByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserNotificationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "deleteUserWatchStatusByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "DeleteUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "insertAnimeToUserList",
            "type": {
              "kind": "OBJECT",
              "name": "InsertAnimeToUserListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "insertOrUpdateAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "InsertOrUpdateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "registerUser",
            "type": {
              "kind": "OBJECT",
              "name": "RegisterUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAlternateAnimeNameByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeCharacterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeListByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStaffByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStreamingOnPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStreamingOnByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStreamingOnPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateAnimeUserScoreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateCharacterRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateGenreByGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLicensorByLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePerson",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updatePersonImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdatePersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateProducerByProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStaffRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStaffRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateStudioByStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUser",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserAnimeListByAnimeListIdAndAnimeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserNotification",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserNotificationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserNotificationByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserNotificationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "updateUserWatchStatusByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UpdateUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "upsertAlternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAlternateAnimeNamePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeStaffPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeStreamingOnPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertAnimeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertAnimeUserScorePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertCharacterPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertCharacterImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertCharacterImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertCharacterRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertCharacterRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertGenre",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertGenrePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertLicensorPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertPerson",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertPersonPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertPersonImage",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertPersonImagePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertProducer",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertProducerPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertStaffRole",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertStaffRolePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertStudio",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertStudioPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUser",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUserAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserAnimePayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUserAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserAnimeListPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUserNotification",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserNotificationPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "upsertUserWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UpsertUserWatchStatusPayload",
              "ofType": null
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "INTERFACE",
        "name": "Node",
        "fields": [
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [],
        "possibleTypes": [
          {
            "kind": "OBJECT",
            "name": "AlternateAnimeName"
          },
          {
            "kind": "OBJECT",
            "name": "Anime"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeCharacter"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeGenre"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeImage"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeLicensor"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeList"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeProducer"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeStaff"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeStreamingOn"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeStudio"
          },
          {
            "kind": "OBJECT",
            "name": "AnimeUserScore"
          },
          {
            "kind": "OBJECT",
            "name": "Character"
          },
          {
            "kind": "OBJECT",
            "name": "CharacterImage"
          },
          {
            "kind": "OBJECT",
            "name": "CharacterRole"
          },
          {
            "kind": "OBJECT",
            "name": "Genre"
          },
          {
            "kind": "OBJECT",
            "name": "Image"
          },
          {
            "kind": "OBJECT",
            "name": "Licensor"
          },
          {
            "kind": "OBJECT",
            "name": "Person"
          },
          {
            "kind": "OBJECT",
            "name": "PersonImage"
          },
          {
            "kind": "OBJECT",
            "name": "Producer"
          },
          {
            "kind": "OBJECT",
            "name": "Query"
          },
          {
            "kind": "OBJECT",
            "name": "StaffRole"
          },
          {
            "kind": "OBJECT",
            "name": "Studio"
          },
          {
            "kind": "OBJECT",
            "name": "User"
          },
          {
            "kind": "OBJECT",
            "name": "UserAnime"
          },
          {
            "kind": "OBJECT",
            "name": "UserNotification"
          },
          {
            "kind": "OBJECT",
            "name": "UserWatchStatus"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "NotificationEvent",
        "fields": [
          {
            "name": "event",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "notification",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotification",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PageInfo",
        "fields": [
          {
            "name": "endCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "hasNextPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "hasPreviousPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "startCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PeopleConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PeopleEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Person",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PeopleEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Person",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Person",
        "fields": [
          {
            "name": "alternateNames",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeCharacters",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeCharactersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStaffConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "firstName",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "lastName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nativeName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PersonImagesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "PersonImage",
        "fields": [
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "PersonImagesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PersonImagesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PersonImage",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "PersonImagesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PersonImage",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Producer",
        "fields": [
          {
            "name": "animeProducers",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeProducersConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "ProducersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ProducersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Producer",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ProducersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Producer",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Query",
        "fields": [
          {
            "name": "ageRatings",
            "type": {
              "kind": "OBJECT",
              "name": "AgeRatingsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "airingStatuses",
            "type": {
              "kind": "OBJECT",
              "name": "AiringStatusesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "allUserAnimes",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListTypesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "alternateAnimeNameByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "alternateAnimeNames",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": [
              {
                "name": "malId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "characterId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "characterRoleId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "language",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "personId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeCharacterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeCharacters",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "genreId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeGenres",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "imageId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeImages",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "licensorId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeLicensors",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeListByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeLists",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "producerId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeProducers",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "personId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "staffRoleId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStaffs",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOn",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "streamServiceId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStreamingOnByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOn",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStreamingOns",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOnsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "studioId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeStudios",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScoreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScores",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animes",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "availableLanguages",
            "type": {
              "kind": "OBJECT",
              "name": "AvailableLanguagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": [
              {
                "name": "malId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": [
              {
                "name": "characterId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "imageId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterImages",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": [
              {
                "name": "role",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "characterRoles",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characters",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "currentRole",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "currentUser",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "genreByGenre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": [
              {
                "name": "genre",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "genreByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "genres",
            "type": {
              "kind": "OBJECT",
              "name": "GenresConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "getUserAnimeLists",
            "type": {
              "kind": "OBJECT",
              "name": "UserListsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "watchStatusInput",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "imageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "images",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "isUsernameTaken",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": [
              {
                "name": "usernameInput",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "licensorByLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": [
              {
                "name": "licensor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "licensorByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "licensors",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "me",
            "type": {
              "kind": "OBJECT",
              "name": "MeType",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "mediaFormats",
            "type": {
              "kind": "OBJECT",
              "name": "MediaFormatsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "node",
            "type": {
              "kind": "INTERFACE",
              "name": "Node",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "people",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personByMalId",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": [
              {
                "name": "malId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": [
              {
                "name": "imageId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "personId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personImageByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "personImages",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "producerByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "producerByProducer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": [
              {
                "name": "producer",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "producers",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Query",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "searchAnimes",
            "type": {
              "kind": "OBJECT",
              "name": "SearchResultsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "searchInput",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "sourceMaterials",
            "type": {
              "kind": "OBJECT",
              "name": "SourceMaterialsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffRoleByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffRoleByRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": [
              {
                "name": "role",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffRoles",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "studioByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "studioByStudio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": [
              {
                "name": "studio",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "studios",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimeByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimeListByAnimeListIdAndAnimeId",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "animeListId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimeLists",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userAnimes",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userCustomAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "CustomAnimeListsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "listId",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "userCustomAnimeListByStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserCustomAnimeListByStatusTypesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "watchStatusType",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "userNotification",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotification",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userNotificationByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotification",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userNotifications",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotificationsConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": [
              {
                "name": "animeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatusByNodeId",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": [
              {
                "name": "nodeId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatuses",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "users",
            "type": {
              "kind": "OBJECT",
              "name": "UsersConnection",
              "ofType": null
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "RegisterUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SearchResult",
        "fields": [
          {
            "name": "ageRatingType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "airingStatusType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "altName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "coverImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "description",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "duration",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "endBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genres",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "malId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producers",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "season",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "seasonYear",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "streamingOn",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "studios",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userEpisodeCount",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userLiked",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SearchResultsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SearchResultsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SearchResult",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SearchResultsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "SearchResult",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SourceMaterial",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "sourceMaterialType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SourceMaterialsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SourceMaterialsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SourceMaterial",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "SourceMaterialsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "SourceMaterial",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffResult",
        "fields": [
          {
            "name": "actorFirstName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "actorLastName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "personId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffResultsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StaffResultsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StaffResult",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffResultsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "StaffResult",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffRole",
        "fields": [
          {
            "name": "animeStaffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStaffConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "role",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "StaffRolesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StaffRolesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StaffRole",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StaffRolesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "StaffRole",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Studio",
        "fields": [
          {
            "name": "animeStudios",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeStudiosConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "StudiosConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StudiosEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Studio",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "StudiosEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Studio",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Subscription",
        "fields": [
          {
            "name": "notificationEvent",
            "type": {
              "kind": "OBJECT",
              "name": "NotificationEvent",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeStreamingOnPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOn",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOnEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOnsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdatePersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdatePersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserNotificationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotification",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotification",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotificationEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotificationsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpdateUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAlternateAnimeNamePayload",
        "fields": [
          {
            "name": "alternateAnimeName",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeName",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "alternateAnimeNameEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AlternateAnimeNamesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeCharacterPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacter",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharacter",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeCharacterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeCharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeGenrePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenre",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeGenreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeGenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeImagePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImage",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeLicensorPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensor",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeLicensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeLicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeListPayload",
        "fields": [
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeProducerPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducer",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeProducerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeStaffPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaff",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaff",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStaffEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStaffEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeStreamingOnPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOn",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOn",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStreamingOnEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStreamingOnsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeStudioPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudio",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeStudioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeStudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertAnimeUserScorePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScore",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScore",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeUserScoreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeUserScoresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertCharacterImagePayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertCharacterPayload",
        "fields": [
          {
            "name": "character",
            "type": {
              "kind": "OBJECT",
              "name": "Character",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharactersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "characterImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertCharacterRolePayload",
        "fields": [
          {
            "name": "characterRole",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "characterRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "CharacterRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertGenrePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "genre",
            "type": {
              "kind": "OBJECT",
              "name": "Genre",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "genreEdge",
            "type": {
              "kind": "OBJECT",
              "name": "GenresEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "imageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertLicensorPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "licensor",
            "type": {
              "kind": "OBJECT",
              "name": "Licensor",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "licensorEdge",
            "type": {
              "kind": "OBJECT",
              "name": "LicensorsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertPersonImagePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "image",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImage",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personImageEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PersonImagesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertPersonPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "person",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "personEdge",
            "type": {
              "kind": "OBJECT",
              "name": "PeopleEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "personImage",
            "type": {
              "kind": "OBJECT",
              "name": "Image",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertProducerPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "producer",
            "type": {
              "kind": "OBJECT",
              "name": "Producer",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "producerEdge",
            "type": {
              "kind": "OBJECT",
              "name": "ProducersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertStaffRolePayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRole",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRole",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "staffRoleEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StaffRolesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertStudioPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studio",
            "type": {
              "kind": "OBJECT",
              "name": "Studio",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "studioEdge",
            "type": {
              "kind": "OBJECT",
              "name": "StudiosEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserAnimeListPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeList",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeList",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeListEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeListsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserAnimePayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnime",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userAnimeEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserAnimeEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserNotificationPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotification",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotification",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userNotificationEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserNotificationsEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserPayload",
        "fields": [
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UsersEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UpsertUserWatchStatusPayload",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "clientMutationId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "query",
            "type": {
              "kind": "OBJECT",
              "name": "Query",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatus",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userWatchStatusEdge",
            "type": {
              "kind": "OBJECT",
              "name": "UserWatchStatusesEdge",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "User",
        "fields": [
          {
            "name": "animeLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeListsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "animeUserScores",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "AnimeUserScoresConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userAnimes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userNotifications",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserNotificationsConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "userWatchStatuses",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserWatchStatusesConnection",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "after",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "before",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "condition",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "filter",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "first",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "last",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "orderBy",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "UserAnime",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnimeEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnime",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnime",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeList",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeIndex",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "animeList",
            "type": {
              "kind": "OBJECT",
              "name": "AnimeList",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeListType",
        "fields": [
          {
            "name": "coverImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "listId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "listName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "privacy",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeListTypesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnimeListTypesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnimeListType",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeListTypesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeListType",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeListsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnimeListsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserAnimeList",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserAnimeListsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserAnimeList",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserCustomAnimeListByStatusType",
        "fields": [
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "imageUrl",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mediaType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userEpisodesWatched",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userScore",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "watchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserCustomAnimeListByStatusTypesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserCustomAnimeListByStatusTypesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserCustomAnimeListByStatusType",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserCustomAnimeListByStatusTypesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserCustomAnimeListByStatusType",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserList",
        "fields": [
          {
            "name": "animes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserListAnime",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserListAnime",
        "fields": [
          {
            "name": "airingStatusType",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageWatcherRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "coverImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "numberOfEpisodes",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startBroadcastDatetime",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userEpisodeCount",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userLiked",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userRating",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userWatchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserListsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserListsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserList",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserListsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserList",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserNotification",
        "fields": [
          {
            "name": "createdAt",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "entityId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "entityImage",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "isRead",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "message",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "notificationType",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "UserNotificationsConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserNotificationsEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserNotification",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserNotificationsEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserNotification",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserWatchStatus",
        "fields": [
          {
            "name": "anime",
            "type": {
              "kind": "OBJECT",
              "name": "Anime",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "animeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nodeId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userEpisodesWatched",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "watchStatus",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "UserWatchStatusesConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserWatchStatusesEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UserWatchStatus",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UserWatchStatusesEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "UserWatchStatus",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UsersConnection",
        "fields": [
          {
            "name": "edges",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "UsersEdge",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "User",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "pageInfo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "PageInfo",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "totalCount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "UsersEdge",
        "fields": [
          {
            "name": "cursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "User",
                "ofType": null
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "SCALAR",
        "name": "Any"
      }
    ],
    "directives": []
  }
} as unknown as IntrospectionQuery;